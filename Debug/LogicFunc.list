
LogicFunc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088ec  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08008a84  08008a84  00018a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ccc  08008ccc  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008ccc  08008ccc  00018ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cd4  08008cd4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cd4  08008cd4  00018cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cd8  08008cd8  00018cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000858  20000090  08008d6c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e8  08008d6c  000208e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b758  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000400b  00000000  00000000  0003b818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  0003f828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  000409a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001995d  00000000  00000000  00041988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019825  00000000  00000000  0005b2e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eb41  00000000  00000000  00074b0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010364b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004928  00000000  00000000  001036a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008a6c 	.word	0x08008a6c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08008a6c 	.word	0x08008a6c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08c      	sub	sp, #48	; 0x30
 80004d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 031c 	add.w	r3, r7, #28
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004e6:	2300      	movs	r3, #0
 80004e8:	61bb      	str	r3, [r7, #24]
 80004ea:	4b61      	ldr	r3, [pc, #388]	; (8000670 <MX_GPIO_Init+0x1a0>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	4a60      	ldr	r2, [pc, #384]	; (8000670 <MX_GPIO_Init+0x1a0>)
 80004f0:	f043 0310 	orr.w	r3, r3, #16
 80004f4:	6313      	str	r3, [r2, #48]	; 0x30
 80004f6:	4b5e      	ldr	r3, [pc, #376]	; (8000670 <MX_GPIO_Init+0x1a0>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	f003 0310 	and.w	r3, r3, #16
 80004fe:	61bb      	str	r3, [r7, #24]
 8000500:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	617b      	str	r3, [r7, #20]
 8000506:	4b5a      	ldr	r3, [pc, #360]	; (8000670 <MX_GPIO_Init+0x1a0>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	4a59      	ldr	r2, [pc, #356]	; (8000670 <MX_GPIO_Init+0x1a0>)
 800050c:	f043 0304 	orr.w	r3, r3, #4
 8000510:	6313      	str	r3, [r2, #48]	; 0x30
 8000512:	4b57      	ldr	r3, [pc, #348]	; (8000670 <MX_GPIO_Init+0x1a0>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	f003 0304 	and.w	r3, r3, #4
 800051a:	617b      	str	r3, [r7, #20]
 800051c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	613b      	str	r3, [r7, #16]
 8000522:	4b53      	ldr	r3, [pc, #332]	; (8000670 <MX_GPIO_Init+0x1a0>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a52      	ldr	r2, [pc, #328]	; (8000670 <MX_GPIO_Init+0x1a0>)
 8000528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b50      	ldr	r3, [pc, #320]	; (8000670 <MX_GPIO_Init+0x1a0>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000536:	613b      	str	r3, [r7, #16]
 8000538:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	4b4c      	ldr	r3, [pc, #304]	; (8000670 <MX_GPIO_Init+0x1a0>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a4b      	ldr	r2, [pc, #300]	; (8000670 <MX_GPIO_Init+0x1a0>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b49      	ldr	r3, [pc, #292]	; (8000670 <MX_GPIO_Init+0x1a0>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	4b45      	ldr	r3, [pc, #276]	; (8000670 <MX_GPIO_Init+0x1a0>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a44      	ldr	r2, [pc, #272]	; (8000670 <MX_GPIO_Init+0x1a0>)
 8000560:	f043 0302 	orr.w	r3, r3, #2
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	4b42      	ldr	r3, [pc, #264]	; (8000670 <MX_GPIO_Init+0x1a0>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0302 	and.w	r3, r3, #2
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	4b3e      	ldr	r3, [pc, #248]	; (8000670 <MX_GPIO_Init+0x1a0>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a3d      	ldr	r2, [pc, #244]	; (8000670 <MX_GPIO_Init+0x1a0>)
 800057c:	f043 0308 	orr.w	r3, r3, #8
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b3b      	ldr	r3, [pc, #236]	; (8000670 <MX_GPIO_Init+0x1a0>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0308 	and.w	r3, r3, #8
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	2108      	movs	r1, #8
 8000592:	4838      	ldr	r0, [pc, #224]	; (8000674 <MX_GPIO_Init+0x1a4>)
 8000594:	f001 f8fe 	bl	8001794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000598:	2201      	movs	r2, #1
 800059a:	2101      	movs	r1, #1
 800059c:	4836      	ldr	r0, [pc, #216]	; (8000678 <MX_GPIO_Init+0x1a8>)
 800059e:	f001 f8f9 	bl	8001794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, A_Pin|B_Pin|C_Pin|LD4_Pin
 80005a2:	2200      	movs	r2, #0
 80005a4:	f24f 7110 	movw	r1, #63248	; 0xf710
 80005a8:	4834      	ldr	r0, [pc, #208]	; (800067c <MX_GPIO_Init+0x1ac>)
 80005aa:	f001 f8f3 	bl	8001794 <HAL_GPIO_WritePin>
                          |LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80005ae:	2304      	movs	r3, #4
 80005b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b2:	2300      	movs	r3, #0
 80005b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	4619      	mov	r1, r3
 80005c0:	482c      	ldr	r0, [pc, #176]	; (8000674 <MX_GPIO_Init+0x1a4>)
 80005c2:	f000 fe4b 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005c6:	2308      	movs	r3, #8
 80005c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d2:	2300      	movs	r3, #0
 80005d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	4619      	mov	r1, r3
 80005dc:	4825      	ldr	r0, [pc, #148]	; (8000674 <MX_GPIO_Init+0x1a4>)
 80005de:	f000 fe3d 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80005e2:	2332      	movs	r3, #50	; 0x32
 80005e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005e6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80005ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005f0:	f107 031c 	add.w	r3, r7, #28
 80005f4:	4619      	mov	r1, r3
 80005f6:	481f      	ldr	r0, [pc, #124]	; (8000674 <MX_GPIO_Init+0x1a4>)
 80005f8:	f000 fe30 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005fc:	2301      	movs	r3, #1
 80005fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000600:	2301      	movs	r3, #1
 8000602:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000608:	2300      	movs	r3, #0
 800060a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800060c:	f107 031c 	add.w	r3, r7, #28
 8000610:	4619      	mov	r1, r3
 8000612:	4819      	ldr	r0, [pc, #100]	; (8000678 <MX_GPIO_Init+0x1a8>)
 8000614:	f000 fe22 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000618:	2301      	movs	r3, #1
 800061a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800061c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000626:	f107 031c 	add.w	r3, r7, #28
 800062a:	4619      	mov	r1, r3
 800062c:	4814      	ldr	r0, [pc, #80]	; (8000680 <MX_GPIO_Init+0x1b0>)
 800062e:	f000 fe15 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|LD4_Pin
 8000632:	f24f 7310 	movw	r3, #63248	; 0xf710
 8000636:	61fb      	str	r3, [r7, #28]
                          |LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000638:	2301      	movs	r3, #1
 800063a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000640:	2300      	movs	r3, #0
 8000642:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000644:	f107 031c 	add.w	r3, r7, #28
 8000648:	4619      	mov	r1, r3
 800064a:	480c      	ldr	r0, [pc, #48]	; (800067c <MX_GPIO_Init+0x1ac>)
 800064c:	f000 fe06 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000650:	2320      	movs	r3, #32
 8000652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000654:	2300      	movs	r3, #0
 8000656:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800065c:	f107 031c 	add.w	r3, r7, #28
 8000660:	4619      	mov	r1, r3
 8000662:	4806      	ldr	r0, [pc, #24]	; (800067c <MX_GPIO_Init+0x1ac>)
 8000664:	f000 fdfa 	bl	800125c <HAL_GPIO_Init>

}
 8000668:	bf00      	nop
 800066a:	3730      	adds	r7, #48	; 0x30
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40023800 	.word	0x40023800
 8000674:	40021000 	.word	0x40021000
 8000678:	40020800 	.word	0x40020800
 800067c:	40020c00 	.word	0x40020c00
 8000680:	40020000 	.word	0x40020000

08000684 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_I2C1_Init+0x50>)
 800068a:	4a13      	ldr	r2, [pc, #76]	; (80006d8 <MX_I2C1_Init+0x54>)
 800068c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_I2C1_Init+0x50>)
 8000690:	4a12      	ldr	r2, [pc, #72]	; (80006dc <MX_I2C1_Init+0x58>)
 8000692:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_I2C1_Init+0x50>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_I2C1_Init+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_I2C1_Init+0x50>)
 80006a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a8:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <MX_I2C1_Init+0x50>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_I2C1_Init+0x50>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b4:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <MX_I2C1_Init+0x50>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_I2C1_Init+0x50>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c0:	4804      	ldr	r0, [pc, #16]	; (80006d4 <MX_I2C1_Init+0x50>)
 80006c2:	f002 fe15 	bl	80032f0 <HAL_I2C_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006cc:	f000 fa94 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	200000bc 	.word	0x200000bc
 80006d8:	40005400 	.word	0x40005400
 80006dc:	000186a0 	.word	0x000186a0

080006e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a19      	ldr	r2, [pc, #100]	; (8000764 <HAL_I2C_MspInit+0x84>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d12c      	bne.n	800075c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
 8000706:	4b18      	ldr	r3, [pc, #96]	; (8000768 <HAL_I2C_MspInit+0x88>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a17      	ldr	r2, [pc, #92]	; (8000768 <HAL_I2C_MspInit+0x88>)
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b15      	ldr	r3, [pc, #84]	; (8000768 <HAL_I2C_MspInit+0x88>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0302 	and.w	r3, r3, #2
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800071e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000724:	2312      	movs	r3, #18
 8000726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000728:	2301      	movs	r3, #1
 800072a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072c:	2300      	movs	r3, #0
 800072e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000730:	2304      	movs	r3, #4
 8000732:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	4619      	mov	r1, r3
 800073a:	480c      	ldr	r0, [pc, #48]	; (800076c <HAL_I2C_MspInit+0x8c>)
 800073c:	f000 fd8e 	bl	800125c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	4b08      	ldr	r3, [pc, #32]	; (8000768 <HAL_I2C_MspInit+0x88>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	4a07      	ldr	r2, [pc, #28]	; (8000768 <HAL_I2C_MspInit+0x88>)
 800074a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800074e:	6413      	str	r3, [r2, #64]	; 0x40
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <HAL_I2C_MspInit+0x88>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800075c:	bf00      	nop
 800075e:	3728      	adds	r7, #40	; 0x28
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40005400 	.word	0x40005400
 8000768:	40023800 	.word	0x40023800
 800076c:	40020400 	.word	0x40020400

08000770 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_I2S2_Init+0x50>)
 8000776:	4a13      	ldr	r2, [pc, #76]	; (80007c4 <MX_I2S2_Init+0x54>)
 8000778:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_I2S2_Init+0x50>)
 800077c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000780:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_I2S2_Init+0x50>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000788:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <MX_I2S2_Init+0x50>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_I2S2_Init+0x50>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <MX_I2S2_Init+0x50>)
 8000796:	4a0c      	ldr	r2, [pc, #48]	; (80007c8 <MX_I2S2_Init+0x58>)
 8000798:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_I2S2_Init+0x50>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80007a0:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <MX_I2S2_Init+0x50>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_I2S2_Init+0x50>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80007ac:	4804      	ldr	r0, [pc, #16]	; (80007c0 <MX_I2S2_Init+0x50>)
 80007ae:	f002 ff6b 	bl	8003688 <HAL_I2S_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80007b8:	f000 fa1e 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000110 	.word	0x20000110
 80007c4:	40003800 	.word	0x40003800
 80007c8:	00017700 	.word	0x00017700

080007cc <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007d0:	4b13      	ldr	r3, [pc, #76]	; (8000820 <MX_I2S3_Init+0x54>)
 80007d2:	4a14      	ldr	r2, [pc, #80]	; (8000824 <MX_I2S3_Init+0x58>)
 80007d4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007d6:	4b12      	ldr	r3, [pc, #72]	; (8000820 <MX_I2S3_Init+0x54>)
 80007d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007dc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_I2S3_Init+0x54>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007e4:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_I2S3_Init+0x54>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007ea:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <MX_I2S3_Init+0x54>)
 80007ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_I2S3_Init+0x54>)
 80007f4:	4a0c      	ldr	r2, [pc, #48]	; (8000828 <MX_I2S3_Init+0x5c>)
 80007f6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_I2S3_Init+0x54>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_I2S3_Init+0x54>)
 8000800:	2200      	movs	r2, #0
 8000802:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_I2S3_Init+0x54>)
 8000806:	2200      	movs	r2, #0
 8000808:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_I2S3_Init+0x54>)
 800080c:	f002 ff3c 	bl	8003688 <HAL_I2S_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000816:	f000 f9ef 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000158 	.word	0x20000158
 8000824:	40003c00 	.word	0x40003c00
 8000828:	00017700 	.word	0x00017700

0800082c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08e      	sub	sp, #56	; 0x38
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a59      	ldr	r2, [pc, #356]	; (80009b0 <HAL_I2S_MspInit+0x184>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d15b      	bne.n	8000906 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	623b      	str	r3, [r7, #32]
 8000852:	4b58      	ldr	r3, [pc, #352]	; (80009b4 <HAL_I2S_MspInit+0x188>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	4a57      	ldr	r2, [pc, #348]	; (80009b4 <HAL_I2S_MspInit+0x188>)
 8000858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085c:	6413      	str	r3, [r2, #64]	; 0x40
 800085e:	4b55      	ldr	r3, [pc, #340]	; (80009b4 <HAL_I2S_MspInit+0x188>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000866:	623b      	str	r3, [r7, #32]
 8000868:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]
 800086e:	4b51      	ldr	r3, [pc, #324]	; (80009b4 <HAL_I2S_MspInit+0x188>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a50      	ldr	r2, [pc, #320]	; (80009b4 <HAL_I2S_MspInit+0x188>)
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b4e      	ldr	r3, [pc, #312]	; (80009b4 <HAL_I2S_MspInit+0x188>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0304 	and.w	r3, r3, #4
 8000882:	61fb      	str	r3, [r7, #28]
 8000884:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
 800088a:	4b4a      	ldr	r3, [pc, #296]	; (80009b4 <HAL_I2S_MspInit+0x188>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a49      	ldr	r2, [pc, #292]	; (80009b4 <HAL_I2S_MspInit+0x188>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b47      	ldr	r3, [pc, #284]	; (80009b4 <HAL_I2S_MspInit+0x188>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	61bb      	str	r3, [r7, #24]
 80008a0:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008a2:	2304      	movs	r3, #4
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80008b2:	2306      	movs	r3, #6
 80008b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ba:	4619      	mov	r1, r3
 80008bc:	483e      	ldr	r0, [pc, #248]	; (80009b8 <HAL_I2S_MspInit+0x18c>)
 80008be:	f000 fccd 	bl	800125c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008c2:	2308      	movs	r3, #8
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d2:	2305      	movs	r3, #5
 80008d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008da:	4619      	mov	r1, r3
 80008dc:	4836      	ldr	r0, [pc, #216]	; (80009b8 <HAL_I2S_MspInit+0x18c>)
 80008de:	f000 fcbd 	bl	800125c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80008e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	2302      	movs	r3, #2
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008f4:	2305      	movs	r3, #5
 80008f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fc:	4619      	mov	r1, r3
 80008fe:	482f      	ldr	r0, [pc, #188]	; (80009bc <HAL_I2S_MspInit+0x190>)
 8000900:	f000 fcac 	bl	800125c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000904:	e04f      	b.n	80009a6 <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a2d      	ldr	r2, [pc, #180]	; (80009c0 <HAL_I2S_MspInit+0x194>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d14a      	bne.n	80009a6 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
 8000914:	4b27      	ldr	r3, [pc, #156]	; (80009b4 <HAL_I2S_MspInit+0x188>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000918:	4a26      	ldr	r2, [pc, #152]	; (80009b4 <HAL_I2S_MspInit+0x188>)
 800091a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800091e:	6413      	str	r3, [r2, #64]	; 0x40
 8000920:	4b24      	ldr	r3, [pc, #144]	; (80009b4 <HAL_I2S_MspInit+0x188>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000928:	617b      	str	r3, [r7, #20]
 800092a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092c:	2300      	movs	r3, #0
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <HAL_I2S_MspInit+0x188>)
 8000932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000934:	4a1f      	ldr	r2, [pc, #124]	; (80009b4 <HAL_I2S_MspInit+0x188>)
 8000936:	f043 0301 	orr.w	r3, r3, #1
 800093a:	6313      	str	r3, [r2, #48]	; 0x30
 800093c:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <HAL_I2S_MspInit+0x188>)
 800093e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <HAL_I2S_MspInit+0x188>)
 800094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000950:	4a18      	ldr	r2, [pc, #96]	; (80009b4 <HAL_I2S_MspInit+0x188>)
 8000952:	f043 0304 	orr.w	r3, r3, #4
 8000956:	6313      	str	r3, [r2, #48]	; 0x30
 8000958:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <HAL_I2S_MspInit+0x188>)
 800095a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095c:	f003 0304 	and.w	r3, r3, #4
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000964:	2310      	movs	r3, #16
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000968:	2302      	movs	r3, #2
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000974:	2306      	movs	r3, #6
 8000976:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097c:	4619      	mov	r1, r3
 800097e:	4811      	ldr	r0, [pc, #68]	; (80009c4 <HAL_I2S_MspInit+0x198>)
 8000980:	f000 fc6c 	bl	800125c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000984:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000996:	2306      	movs	r3, #6
 8000998:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099e:	4619      	mov	r1, r3
 80009a0:	4805      	ldr	r0, [pc, #20]	; (80009b8 <HAL_I2S_MspInit+0x18c>)
 80009a2:	f000 fc5b 	bl	800125c <HAL_GPIO_Init>
}
 80009a6:	bf00      	nop
 80009a8:	3738      	adds	r7, #56	; 0x38
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40003800 	.word	0x40003800
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40020800 	.word	0x40020800
 80009bc:	40020400 	.word	0x40020400
 80009c0:	40003c00 	.word	0x40003c00
 80009c4:	40020000 	.word	0x40020000

080009c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b09a      	sub	sp, #104	; 0x68
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ce:	f000 fa6f 	bl	8000eb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d2:	f000 f88d 	bl	8000af0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d6:	f7ff fd7b 	bl	80004d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009da:	f7ff fe53 	bl	8000684 <MX_I2C1_Init>
  MX_I2S2_Init();
 80009de:	f7ff fec7 	bl	8000770 <MX_I2S2_Init>
  MX_I2S3_Init();
 80009e2:	f7ff fef3 	bl	80007cc <MX_I2S3_Init>
  MX_SPI1_Init();
 80009e6:	f000 f917 	bl	8000c18 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80009ea:	f007 fc1f 	bl	800822c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  int possibleCombinations[8][3]={
 80009ee:	4a3e      	ldr	r2, [pc, #248]	; (8000ae8 <main+0x120>)
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	4611      	mov	r1, r2
 80009f4:	2260      	movs	r2, #96	; 0x60
 80009f6:	4618      	mov	r0, r3
 80009f8:	f007 ff5a 	bl	80088b0 <memcpy>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (int currComb=0; currComb<8; currComb++){
 80009fc:	2300      	movs	r3, #0
 80009fe:	667b      	str	r3, [r7, #100]	; 0x64
 8000a00:	e06c      	b.n	8000adc <main+0x114>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, possibleCombinations[currComb][0]);
 8000a02:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000a04:	4613      	mov	r3, r2
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	4413      	add	r3, r2
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000a10:	4413      	add	r3, r2
 8000a12:	3b64      	subs	r3, #100	; 0x64
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	461a      	mov	r2, r3
 8000a1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a1e:	4833      	ldr	r0, [pc, #204]	; (8000aec <main+0x124>)
 8000a20:	f000 feb8 	bl	8001794 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, possibleCombinations[currComb][1]);
 8000a24:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000a26:	4613      	mov	r3, r2
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	4413      	add	r3, r2
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000a32:	4413      	add	r3, r2
 8000a34:	3b60      	subs	r3, #96	; 0x60
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a40:	482a      	ldr	r0, [pc, #168]	; (8000aec <main+0x124>)
 8000a42:	f000 fea7 	bl	8001794 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, possibleCombinations[currComb][2]);
 8000a46:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000a48:	4613      	mov	r3, r2
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	4413      	add	r3, r2
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000a54:	4413      	add	r3, r2
 8000a56:	3b5c      	subs	r3, #92	; 0x5c
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a62:	4822      	ldr	r0, [pc, #136]	; (8000aec <main+0x124>)
 8000a64:	f000 fe96 	bl	8001794 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, possibleCombinations[currComb][0]);
 8000a68:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	4413      	add	r3, r2
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000a76:	4413      	add	r3, r2
 8000a78:	3b64      	subs	r3, #100	; 0x64
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	461a      	mov	r2, r3
 8000a80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a84:	4819      	ldr	r0, [pc, #100]	; (8000aec <main+0x124>)
 8000a86:	f000 fe85 	bl	8001794 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, possibleCombinations[currComb][1]);
 8000a8a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	4413      	add	r3, r2
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000a98:	4413      	add	r3, r2
 8000a9a:	3b60      	subs	r3, #96	; 0x60
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa6:	4811      	ldr	r0, [pc, #68]	; (8000aec <main+0x124>)
 8000aa8:	f000 fe74 	bl	8001794 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, possibleCombinations[currComb][2]);
 8000aac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000aae:	4613      	mov	r3, r2
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	4413      	add	r3, r2
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000aba:	4413      	add	r3, r2
 8000abc:	3b5c      	subs	r3, #92	; 0x5c
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ac8:	4808      	ldr	r0, [pc, #32]	; (8000aec <main+0x124>)
 8000aca:	f000 fe63 	bl	8001794 <HAL_GPIO_WritePin>
		  HAL_Delay(2000);
 8000ace:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ad2:	f000 fa5f 	bl	8000f94 <HAL_Delay>
	  for (int currComb=0; currComb<8; currComb++){
 8000ad6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ad8:	3301      	adds	r3, #1
 8000ada:	667b      	str	r3, [r7, #100]	; 0x64
 8000adc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ade:	2b07      	cmp	r3, #7
 8000ae0:	dd8f      	ble.n	8000a02 <main+0x3a>
	  }

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000ae2:	f007 fbc9 	bl	8008278 <MX_USB_HOST_Process>
	  for (int currComb=0; currComb<8; currComb++){
 8000ae6:	e789      	b.n	80009fc <main+0x34>
 8000ae8:	08008a84 	.word	0x08008a84
 8000aec:	40020c00 	.word	0x40020c00

08000af0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b09a      	sub	sp, #104	; 0x68
 8000af4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000afa:	2230      	movs	r2, #48	; 0x30
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f007 fee4 	bl	80088cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
 8000b24:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	4b31      	ldr	r3, [pc, #196]	; (8000bf0 <SystemClock_Config+0x100>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a30      	ldr	r2, [pc, #192]	; (8000bf0 <SystemClock_Config+0x100>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
 8000b36:	4b2e      	ldr	r3, [pc, #184]	; (8000bf0 <SystemClock_Config+0x100>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	4b2b      	ldr	r3, [pc, #172]	; (8000bf4 <SystemClock_Config+0x104>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a2a      	ldr	r2, [pc, #168]	; (8000bf4 <SystemClock_Config+0x104>)
 8000b4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b50:	6013      	str	r3, [r2, #0]
 8000b52:	4b28      	ldr	r3, [pc, #160]	; (8000bf4 <SystemClock_Config+0x104>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b70:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b72:	2304      	movs	r3, #4
 8000b74:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000b76:	23c0      	movs	r3, #192	; 0xc0
 8000b78:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b7a:	2304      	movs	r3, #4
 8000b7c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000b7e:	2308      	movs	r3, #8
 8000b80:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b86:	4618      	mov	r0, r3
 8000b88:	f003 fadc 	bl	8004144 <HAL_RCC_OscConfig>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b92:	f000 f831 	bl	8000bf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b96:	230f      	movs	r3, #15
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ba2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ba6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb0:	2103      	movs	r1, #3
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f003 fdee 	bl	8004794 <HAL_RCC_ClockConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000bbe:	f000 f81b 	bl	8000bf8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000bc6:	23c8      	movs	r3, #200	; 0xc8
 8000bc8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000bca:	2305      	movs	r3, #5
 8000bcc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd2:	f107 030c 	add.w	r3, r7, #12
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f004 f86c 	bl	8004cb4 <HAL_RCCEx_PeriphCLKConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000be2:	f000 f809 	bl	8000bf8 <Error_Handler>
  }
}
 8000be6:	bf00      	nop
 8000be8:	3768      	adds	r7, #104	; 0x68
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40007000 	.word	0x40007000

08000bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <Error_Handler+0x8>

08000c02 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
 8000c0a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c1c:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <MX_SPI1_Init+0x64>)
 8000c1e:	4a18      	ldr	r2, [pc, #96]	; (8000c80 <MX_SPI1_Init+0x68>)
 8000c20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c22:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <MX_SPI1_Init+0x64>)
 8000c24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c2a:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <MX_SPI1_Init+0x64>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <MX_SPI1_Init+0x64>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_SPI1_Init+0x64>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <MX_SPI1_Init+0x64>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_SPI1_Init+0x64>)
 8000c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c48:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_SPI1_Init+0x64>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c50:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <MX_SPI1_Init+0x64>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_SPI1_Init+0x64>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c5c:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <MX_SPI1_Init+0x64>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_SPI1_Init+0x64>)
 8000c64:	220a      	movs	r2, #10
 8000c66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c68:	4804      	ldr	r0, [pc, #16]	; (8000c7c <MX_SPI1_Init+0x64>)
 8000c6a:	f004 fa97 	bl	800519c <HAL_SPI_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c74:	f7ff ffc0 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	200001a0 	.word	0x200001a0
 8000c80:	40013000 	.word	0x40013000

08000c84 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a19      	ldr	r2, [pc, #100]	; (8000d08 <HAL_SPI_MspInit+0x84>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d12b      	bne.n	8000cfe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <HAL_SPI_MspInit+0x88>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	4a17      	ldr	r2, [pc, #92]	; (8000d0c <HAL_SPI_MspInit+0x88>)
 8000cb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <HAL_SPI_MspInit+0x88>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <HAL_SPI_MspInit+0x88>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a10      	ldr	r2, [pc, #64]	; (8000d0c <HAL_SPI_MspInit+0x88>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <HAL_SPI_MspInit+0x88>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cde:	23e0      	movs	r3, #224	; 0xe0
 8000ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cea:	2303      	movs	r3, #3
 8000cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cee:	2305      	movs	r3, #5
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4805      	ldr	r0, [pc, #20]	; (8000d10 <HAL_SPI_MspInit+0x8c>)
 8000cfa:	f000 faaf 	bl	800125c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000cfe:	bf00      	nop
 8000d00:	3728      	adds	r7, #40	; 0x28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40013000 	.word	0x40013000
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020000 	.word	0x40020000

08000d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	4a0f      	ldr	r2, [pc, #60]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d28:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	603b      	str	r3, [r7, #0]
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	4a08      	ldr	r2, [pc, #32]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d44:	6413      	str	r3, [r2, #64]	; 0x40
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d52:	2007      	movs	r0, #7
 8000d54:	f000 fa12 	bl	800117c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40023800 	.word	0x40023800

08000d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <NMI_Handler+0x4>

08000d6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <HardFault_Handler+0x4>

08000d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <MemManage_Handler+0x4>

08000d76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <BusFault_Handler+0x4>

08000d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <UsageFault_Handler+0x4>

08000d82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db0:	f000 f8d0 	bl	8000f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <OTG_FS_IRQHandler+0x10>)
 8000dbe:	f000 ff91 	bl	8001ce4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200005d4 	.word	0x200005d4

08000dcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd4:	4a14      	ldr	r2, [pc, #80]	; (8000e28 <_sbrk+0x5c>)
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <_sbrk+0x60>)
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d102      	bne.n	8000dee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <_sbrk+0x64>)
 8000dea:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <_sbrk+0x68>)
 8000dec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d207      	bcs.n	8000e0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dfc:	f007 fd1e 	bl	800883c <__errno>
 8000e00:	4603      	mov	r3, r0
 8000e02:	220c      	movs	r2, #12
 8000e04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	e009      	b.n	8000e20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <_sbrk+0x64>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e12:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <_sbrk+0x64>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <_sbrk+0x64>)
 8000e1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20020000 	.word	0x20020000
 8000e2c:	00000400 	.word	0x00000400
 8000e30:	200000ac 	.word	0x200000ac
 8000e34:	200008e8 	.word	0x200008e8

08000e38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <SystemInit+0x20>)
 8000e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e42:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <SystemInit+0x20>)
 8000e44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e60:	480d      	ldr	r0, [pc, #52]	; (8000e98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e62:	490e      	ldr	r1, [pc, #56]	; (8000e9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e64:	4a0e      	ldr	r2, [pc, #56]	; (8000ea0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e68:	e002      	b.n	8000e70 <LoopCopyDataInit>

08000e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6e:	3304      	adds	r3, #4

08000e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e74:	d3f9      	bcc.n	8000e6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e76:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e78:	4c0b      	ldr	r4, [pc, #44]	; (8000ea8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e7c:	e001      	b.n	8000e82 <LoopFillZerobss>

08000e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e80:	3204      	adds	r2, #4

08000e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e84:	d3fb      	bcc.n	8000e7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e86:	f7ff ffd7 	bl	8000e38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e8a:	f007 fcdd 	bl	8008848 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e8e:	f7ff fd9b 	bl	80009c8 <main>
  bx  lr    
 8000e92:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e9c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000ea0:	08008cdc 	.word	0x08008cdc
  ldr r2, =_sbss
 8000ea4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000ea8:	200008e8 	.word	0x200008e8

08000eac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eac:	e7fe      	b.n	8000eac <ADC_IRQHandler>
	...

08000eb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ef0 <HAL_Init+0x40>)
 8000eba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <HAL_Init+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <HAL_Init+0x40>)
 8000ec6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a07      	ldr	r2, [pc, #28]	; (8000ef0 <HAL_Init+0x40>)
 8000ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed8:	2003      	movs	r0, #3
 8000eda:	f000 f94f 	bl	800117c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f000 f808 	bl	8000ef4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee4:	f7ff ff16 	bl	8000d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40023c00 	.word	0x40023c00

08000ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_InitTick+0x54>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <HAL_InitTick+0x58>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	4619      	mov	r1, r3
 8000f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f996 	bl	8001244 <HAL_SYSTICK_Config>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00e      	b.n	8000f40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b0f      	cmp	r3, #15
 8000f26:	d80a      	bhi.n	8000f3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	6879      	ldr	r1, [r7, #4]
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f30:	f000 f944 	bl	80011bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f34:	4a06      	ldr	r2, [pc, #24]	; (8000f50 <HAL_InitTick+0x5c>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	e000      	b.n	8000f40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	20000004 	.word	0x20000004

08000f54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_IncTick+0x20>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_IncTick+0x24>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4413      	add	r3, r2
 8000f64:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <HAL_IncTick+0x24>)
 8000f66:	6013      	str	r3, [r2, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000008 	.word	0x20000008
 8000f78:	200001f8 	.word	0x200001f8

08000f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <HAL_GetTick+0x14>)
 8000f82:	681b      	ldr	r3, [r3, #0]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	200001f8 	.word	0x200001f8

08000f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f9c:	f7ff ffee 	bl	8000f7c <HAL_GetTick>
 8000fa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fac:	d005      	beq.n	8000fba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <HAL_Delay+0x44>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fba:	bf00      	nop
 8000fbc:	f7ff ffde 	bl	8000f7c <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d8f7      	bhi.n	8000fbc <HAL_Delay+0x28>
  {
  }
}
 8000fcc:	bf00      	nop
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000008 	.word	0x20000008

08000fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001004:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800100c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100e:	4a04      	ldr	r2, [pc, #16]	; (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	60d3      	str	r3, [r2, #12]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <__NVIC_GetPriorityGrouping+0x18>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	f003 0307 	and.w	r3, r3, #7
}
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	2b00      	cmp	r3, #0
 8001050:	db0b      	blt.n	800106a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	f003 021f 	and.w	r2, r3, #31
 8001058:	4907      	ldr	r1, [pc, #28]	; (8001078 <__NVIC_EnableIRQ+0x38>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	095b      	lsrs	r3, r3, #5
 8001060:	2001      	movs	r0, #1
 8001062:	fa00 f202 	lsl.w	r2, r0, r2
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000e100 	.word	0xe000e100

0800107c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108c:	2b00      	cmp	r3, #0
 800108e:	db0a      	blt.n	80010a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	b2da      	uxtb	r2, r3
 8001094:	490c      	ldr	r1, [pc, #48]	; (80010c8 <__NVIC_SetPriority+0x4c>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	0112      	lsls	r2, r2, #4
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	440b      	add	r3, r1
 80010a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a4:	e00a      	b.n	80010bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4908      	ldr	r1, [pc, #32]	; (80010cc <__NVIC_SetPriority+0x50>)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	3b04      	subs	r3, #4
 80010b4:	0112      	lsls	r2, r2, #4
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	440b      	add	r3, r1
 80010ba:	761a      	strb	r2, [r3, #24]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000e100 	.word	0xe000e100
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b089      	sub	sp, #36	; 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f1c3 0307 	rsb	r3, r3, #7
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	bf28      	it	cs
 80010ee:	2304      	movcs	r3, #4
 80010f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3304      	adds	r3, #4
 80010f6:	2b06      	cmp	r3, #6
 80010f8:	d902      	bls.n	8001100 <NVIC_EncodePriority+0x30>
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3b03      	subs	r3, #3
 80010fe:	e000      	b.n	8001102 <NVIC_EncodePriority+0x32>
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	f04f 32ff 	mov.w	r2, #4294967295
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43da      	mvns	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	401a      	ands	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001118:	f04f 31ff 	mov.w	r1, #4294967295
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa01 f303 	lsl.w	r3, r1, r3
 8001122:	43d9      	mvns	r1, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	4313      	orrs	r3, r2
         );
}
 800112a:	4618      	mov	r0, r3
 800112c:	3724      	adds	r7, #36	; 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001148:	d301      	bcc.n	800114e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114a:	2301      	movs	r3, #1
 800114c:	e00f      	b.n	800116e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114e:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <SysTick_Config+0x40>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001156:	210f      	movs	r1, #15
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f7ff ff8e 	bl	800107c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <SysTick_Config+0x40>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001166:	4b04      	ldr	r3, [pc, #16]	; (8001178 <SysTick_Config+0x40>)
 8001168:	2207      	movs	r2, #7
 800116a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	e000e010 	.word	0xe000e010

0800117c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b07      	cmp	r3, #7
 8001188:	d00f      	beq.n	80011aa <HAL_NVIC_SetPriorityGrouping+0x2e>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b06      	cmp	r3, #6
 800118e:	d00c      	beq.n	80011aa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b05      	cmp	r3, #5
 8001194:	d009      	beq.n	80011aa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b04      	cmp	r3, #4
 800119a:	d006      	beq.n	80011aa <HAL_NVIC_SetPriorityGrouping+0x2e>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b03      	cmp	r3, #3
 80011a0:	d003      	beq.n	80011aa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80011a2:	2192      	movs	r1, #146	; 0x92
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80011a6:	f7ff fd2c 	bl	8000c02 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ff16 	bl	8000fdc <__NVIC_SetPriorityGrouping>
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	08008ae4 	.word	0x08008ae4

080011bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
 80011c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b0f      	cmp	r3, #15
 80011d2:	d903      	bls.n	80011dc <HAL_NVIC_SetPriority+0x20>
 80011d4:	21aa      	movs	r1, #170	; 0xaa
 80011d6:	480e      	ldr	r0, [pc, #56]	; (8001210 <HAL_NVIC_SetPriority+0x54>)
 80011d8:	f7ff fd13 	bl	8000c02 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	2b0f      	cmp	r3, #15
 80011e0:	d903      	bls.n	80011ea <HAL_NVIC_SetPriority+0x2e>
 80011e2:	21ab      	movs	r1, #171	; 0xab
 80011e4:	480a      	ldr	r0, [pc, #40]	; (8001210 <HAL_NVIC_SetPriority+0x54>)
 80011e6:	f7ff fd0c 	bl	8000c02 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ea:	f7ff ff1b 	bl	8001024 <__NVIC_GetPriorityGrouping>
 80011ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	68b9      	ldr	r1, [r7, #8]
 80011f4:	6978      	ldr	r0, [r7, #20]
 80011f6:	f7ff ff6b 	bl	80010d0 <NVIC_EncodePriority>
 80011fa:	4602      	mov	r2, r0
 80011fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001200:	4611      	mov	r1, r2
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff3a 	bl	800107c <__NVIC_SetPriority>
}
 8001208:	bf00      	nop
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	08008ae4 	.word	0x08008ae4

08001214 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	2b00      	cmp	r3, #0
 8001224:	da03      	bge.n	800122e <HAL_NVIC_EnableIRQ+0x1a>
 8001226:	21be      	movs	r1, #190	; 0xbe
 8001228:	4805      	ldr	r0, [pc, #20]	; (8001240 <HAL_NVIC_EnableIRQ+0x2c>)
 800122a:	f7ff fcea 	bl	8000c02 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ff04 	bl	8001040 <__NVIC_EnableIRQ>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	08008ae4 	.word	0x08008ae4

08001244 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff73 	bl	8001138 <SysTick_Config>
 8001252:	4603      	mov	r3, r0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800126e:	2300      	movs	r3, #0
 8001270:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a33      	ldr	r2, [pc, #204]	; (8001344 <HAL_GPIO_Init+0xe8>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d017      	beq.n	80012aa <HAL_GPIO_Init+0x4e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a32      	ldr	r2, [pc, #200]	; (8001348 <HAL_GPIO_Init+0xec>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d013      	beq.n	80012aa <HAL_GPIO_Init+0x4e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a31      	ldr	r2, [pc, #196]	; (800134c <HAL_GPIO_Init+0xf0>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d00f      	beq.n	80012aa <HAL_GPIO_Init+0x4e>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a30      	ldr	r2, [pc, #192]	; (8001350 <HAL_GPIO_Init+0xf4>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d00b      	beq.n	80012aa <HAL_GPIO_Init+0x4e>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a2f      	ldr	r2, [pc, #188]	; (8001354 <HAL_GPIO_Init+0xf8>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d007      	beq.n	80012aa <HAL_GPIO_Init+0x4e>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a2e      	ldr	r2, [pc, #184]	; (8001358 <HAL_GPIO_Init+0xfc>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_Init+0x4e>
 80012a2:	21ac      	movs	r1, #172	; 0xac
 80012a4:	482d      	ldr	r0, [pc, #180]	; (800135c <HAL_GPIO_Init+0x100>)
 80012a6:	f7ff fcac 	bl	8000c02 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d005      	beq.n	80012c0 <HAL_GPIO_Init+0x64>
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	0c1b      	lsrs	r3, r3, #16
 80012ba:	041b      	lsls	r3, r3, #16
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x6c>
 80012c0:	21ad      	movs	r1, #173	; 0xad
 80012c2:	4826      	ldr	r0, [pc, #152]	; (800135c <HAL_GPIO_Init+0x100>)
 80012c4:	f7ff fc9d 	bl	8000c02 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d035      	beq.n	800133c <HAL_GPIO_Init+0xe0>
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d031      	beq.n	800133c <HAL_GPIO_Init+0xe0>
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b11      	cmp	r3, #17
 80012de:	d02d      	beq.n	800133c <HAL_GPIO_Init+0xe0>
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d029      	beq.n	800133c <HAL_GPIO_Init+0xe0>
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b12      	cmp	r3, #18
 80012ee:	d025      	beq.n	800133c <HAL_GPIO_Init+0xe0>
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80012f8:	d020      	beq.n	800133c <HAL_GPIO_Init+0xe0>
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001302:	d01b      	beq.n	800133c <HAL_GPIO_Init+0xe0>
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 800130c:	d016      	beq.n	800133c <HAL_GPIO_Init+0xe0>
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8001316:	d011      	beq.n	800133c <HAL_GPIO_Init+0xe0>
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8001320:	d00c      	beq.n	800133c <HAL_GPIO_Init+0xe0>
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800132a:	d007      	beq.n	800133c <HAL_GPIO_Init+0xe0>
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b03      	cmp	r3, #3
 8001332:	d003      	beq.n	800133c <HAL_GPIO_Init+0xe0>
 8001334:	21ae      	movs	r1, #174	; 0xae
 8001336:	4809      	ldr	r0, [pc, #36]	; (800135c <HAL_GPIO_Init+0x100>)
 8001338:	f7ff fc63 	bl	8000c02 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
 8001340:	e211      	b.n	8001766 <HAL_GPIO_Init+0x50a>
 8001342:	bf00      	nop
 8001344:	40020000 	.word	0x40020000
 8001348:	40020400 	.word	0x40020400
 800134c:	40020800 	.word	0x40020800
 8001350:	40020c00 	.word	0x40020c00
 8001354:	40021000 	.word	0x40021000
 8001358:	40021c00 	.word	0x40021c00
 800135c:	08008b20 	.word	0x08008b20
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001360:	2201      	movs	r2, #1
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	429a      	cmp	r2, r3
 800137a:	f040 81f1 	bne.w	8001760 <HAL_GPIO_Init+0x504>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	2b01      	cmp	r3, #1
 8001388:	d005      	beq.n	8001396 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001392:	2b02      	cmp	r3, #2
 8001394:	d144      	bne.n	8001420 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d00f      	beq.n	80013be <HAL_GPIO_Init+0x162>
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d00b      	beq.n	80013be <HAL_GPIO_Init+0x162>
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d007      	beq.n	80013be <HAL_GPIO_Init+0x162>
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	2b03      	cmp	r3, #3
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x162>
 80013b6:	21c0      	movs	r1, #192	; 0xc0
 80013b8:	489f      	ldr	r0, [pc, #636]	; (8001638 <HAL_GPIO_Init+0x3dc>)
 80013ba:	f7ff fc22 	bl	8000c02 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	2203      	movs	r2, #3
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4013      	ands	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	68da      	ldr	r2, [r3, #12]
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013f4:	2201      	movs	r2, #1
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	091b      	lsrs	r3, r3, #4
 800140a:	f003 0201 	and.w	r2, r3, #1
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	2b03      	cmp	r3, #3
 800142a:	d027      	beq.n	800147c <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d00b      	beq.n	800144c <HAL_GPIO_Init+0x1f0>
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d007      	beq.n	800144c <HAL_GPIO_Init+0x1f0>
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	2b02      	cmp	r3, #2
 8001442:	d003      	beq.n	800144c <HAL_GPIO_Init+0x1f0>
 8001444:	21d1      	movs	r1, #209	; 0xd1
 8001446:	487c      	ldr	r0, [pc, #496]	; (8001638 <HAL_GPIO_Init+0x3dc>)
 8001448:	f7ff fbdb 	bl	8000c02 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	2203      	movs	r2, #3
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	2b02      	cmp	r3, #2
 8001486:	f040 80a0 	bne.w	80015ca <HAL_GPIO_Init+0x36e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d077      	beq.n	8001582 <HAL_GPIO_Init+0x326>
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	2b09      	cmp	r3, #9
 8001498:	d073      	beq.n	8001582 <HAL_GPIO_Init+0x326>
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d06f      	beq.n	8001582 <HAL_GPIO_Init+0x326>
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d06b      	beq.n	8001582 <HAL_GPIO_Init+0x326>
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d067      	beq.n	8001582 <HAL_GPIO_Init+0x326>
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d063      	beq.n	8001582 <HAL_GPIO_Init+0x326>
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d05f      	beq.n	8001582 <HAL_GPIO_Init+0x326>
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d05b      	beq.n	8001582 <HAL_GPIO_Init+0x326>
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d057      	beq.n	8001582 <HAL_GPIO_Init+0x326>
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d053      	beq.n	8001582 <HAL_GPIO_Init+0x326>
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d04f      	beq.n	8001582 <HAL_GPIO_Init+0x326>
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d04b      	beq.n	8001582 <HAL_GPIO_Init+0x326>
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	d047      	beq.n	8001582 <HAL_GPIO_Init+0x326>
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	d043      	beq.n	8001582 <HAL_GPIO_Init+0x326>
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	2b05      	cmp	r3, #5
 8001500:	d03f      	beq.n	8001582 <HAL_GPIO_Init+0x326>
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	2b05      	cmp	r3, #5
 8001508:	d03b      	beq.n	8001582 <HAL_GPIO_Init+0x326>
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	2b05      	cmp	r3, #5
 8001510:	d037      	beq.n	8001582 <HAL_GPIO_Init+0x326>
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	2b06      	cmp	r3, #6
 8001518:	d033      	beq.n	8001582 <HAL_GPIO_Init+0x326>
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	2b06      	cmp	r3, #6
 8001520:	d02f      	beq.n	8001582 <HAL_GPIO_Init+0x326>
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	2b05      	cmp	r3, #5
 8001528:	d02b      	beq.n	8001582 <HAL_GPIO_Init+0x326>
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	2b06      	cmp	r3, #6
 8001530:	d027      	beq.n	8001582 <HAL_GPIO_Init+0x326>
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	691b      	ldr	r3, [r3, #16]
 8001536:	2b07      	cmp	r3, #7
 8001538:	d023      	beq.n	8001582 <HAL_GPIO_Init+0x326>
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	2b07      	cmp	r3, #7
 8001540:	d01f      	beq.n	8001582 <HAL_GPIO_Init+0x326>
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	2b07      	cmp	r3, #7
 8001548:	d01b      	beq.n	8001582 <HAL_GPIO_Init+0x326>
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	2b08      	cmp	r3, #8
 8001550:	d017      	beq.n	8001582 <HAL_GPIO_Init+0x326>
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	2b0a      	cmp	r3, #10
 8001558:	d013      	beq.n	8001582 <HAL_GPIO_Init+0x326>
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	2b09      	cmp	r3, #9
 8001560:	d00f      	beq.n	8001582 <HAL_GPIO_Init+0x326>
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	2b09      	cmp	r3, #9
 8001568:	d00b      	beq.n	8001582 <HAL_GPIO_Init+0x326>
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	2b0c      	cmp	r3, #12
 8001570:	d007      	beq.n	8001582 <HAL_GPIO_Init+0x326>
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	2b0f      	cmp	r3, #15
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_Init+0x326>
 800157a:	21de      	movs	r1, #222	; 0xde
 800157c:	482e      	ldr	r0, [pc, #184]	; (8001638 <HAL_GPIO_Init+0x3dc>)
 800157e:	f7ff fb40 	bl	8000c02 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	08da      	lsrs	r2, r3, #3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3208      	adds	r2, #8
 800158a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	220f      	movs	r2, #15
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4013      	ands	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	691a      	ldr	r2, [r3, #16]
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	08da      	lsrs	r2, r3, #3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3208      	adds	r2, #8
 80015c4:	69b9      	ldr	r1, [r7, #24]
 80015c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	2203      	movs	r2, #3
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43db      	mvns	r3, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4013      	ands	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 0203 	and.w	r2, r3, #3
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001606:	2b00      	cmp	r3, #0
 8001608:	f000 80aa 	beq.w	8001760 <HAL_GPIO_Init+0x504>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	4b0a      	ldr	r3, [pc, #40]	; (800163c <HAL_GPIO_Init+0x3e0>)
 8001612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001614:	4a09      	ldr	r2, [pc, #36]	; (800163c <HAL_GPIO_Init+0x3e0>)
 8001616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800161a:	6453      	str	r3, [r2, #68]	; 0x44
 800161c:	4b07      	ldr	r3, [pc, #28]	; (800163c <HAL_GPIO_Init+0x3e0>)
 800161e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001628:	4a05      	ldr	r2, [pc, #20]	; (8001640 <HAL_GPIO_Init+0x3e4>)
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	089b      	lsrs	r3, r3, #2
 800162e:	3302      	adds	r3, #2
 8001630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001634:	e006      	b.n	8001644 <HAL_GPIO_Init+0x3e8>
 8001636:	bf00      	nop
 8001638:	08008b20 	.word	0x08008b20
 800163c:	40023800 	.word	0x40023800
 8001640:	40013800 	.word	0x40013800
 8001644:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	f003 0303 	and.w	r3, r3, #3
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	220f      	movs	r2, #15
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a46      	ldr	r2, [pc, #280]	; (8001778 <HAL_GPIO_Init+0x51c>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d019      	beq.n	8001698 <HAL_GPIO_Init+0x43c>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a45      	ldr	r2, [pc, #276]	; (800177c <HAL_GPIO_Init+0x520>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d013      	beq.n	8001694 <HAL_GPIO_Init+0x438>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a44      	ldr	r2, [pc, #272]	; (8001780 <HAL_GPIO_Init+0x524>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d00d      	beq.n	8001690 <HAL_GPIO_Init+0x434>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a43      	ldr	r2, [pc, #268]	; (8001784 <HAL_GPIO_Init+0x528>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d007      	beq.n	800168c <HAL_GPIO_Init+0x430>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a42      	ldr	r2, [pc, #264]	; (8001788 <HAL_GPIO_Init+0x52c>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d101      	bne.n	8001688 <HAL_GPIO_Init+0x42c>
 8001684:	2304      	movs	r3, #4
 8001686:	e008      	b.n	800169a <HAL_GPIO_Init+0x43e>
 8001688:	2307      	movs	r3, #7
 800168a:	e006      	b.n	800169a <HAL_GPIO_Init+0x43e>
 800168c:	2303      	movs	r3, #3
 800168e:	e004      	b.n	800169a <HAL_GPIO_Init+0x43e>
 8001690:	2302      	movs	r3, #2
 8001692:	e002      	b.n	800169a <HAL_GPIO_Init+0x43e>
 8001694:	2301      	movs	r3, #1
 8001696:	e000      	b.n	800169a <HAL_GPIO_Init+0x43e>
 8001698:	2300      	movs	r3, #0
 800169a:	69fa      	ldr	r2, [r7, #28]
 800169c:	f002 0203 	and.w	r2, r2, #3
 80016a0:	0092      	lsls	r2, r2, #2
 80016a2:	4093      	lsls	r3, r2
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016aa:	4938      	ldr	r1, [pc, #224]	; (800178c <HAL_GPIO_Init+0x530>)
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	3302      	adds	r3, #2
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016b8:	4b35      	ldr	r3, [pc, #212]	; (8001790 <HAL_GPIO_Init+0x534>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016dc:	4a2c      	ldr	r2, [pc, #176]	; (8001790 <HAL_GPIO_Init+0x534>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016e2:	4b2b      	ldr	r3, [pc, #172]	; (8001790 <HAL_GPIO_Init+0x534>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	43db      	mvns	r3, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4013      	ands	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001706:	4a22      	ldr	r2, [pc, #136]	; (8001790 <HAL_GPIO_Init+0x534>)
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800170c:	4b20      	ldr	r3, [pc, #128]	; (8001790 <HAL_GPIO_Init+0x534>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	43db      	mvns	r3, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <HAL_GPIO_Init+0x4d4>
        {
          temp |= iocurrent;
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001730:	4a17      	ldr	r2, [pc, #92]	; (8001790 <HAL_GPIO_Init+0x534>)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001736:	4b16      	ldr	r3, [pc, #88]	; (8001790 <HAL_GPIO_Init+0x534>)
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	43db      	mvns	r3, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4013      	ands	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_GPIO_Init+0x4fe>
        {
          temp |= iocurrent;
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	4313      	orrs	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800175a:	4a0d      	ldr	r2, [pc, #52]	; (8001790 <HAL_GPIO_Init+0x534>)
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	3301      	adds	r3, #1
 8001764:	61fb      	str	r3, [r7, #28]
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	2b0f      	cmp	r3, #15
 800176a:	f67f adf9 	bls.w	8001360 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 800176e:	bf00      	nop
 8001770:	bf00      	nop
 8001772:	3720      	adds	r7, #32
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40020000 	.word	0x40020000
 800177c:	40020400 	.word	0x40020400
 8001780:	40020800 	.word	0x40020800
 8001784:	40020c00 	.word	0x40020c00
 8001788:	40021000 	.word	0x40021000
 800178c:	40013800 	.word	0x40013800
 8001790:	40013c00 	.word	0x40013c00

08001794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	807b      	strh	r3, [r7, #2]
 80017a0:	4613      	mov	r3, r2
 80017a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80017a4:	887b      	ldrh	r3, [r7, #2]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d004      	beq.n	80017b4 <HAL_GPIO_WritePin+0x20>
 80017aa:	887b      	ldrh	r3, [r7, #2]
 80017ac:	0c1b      	lsrs	r3, r3, #16
 80017ae:	041b      	lsls	r3, r3, #16
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d004      	beq.n	80017be <HAL_GPIO_WritePin+0x2a>
 80017b4:	f240 119d 	movw	r1, #413	; 0x19d
 80017b8:	480e      	ldr	r0, [pc, #56]	; (80017f4 <HAL_GPIO_WritePin+0x60>)
 80017ba:	f7ff fa22 	bl	8000c02 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80017be:	787b      	ldrb	r3, [r7, #1]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d007      	beq.n	80017d4 <HAL_GPIO_WritePin+0x40>
 80017c4:	787b      	ldrb	r3, [r7, #1]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d004      	beq.n	80017d4 <HAL_GPIO_WritePin+0x40>
 80017ca:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80017ce:	4809      	ldr	r0, [pc, #36]	; (80017f4 <HAL_GPIO_WritePin+0x60>)
 80017d0:	f7ff fa17 	bl	8000c02 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80017d4:	787b      	ldrb	r3, [r7, #1]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017da:	887a      	ldrh	r2, [r7, #2]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017e0:	e003      	b.n	80017ea <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017e2:	887b      	ldrh	r3, [r7, #2]
 80017e4:	041a      	lsls	r2, r3, #16
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	619a      	str	r2, [r3, #24]
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	08008b20 	.word	0x08008b20

080017f8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80017f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017fa:	b08f      	sub	sp, #60	; 0x3c
 80017fc:	af0a      	add	r7, sp, #40	; 0x28
 80017fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e05d      	b.n	80018c6 <HAL_HCD_Init+0xce>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001812:	d003      	beq.n	800181c <HAL_HCD_Init+0x24>
 8001814:	2179      	movs	r1, #121	; 0x79
 8001816:	482e      	ldr	r0, [pc, #184]	; (80018d0 <HAL_HCD_Init+0xd8>)
 8001818:	f7ff f9f3 	bl	8000c02 <assert_failed>

  USBx = hhcd->Instance;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d106      	bne.n	800183c <HAL_HCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f006 fd56 	bl	80082e8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2203      	movs	r2, #3
 8001840:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184c:	2b00      	cmp	r3, #0
 800184e:	d102      	bne.n	8001856 <HAL_HCD_Init+0x5e>
  {
    hhcd->Init.dma_enable = 0U;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f003 feac 	bl	80055b8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	603b      	str	r3, [r7, #0]
 8001866:	687e      	ldr	r6, [r7, #4]
 8001868:	466d      	mov	r5, sp
 800186a:	f106 0410 	add.w	r4, r6, #16
 800186e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001870:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001872:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001874:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001876:	e894 0003 	ldmia.w	r4, {r0, r1}
 800187a:	e885 0003 	stmia.w	r5, {r0, r1}
 800187e:	1d33      	adds	r3, r6, #4
 8001880:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001882:	6838      	ldr	r0, [r7, #0]
 8001884:	f003 fe26 	bl	80054d4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2101      	movs	r1, #1
 800188e:	4618      	mov	r0, r3
 8001890:	f003 fea3 	bl	80055da <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	603b      	str	r3, [r7, #0]
 800189a:	687e      	ldr	r6, [r7, #4]
 800189c:	466d      	mov	r5, sp
 800189e:	f106 0410 	add.w	r4, r6, #16
 80018a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80018b2:	1d33      	adds	r3, r6, #4
 80018b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018b6:	6838      	ldr	r0, [r7, #0]
 80018b8:	f004 f80a 	bl	80058d0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018ce:	bf00      	nop
 80018d0:	08008b5c 	.word	0x08008b5c

080018d4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80018d4:	b590      	push	{r4, r7, lr}
 80018d6:	b089      	sub	sp, #36	; 0x24
 80018d8:	af04      	add	r7, sp, #16
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	4608      	mov	r0, r1
 80018de:	4611      	mov	r1, r2
 80018e0:	461a      	mov	r2, r3
 80018e2:	4603      	mov	r3, r0
 80018e4:	70fb      	strb	r3, [r7, #3]
 80018e6:	460b      	mov	r3, r1
 80018e8:	70bb      	strb	r3, [r7, #2]
 80018ea:	4613      	mov	r3, r2
 80018ec:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d101      	bne.n	80018fc <HAL_HCD_HC_Init+0x28>
 80018f8:	2302      	movs	r3, #2
 80018fa:	e076      	b.n	80019ea <HAL_HCD_HC_Init+0x116>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001904:	78fb      	ldrb	r3, [r7, #3]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	212c      	movs	r1, #44	; 0x2c
 800190a:	fb01 f303 	mul.w	r3, r1, r3
 800190e:	4413      	add	r3, r2
 8001910:	333d      	adds	r3, #61	; 0x3d
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001916:	78fb      	ldrb	r3, [r7, #3]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	212c      	movs	r1, #44	; 0x2c
 800191c:	fb01 f303 	mul.w	r3, r1, r3
 8001920:	4413      	add	r3, r2
 8001922:	3338      	adds	r3, #56	; 0x38
 8001924:	787a      	ldrb	r2, [r7, #1]
 8001926:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001928:	78fb      	ldrb	r3, [r7, #3]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	212c      	movs	r1, #44	; 0x2c
 800192e:	fb01 f303 	mul.w	r3, r1, r3
 8001932:	4413      	add	r3, r2
 8001934:	3340      	adds	r3, #64	; 0x40
 8001936:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001938:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800193a:	78fb      	ldrb	r3, [r7, #3]
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	212c      	movs	r1, #44	; 0x2c
 8001940:	fb01 f303 	mul.w	r3, r1, r3
 8001944:	4413      	add	r3, r2
 8001946:	3339      	adds	r3, #57	; 0x39
 8001948:	78fa      	ldrb	r2, [r7, #3]
 800194a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800194c:	78fb      	ldrb	r3, [r7, #3]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	212c      	movs	r1, #44	; 0x2c
 8001952:	fb01 f303 	mul.w	r3, r1, r3
 8001956:	4413      	add	r3, r2
 8001958:	333f      	adds	r3, #63	; 0x3f
 800195a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800195e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001960:	78fb      	ldrb	r3, [r7, #3]
 8001962:	78ba      	ldrb	r2, [r7, #2]
 8001964:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001968:	b2d0      	uxtb	r0, r2
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	212c      	movs	r1, #44	; 0x2c
 800196e:	fb01 f303 	mul.w	r3, r1, r3
 8001972:	4413      	add	r3, r2
 8001974:	333a      	adds	r3, #58	; 0x3a
 8001976:	4602      	mov	r2, r0
 8001978:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800197a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800197e:	2b00      	cmp	r3, #0
 8001980:	da09      	bge.n	8001996 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001982:	78fb      	ldrb	r3, [r7, #3]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	212c      	movs	r1, #44	; 0x2c
 8001988:	fb01 f303 	mul.w	r3, r1, r3
 800198c:	4413      	add	r3, r2
 800198e:	333b      	adds	r3, #59	; 0x3b
 8001990:	2201      	movs	r2, #1
 8001992:	701a      	strb	r2, [r3, #0]
 8001994:	e008      	b.n	80019a8 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001996:	78fb      	ldrb	r3, [r7, #3]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	212c      	movs	r1, #44	; 0x2c
 800199c:	fb01 f303 	mul.w	r3, r1, r3
 80019a0:	4413      	add	r3, r2
 80019a2:	333b      	adds	r3, #59	; 0x3b
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	212c      	movs	r1, #44	; 0x2c
 80019ae:	fb01 f303 	mul.w	r3, r1, r3
 80019b2:	4413      	add	r3, r2
 80019b4:	333c      	adds	r3, #60	; 0x3c
 80019b6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80019ba:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6818      	ldr	r0, [r3, #0]
 80019c0:	787c      	ldrb	r4, [r7, #1]
 80019c2:	78ba      	ldrb	r2, [r7, #2]
 80019c4:	78f9      	ldrb	r1, [r7, #3]
 80019c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019c8:	9302      	str	r3, [sp, #8]
 80019ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019ce:	9301      	str	r3, [sp, #4]
 80019d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	4623      	mov	r3, r4
 80019d8:	f004 f8f4 	bl	8005bc4 <USB_HC_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd90      	pop	{r4, r7, pc}

080019f2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b084      	sub	sp, #16
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
 80019fa:	460b      	mov	r3, r1
 80019fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80019fe:	2300      	movs	r3, #0
 8001a00:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d101      	bne.n	8001a10 <HAL_HCD_HC_Halt+0x1e>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e00f      	b.n	8001a30 <HAL_HCD_HC_Halt+0x3e>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	78fa      	ldrb	r2, [r7, #3]
 8001a1e:	4611      	mov	r1, r2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f004 fb30 	bl	8006086 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	4608      	mov	r0, r1
 8001a42:	4611      	mov	r1, r2
 8001a44:	461a      	mov	r2, r3
 8001a46:	4603      	mov	r3, r0
 8001a48:	70fb      	strb	r3, [r7, #3]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	70bb      	strb	r3, [r7, #2]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001a52:	78fb      	ldrb	r3, [r7, #3]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	212c      	movs	r1, #44	; 0x2c
 8001a58:	fb01 f303 	mul.w	r3, r1, r3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	333b      	adds	r3, #59	; 0x3b
 8001a60:	78ba      	ldrb	r2, [r7, #2]
 8001a62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001a64:	78fb      	ldrb	r3, [r7, #3]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	212c      	movs	r1, #44	; 0x2c
 8001a6a:	fb01 f303 	mul.w	r3, r1, r3
 8001a6e:	4413      	add	r3, r2
 8001a70:	333f      	adds	r3, #63	; 0x3f
 8001a72:	787a      	ldrb	r2, [r7, #1]
 8001a74:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001a76:	7c3b      	ldrb	r3, [r7, #16]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d112      	bne.n	8001aa2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001a7c:	78fb      	ldrb	r3, [r7, #3]
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	212c      	movs	r1, #44	; 0x2c
 8001a82:	fb01 f303 	mul.w	r3, r1, r3
 8001a86:	4413      	add	r3, r2
 8001a88:	3342      	adds	r3, #66	; 0x42
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001a8e:	78fb      	ldrb	r3, [r7, #3]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	212c      	movs	r1, #44	; 0x2c
 8001a94:	fb01 f303 	mul.w	r3, r1, r3
 8001a98:	4413      	add	r3, r2
 8001a9a:	333d      	adds	r3, #61	; 0x3d
 8001a9c:	7f3a      	ldrb	r2, [r7, #28]
 8001a9e:	701a      	strb	r2, [r3, #0]
 8001aa0:	e008      	b.n	8001ab4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001aa2:	78fb      	ldrb	r3, [r7, #3]
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	212c      	movs	r1, #44	; 0x2c
 8001aa8:	fb01 f303 	mul.w	r3, r1, r3
 8001aac:	4413      	add	r3, r2
 8001aae:	3342      	adds	r3, #66	; 0x42
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001ab4:	787b      	ldrb	r3, [r7, #1]
 8001ab6:	2b03      	cmp	r3, #3
 8001ab8:	f200 80c6 	bhi.w	8001c48 <HAL_HCD_HC_SubmitRequest+0x210>
 8001abc:	a201      	add	r2, pc, #4	; (adr r2, 8001ac4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac2:	bf00      	nop
 8001ac4:	08001ad5 	.word	0x08001ad5
 8001ac8:	08001c35 	.word	0x08001c35
 8001acc:	08001b39 	.word	0x08001b39
 8001ad0:	08001bb7 	.word	0x08001bb7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001ad4:	7c3b      	ldrb	r3, [r7, #16]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	f040 80b8 	bne.w	8001c4c <HAL_HCD_HC_SubmitRequest+0x214>
 8001adc:	78bb      	ldrb	r3, [r7, #2]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f040 80b4 	bne.w	8001c4c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001ae4:	8b3b      	ldrh	r3, [r7, #24]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d108      	bne.n	8001afc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001aea:	78fb      	ldrb	r3, [r7, #3]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	212c      	movs	r1, #44	; 0x2c
 8001af0:	fb01 f303 	mul.w	r3, r1, r3
 8001af4:	4413      	add	r3, r2
 8001af6:	3355      	adds	r3, #85	; 0x55
 8001af8:	2201      	movs	r2, #1
 8001afa:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	212c      	movs	r1, #44	; 0x2c
 8001b02:	fb01 f303 	mul.w	r3, r1, r3
 8001b06:	4413      	add	r3, r2
 8001b08:	3355      	adds	r3, #85	; 0x55
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d109      	bne.n	8001b24 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	212c      	movs	r1, #44	; 0x2c
 8001b16:	fb01 f303 	mul.w	r3, r1, r3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	3342      	adds	r3, #66	; 0x42
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b22:	e093      	b.n	8001c4c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b24:	78fb      	ldrb	r3, [r7, #3]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	212c      	movs	r1, #44	; 0x2c
 8001b2a:	fb01 f303 	mul.w	r3, r1, r3
 8001b2e:	4413      	add	r3, r2
 8001b30:	3342      	adds	r3, #66	; 0x42
 8001b32:	2202      	movs	r2, #2
 8001b34:	701a      	strb	r2, [r3, #0]
      break;
 8001b36:	e089      	b.n	8001c4c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001b38:	78bb      	ldrb	r3, [r7, #2]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d11d      	bne.n	8001b7a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b3e:	78fb      	ldrb	r3, [r7, #3]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	212c      	movs	r1, #44	; 0x2c
 8001b44:	fb01 f303 	mul.w	r3, r1, r3
 8001b48:	4413      	add	r3, r2
 8001b4a:	3355      	adds	r3, #85	; 0x55
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d109      	bne.n	8001b66 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b52:	78fb      	ldrb	r3, [r7, #3]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	212c      	movs	r1, #44	; 0x2c
 8001b58:	fb01 f303 	mul.w	r3, r1, r3
 8001b5c:	4413      	add	r3, r2
 8001b5e:	3342      	adds	r3, #66	; 0x42
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001b64:	e073      	b.n	8001c4e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b66:	78fb      	ldrb	r3, [r7, #3]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	212c      	movs	r1, #44	; 0x2c
 8001b6c:	fb01 f303 	mul.w	r3, r1, r3
 8001b70:	4413      	add	r3, r2
 8001b72:	3342      	adds	r3, #66	; 0x42
 8001b74:	2202      	movs	r2, #2
 8001b76:	701a      	strb	r2, [r3, #0]
      break;
 8001b78:	e069      	b.n	8001c4e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b7a:	78fb      	ldrb	r3, [r7, #3]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	212c      	movs	r1, #44	; 0x2c
 8001b80:	fb01 f303 	mul.w	r3, r1, r3
 8001b84:	4413      	add	r3, r2
 8001b86:	3354      	adds	r3, #84	; 0x54
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d109      	bne.n	8001ba2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b8e:	78fb      	ldrb	r3, [r7, #3]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	212c      	movs	r1, #44	; 0x2c
 8001b94:	fb01 f303 	mul.w	r3, r1, r3
 8001b98:	4413      	add	r3, r2
 8001b9a:	3342      	adds	r3, #66	; 0x42
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
      break;
 8001ba0:	e055      	b.n	8001c4e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ba2:	78fb      	ldrb	r3, [r7, #3]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	212c      	movs	r1, #44	; 0x2c
 8001ba8:	fb01 f303 	mul.w	r3, r1, r3
 8001bac:	4413      	add	r3, r2
 8001bae:	3342      	adds	r3, #66	; 0x42
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	701a      	strb	r2, [r3, #0]
      break;
 8001bb4:	e04b      	b.n	8001c4e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001bb6:	78bb      	ldrb	r3, [r7, #2]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d11d      	bne.n	8001bf8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001bbc:	78fb      	ldrb	r3, [r7, #3]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	212c      	movs	r1, #44	; 0x2c
 8001bc2:	fb01 f303 	mul.w	r3, r1, r3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3355      	adds	r3, #85	; 0x55
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d109      	bne.n	8001be4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bd0:	78fb      	ldrb	r3, [r7, #3]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	212c      	movs	r1, #44	; 0x2c
 8001bd6:	fb01 f303 	mul.w	r3, r1, r3
 8001bda:	4413      	add	r3, r2
 8001bdc:	3342      	adds	r3, #66	; 0x42
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001be2:	e034      	b.n	8001c4e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001be4:	78fb      	ldrb	r3, [r7, #3]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	212c      	movs	r1, #44	; 0x2c
 8001bea:	fb01 f303 	mul.w	r3, r1, r3
 8001bee:	4413      	add	r3, r2
 8001bf0:	3342      	adds	r3, #66	; 0x42
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	701a      	strb	r2, [r3, #0]
      break;
 8001bf6:	e02a      	b.n	8001c4e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	212c      	movs	r1, #44	; 0x2c
 8001bfe:	fb01 f303 	mul.w	r3, r1, r3
 8001c02:	4413      	add	r3, r2
 8001c04:	3354      	adds	r3, #84	; 0x54
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d109      	bne.n	8001c20 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c0c:	78fb      	ldrb	r3, [r7, #3]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	212c      	movs	r1, #44	; 0x2c
 8001c12:	fb01 f303 	mul.w	r3, r1, r3
 8001c16:	4413      	add	r3, r2
 8001c18:	3342      	adds	r3, #66	; 0x42
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	701a      	strb	r2, [r3, #0]
      break;
 8001c1e:	e016      	b.n	8001c4e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c20:	78fb      	ldrb	r3, [r7, #3]
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	212c      	movs	r1, #44	; 0x2c
 8001c26:	fb01 f303 	mul.w	r3, r1, r3
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3342      	adds	r3, #66	; 0x42
 8001c2e:	2202      	movs	r2, #2
 8001c30:	701a      	strb	r2, [r3, #0]
      break;
 8001c32:	e00c      	b.n	8001c4e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	212c      	movs	r1, #44	; 0x2c
 8001c3a:	fb01 f303 	mul.w	r3, r1, r3
 8001c3e:	4413      	add	r3, r2
 8001c40:	3342      	adds	r3, #66	; 0x42
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]
      break;
 8001c46:	e002      	b.n	8001c4e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001c48:	bf00      	nop
 8001c4a:	e000      	b.n	8001c4e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001c4c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001c4e:	78fb      	ldrb	r3, [r7, #3]
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	212c      	movs	r1, #44	; 0x2c
 8001c54:	fb01 f303 	mul.w	r3, r1, r3
 8001c58:	4413      	add	r3, r2
 8001c5a:	3344      	adds	r3, #68	; 0x44
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	8b3a      	ldrh	r2, [r7, #24]
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	202c      	movs	r0, #44	; 0x2c
 8001c68:	fb00 f303 	mul.w	r3, r0, r3
 8001c6c:	440b      	add	r3, r1
 8001c6e:	334c      	adds	r3, #76	; 0x4c
 8001c70:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001c72:	78fb      	ldrb	r3, [r7, #3]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	212c      	movs	r1, #44	; 0x2c
 8001c78:	fb01 f303 	mul.w	r3, r1, r3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3360      	adds	r3, #96	; 0x60
 8001c80:	2200      	movs	r2, #0
 8001c82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001c84:	78fb      	ldrb	r3, [r7, #3]
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	212c      	movs	r1, #44	; 0x2c
 8001c8a:	fb01 f303 	mul.w	r3, r1, r3
 8001c8e:	4413      	add	r3, r2
 8001c90:	3350      	adds	r3, #80	; 0x50
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c96:	78fb      	ldrb	r3, [r7, #3]
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	212c      	movs	r1, #44	; 0x2c
 8001c9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3339      	adds	r3, #57	; 0x39
 8001ca4:	78fa      	ldrb	r2, [r7, #3]
 8001ca6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001ca8:	78fb      	ldrb	r3, [r7, #3]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	212c      	movs	r1, #44	; 0x2c
 8001cae:	fb01 f303 	mul.w	r3, r1, r3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3361      	adds	r3, #97	; 0x61
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6818      	ldr	r0, [r3, #0]
 8001cbe:	78fb      	ldrb	r3, [r7, #3]
 8001cc0:	222c      	movs	r2, #44	; 0x2c
 8001cc2:	fb02 f303 	mul.w	r3, r2, r3
 8001cc6:	3338      	adds	r3, #56	; 0x38
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	18d1      	adds	r1, r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	f004 f884 	bl	8005de0 <USB_HC_StartXfer>
 8001cd8:	4603      	mov	r3, r0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop

08001ce4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f003 fda7 	bl	800584e <USB_GetMode>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	f040 80f6 	bne.w	8001ef4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f003 fd8b 	bl	8005828 <USB_ReadInterrupts>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 80ec 	beq.w	8001ef2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f003 fd82 	bl	8005828 <USB_ReadInterrupts>
 8001d24:	4603      	mov	r3, r0
 8001d26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d2e:	d104      	bne.n	8001d3a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001d38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f003 fd72 	bl	8005828 <USB_ReadInterrupts>
 8001d44:	4603      	mov	r3, r0
 8001d46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d4e:	d104      	bne.n	8001d5a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d58:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f003 fd62 	bl	8005828 <USB_ReadInterrupts>
 8001d64:	4603      	mov	r3, r0
 8001d66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d6e:	d104      	bne.n	8001d7a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d78:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f003 fd52 	bl	8005828 <USB_ReadInterrupts>
 8001d84:	4603      	mov	r3, r0
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d103      	bne.n	8001d96 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2202      	movs	r2, #2
 8001d94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f003 fd44 	bl	8005828 <USB_ReadInterrupts>
 8001da0:	4603      	mov	r3, r0
 8001da2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001da6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001daa:	d11c      	bne.n	8001de6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001db4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10f      	bne.n	8001de6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001dc6:	2110      	movs	r1, #16
 8001dc8:	6938      	ldr	r0, [r7, #16]
 8001dca:	f003 fc53 	bl	8005674 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001dce:	6938      	ldr	r0, [r7, #16]
 8001dd0:	f003 fc74 	bl	80056bc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2101      	movs	r1, #1
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f003 fe2c 	bl	8005a38 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f006 faff 	bl	80083e4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f003 fd1c 	bl	8005828 <USB_ReadInterrupts>
 8001df0:	4603      	mov	r3, r0
 8001df2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001df6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dfa:	d102      	bne.n	8001e02 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f001 fa03 	bl	8003208 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f003 fd0e 	bl	8005828 <USB_ReadInterrupts>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b08      	cmp	r3, #8
 8001e14:	d106      	bne.n	8001e24 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f006 fac8 	bl	80083ac <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2208      	movs	r2, #8
 8001e22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f003 fcfd 	bl	8005828 <USB_ReadInterrupts>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f003 0310 	and.w	r3, r3, #16
 8001e34:	2b10      	cmp	r3, #16
 8001e36:	d101      	bne.n	8001e3c <HAL_HCD_IRQHandler+0x158>
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <HAL_HCD_IRQHandler+0x15a>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d012      	beq.n	8001e68 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	699a      	ldr	r2, [r3, #24]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0210 	bic.w	r2, r2, #16
 8001e50:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f001 f906 	bl	8003064 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	699a      	ldr	r2, [r3, #24]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0210 	orr.w	r2, r2, #16
 8001e66:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f003 fcdb 	bl	8005828 <USB_ReadInterrupts>
 8001e72:	4603      	mov	r3, r0
 8001e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e7c:	d13a      	bne.n	8001ef4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f004 f8ee 	bl	8006064 <USB_HC_ReadInterrupt>
 8001e88:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	e025      	b.n	8001edc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d018      	beq.n	8001ed6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	015a      	lsls	r2, r3, #5
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4413      	add	r3, r2
 8001eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001eba:	d106      	bne.n	8001eca <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f8ab 	bl	800201e <HCD_HC_IN_IRQHandler>
 8001ec8:	e005      	b.n	8001ed6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	4619      	mov	r1, r3
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 fcc6 	bl	8002862 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d3d4      	bcc.n	8001e90 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eee:	615a      	str	r2, [r3, #20]
 8001ef0:	e000      	b.n	8001ef4 <HAL_HCD_IRQHandler+0x210>
      return;
 8001ef2:	bf00      	nop
    }
  }
}
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_HCD_Start+0x16>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e013      	b.n	8001f38 <HAL_HCD_Start+0x3e>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f003 fdee 	bl	8005b00 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f003 fb34 	bl	8005596 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d101      	bne.n	8001f56 <HAL_HCD_Stop+0x16>
 8001f52:	2302      	movs	r3, #2
 8001f54:	e00d      	b.n	8001f72 <HAL_HCD_Stop+0x32>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f004 f9e8 	bl	8006338 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f003 fd90 	bl	8005aac <USB_ResetPort>
 8001f8c:	4603      	mov	r3, r0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001fa2:	78fb      	ldrb	r3, [r7, #3]
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	212c      	movs	r1, #44	; 0x2c
 8001fa8:	fb01 f303 	mul.w	r3, r1, r3
 8001fac:	4413      	add	r3, r2
 8001fae:	3360      	adds	r3, #96	; 0x60
 8001fb0:	781b      	ldrb	r3, [r3, #0]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001fca:	78fb      	ldrb	r3, [r7, #3]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	212c      	movs	r1, #44	; 0x2c
 8001fd0:	fb01 f303 	mul.w	r3, r1, r3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3350      	adds	r3, #80	; 0x50
 8001fd8:	681b      	ldr	r3, [r3, #0]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f003 fdd4 	bl	8005ba0 <USB_GetCurrentFrame>
 8001ff8:	4603      	mov	r3, r0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f003 fdaf 	bl	8005b72 <USB_GetHostSpeed>
 8002014:	4603      	mov	r3, r0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b086      	sub	sp, #24
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	460b      	mov	r3, r1
 8002028:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	015a      	lsls	r2, r3, #5
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	4413      	add	r3, r2
 8002040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	2b04      	cmp	r3, #4
 800204c:	d119      	bne.n	8002082 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	015a      	lsls	r2, r3, #5
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	4413      	add	r3, r2
 8002056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205a:	461a      	mov	r2, r3
 800205c:	2304      	movs	r3, #4
 800205e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	015a      	lsls	r2, r3, #5
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4413      	add	r3, r2
 8002068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	0151      	lsls	r1, r2, #5
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	440a      	add	r2, r1
 8002076:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800207a:	f043 0302 	orr.w	r3, r3, #2
 800207e:	60d3      	str	r3, [r2, #12]
 8002080:	e101      	b.n	8002286 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	015a      	lsls	r2, r3, #5
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4413      	add	r3, r2
 800208a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002098:	d12b      	bne.n	80020f2 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	015a      	lsls	r2, r3, #5
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4413      	add	r3, r2
 80020a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a6:	461a      	mov	r2, r3
 80020a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	212c      	movs	r1, #44	; 0x2c
 80020b4:	fb01 f303 	mul.w	r3, r1, r3
 80020b8:	4413      	add	r3, r2
 80020ba:	3361      	adds	r3, #97	; 0x61
 80020bc:	2207      	movs	r2, #7
 80020be:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	015a      	lsls	r2, r3, #5
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	4413      	add	r3, r2
 80020c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	0151      	lsls	r1, r2, #5
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	440a      	add	r2, r1
 80020d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020da:	f043 0302 	orr.w	r3, r3, #2
 80020de:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	4611      	mov	r1, r2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f003 ffcb 	bl	8006086 <USB_HC_Halt>
 80020f0:	e0c9      	b.n	8002286 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	015a      	lsls	r2, r3, #5
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4413      	add	r3, r2
 80020fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 0320 	and.w	r3, r3, #32
 8002104:	2b20      	cmp	r3, #32
 8002106:	d109      	bne.n	800211c <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4413      	add	r3, r2
 8002110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002114:	461a      	mov	r2, r3
 8002116:	2320      	movs	r3, #32
 8002118:	6093      	str	r3, [r2, #8]
 800211a:	e0b4      	b.n	8002286 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	015a      	lsls	r2, r3, #5
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4413      	add	r3, r2
 8002124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b08      	cmp	r3, #8
 8002130:	d133      	bne.n	800219a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	015a      	lsls	r2, r3, #5
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4413      	add	r3, r2
 800213a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	0151      	lsls	r1, r2, #5
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	440a      	add	r2, r1
 8002148:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800214c:	f043 0302 	orr.w	r3, r3, #2
 8002150:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	212c      	movs	r1, #44	; 0x2c
 8002158:	fb01 f303 	mul.w	r3, r1, r3
 800215c:	4413      	add	r3, r2
 800215e:	3361      	adds	r3, #97	; 0x61
 8002160:	2205      	movs	r2, #5
 8002162:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	015a      	lsls	r2, r3, #5
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4413      	add	r3, r2
 800216c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002170:	461a      	mov	r2, r3
 8002172:	2310      	movs	r3, #16
 8002174:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	015a      	lsls	r2, r3, #5
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4413      	add	r3, r2
 800217e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002182:	461a      	mov	r2, r3
 8002184:	2308      	movs	r3, #8
 8002186:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	4611      	mov	r1, r2
 8002192:	4618      	mov	r0, r3
 8002194:	f003 ff77 	bl	8006086 <USB_HC_Halt>
 8002198:	e075      	b.n	8002286 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	015a      	lsls	r2, r3, #5
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4413      	add	r3, r2
 80021a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b0:	d134      	bne.n	800221c <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	015a      	lsls	r2, r3, #5
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	4413      	add	r3, r2
 80021ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	0151      	lsls	r1, r2, #5
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	440a      	add	r2, r1
 80021c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021cc:	f043 0302 	orr.w	r3, r3, #2
 80021d0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	212c      	movs	r1, #44	; 0x2c
 80021d8:	fb01 f303 	mul.w	r3, r1, r3
 80021dc:	4413      	add	r3, r2
 80021de:	3361      	adds	r3, #97	; 0x61
 80021e0:	2208      	movs	r2, #8
 80021e2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	015a      	lsls	r2, r3, #5
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	4413      	add	r3, r2
 80021ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f0:	461a      	mov	r2, r3
 80021f2:	2310      	movs	r3, #16
 80021f4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	015a      	lsls	r2, r3, #5
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002202:	461a      	mov	r2, r3
 8002204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002208:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f003 ff36 	bl	8006086 <USB_HC_Halt>
 800221a:	e034      	b.n	8002286 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	015a      	lsls	r2, r3, #5
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4413      	add	r3, r2
 8002224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222e:	2b80      	cmp	r3, #128	; 0x80
 8002230:	d129      	bne.n	8002286 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	015a      	lsls	r2, r3, #5
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4413      	add	r3, r2
 800223a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	0151      	lsls	r1, r2, #5
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	440a      	add	r2, r1
 8002248:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800224c:	f043 0302 	orr.w	r3, r3, #2
 8002250:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	212c      	movs	r1, #44	; 0x2c
 8002258:	fb01 f303 	mul.w	r3, r1, r3
 800225c:	4413      	add	r3, r2
 800225e:	3361      	adds	r3, #97	; 0x61
 8002260:	2206      	movs	r2, #6
 8002262:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	4611      	mov	r1, r2
 800226e:	4618      	mov	r0, r3
 8002270:	f003 ff09 	bl	8006086 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	015a      	lsls	r2, r3, #5
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4413      	add	r3, r2
 800227c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002280:	461a      	mov	r2, r3
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	015a      	lsls	r2, r3, #5
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4413      	add	r3, r2
 800228e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800229c:	d122      	bne.n	80022e4 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	0151      	lsls	r1, r2, #5
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	440a      	add	r2, r1
 80022b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022b8:	f043 0302 	orr.w	r3, r3, #2
 80022bc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	4611      	mov	r1, r2
 80022c8:	4618      	mov	r0, r3
 80022ca:	f003 fedc 	bl	8006086 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	015a      	lsls	r2, r3, #5
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022da:	461a      	mov	r2, r3
 80022dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022e0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80022e2:	e2ba      	b.n	800285a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	f040 811b 	bne.w	8002532 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d019      	beq.n	8002338 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	212c      	movs	r1, #44	; 0x2c
 800230a:	fb01 f303 	mul.w	r3, r1, r3
 800230e:	4413      	add	r3, r2
 8002310:	3348      	adds	r3, #72	; 0x48
 8002312:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	0159      	lsls	r1, r3, #5
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	440b      	add	r3, r1
 800231c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002326:	1ad2      	subs	r2, r2, r3
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	202c      	movs	r0, #44	; 0x2c
 800232e:	fb00 f303 	mul.w	r3, r0, r3
 8002332:	440b      	add	r3, r1
 8002334:	3350      	adds	r3, #80	; 0x50
 8002336:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	212c      	movs	r1, #44	; 0x2c
 800233e:	fb01 f303 	mul.w	r3, r1, r3
 8002342:	4413      	add	r3, r2
 8002344:	3361      	adds	r3, #97	; 0x61
 8002346:	2201      	movs	r2, #1
 8002348:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	212c      	movs	r1, #44	; 0x2c
 8002350:	fb01 f303 	mul.w	r3, r1, r3
 8002354:	4413      	add	r3, r2
 8002356:	335c      	adds	r3, #92	; 0x5c
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	015a      	lsls	r2, r3, #5
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4413      	add	r3, r2
 8002364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002368:	461a      	mov	r2, r3
 800236a:	2301      	movs	r3, #1
 800236c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	212c      	movs	r1, #44	; 0x2c
 8002374:	fb01 f303 	mul.w	r3, r1, r3
 8002378:	4413      	add	r3, r2
 800237a:	333f      	adds	r3, #63	; 0x3f
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d009      	beq.n	8002396 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	212c      	movs	r1, #44	; 0x2c
 8002388:	fb01 f303 	mul.w	r3, r1, r3
 800238c:	4413      	add	r3, r2
 800238e:	333f      	adds	r3, #63	; 0x3f
 8002390:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002392:	2b02      	cmp	r3, #2
 8002394:	d121      	bne.n	80023da <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	015a      	lsls	r2, r3, #5
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4413      	add	r3, r2
 800239e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	0151      	lsls	r1, r2, #5
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	440a      	add	r2, r1
 80023ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023b0:	f043 0302 	orr.w	r3, r3, #2
 80023b4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	4611      	mov	r1, r2
 80023c0:	4618      	mov	r0, r3
 80023c2:	f003 fe60 	bl	8006086 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	015a      	lsls	r2, r3, #5
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	4413      	add	r3, r2
 80023ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d2:	461a      	mov	r2, r3
 80023d4:	2310      	movs	r3, #16
 80023d6:	6093      	str	r3, [r2, #8]
 80023d8:	e066      	b.n	80024a8 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	212c      	movs	r1, #44	; 0x2c
 80023e0:	fb01 f303 	mul.w	r3, r1, r3
 80023e4:	4413      	add	r3, r2
 80023e6:	333f      	adds	r3, #63	; 0x3f
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	2b03      	cmp	r3, #3
 80023ec:	d127      	bne.n	800243e <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	015a      	lsls	r2, r3, #5
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4413      	add	r3, r2
 80023f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	0151      	lsls	r1, r2, #5
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	440a      	add	r2, r1
 8002404:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002408:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800240c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	212c      	movs	r1, #44	; 0x2c
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	4413      	add	r3, r2
 800241a:	3360      	adds	r3, #96	; 0x60
 800241c:	2201      	movs	r2, #1
 800241e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	b2d9      	uxtb	r1, r3
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	202c      	movs	r0, #44	; 0x2c
 800242a:	fb00 f303 	mul.w	r3, r0, r3
 800242e:	4413      	add	r3, r2
 8002430:	3360      	adds	r3, #96	; 0x60
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	461a      	mov	r2, r3
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f005 ffe2 	bl	8008400 <HAL_HCD_HC_NotifyURBChange_Callback>
 800243c:	e034      	b.n	80024a8 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	212c      	movs	r1, #44	; 0x2c
 8002444:	fb01 f303 	mul.w	r3, r1, r3
 8002448:	4413      	add	r3, r2
 800244a:	333f      	adds	r3, #63	; 0x3f
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d12a      	bne.n	80024a8 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	212c      	movs	r1, #44	; 0x2c
 8002458:	fb01 f303 	mul.w	r3, r1, r3
 800245c:	4413      	add	r3, r2
 800245e:	3360      	adds	r3, #96	; 0x60
 8002460:	2201      	movs	r2, #1
 8002462:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	212c      	movs	r1, #44	; 0x2c
 800246a:	fb01 f303 	mul.w	r3, r1, r3
 800246e:	4413      	add	r3, r2
 8002470:	3354      	adds	r3, #84	; 0x54
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	f083 0301 	eor.w	r3, r3, #1
 8002478:	b2d8      	uxtb	r0, r3
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	212c      	movs	r1, #44	; 0x2c
 8002480:	fb01 f303 	mul.w	r3, r1, r3
 8002484:	4413      	add	r3, r2
 8002486:	3354      	adds	r3, #84	; 0x54
 8002488:	4602      	mov	r2, r0
 800248a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	b2d9      	uxtb	r1, r3
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	202c      	movs	r0, #44	; 0x2c
 8002496:	fb00 f303 	mul.w	r3, r0, r3
 800249a:	4413      	add	r3, r2
 800249c:	3360      	adds	r3, #96	; 0x60
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	461a      	mov	r2, r3
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f005 ffac 	bl	8008400 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d12b      	bne.n	8002508 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	212c      	movs	r1, #44	; 0x2c
 80024b6:	fb01 f303 	mul.w	r3, r1, r3
 80024ba:	4413      	add	r3, r2
 80024bc:	3348      	adds	r3, #72	; 0x48
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	202c      	movs	r0, #44	; 0x2c
 80024c6:	fb00 f202 	mul.w	r2, r0, r2
 80024ca:	440a      	add	r2, r1
 80024cc:	3240      	adds	r2, #64	; 0x40
 80024ce:	8812      	ldrh	r2, [r2, #0]
 80024d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 81be 	beq.w	800285a <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	212c      	movs	r1, #44	; 0x2c
 80024e4:	fb01 f303 	mul.w	r3, r1, r3
 80024e8:	4413      	add	r3, r2
 80024ea:	3354      	adds	r3, #84	; 0x54
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	f083 0301 	eor.w	r3, r3, #1
 80024f2:	b2d8      	uxtb	r0, r3
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	212c      	movs	r1, #44	; 0x2c
 80024fa:	fb01 f303 	mul.w	r3, r1, r3
 80024fe:	4413      	add	r3, r2
 8002500:	3354      	adds	r3, #84	; 0x54
 8002502:	4602      	mov	r2, r0
 8002504:	701a      	strb	r2, [r3, #0]
}
 8002506:	e1a8      	b.n	800285a <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	212c      	movs	r1, #44	; 0x2c
 800250e:	fb01 f303 	mul.w	r3, r1, r3
 8002512:	4413      	add	r3, r2
 8002514:	3354      	adds	r3, #84	; 0x54
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	f083 0301 	eor.w	r3, r3, #1
 800251c:	b2d8      	uxtb	r0, r3
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	212c      	movs	r1, #44	; 0x2c
 8002524:	fb01 f303 	mul.w	r3, r1, r3
 8002528:	4413      	add	r3, r2
 800252a:	3354      	adds	r3, #84	; 0x54
 800252c:	4602      	mov	r2, r0
 800252e:	701a      	strb	r2, [r3, #0]
}
 8002530:	e193      	b.n	800285a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	015a      	lsls	r2, r3, #5
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4413      	add	r3, r2
 800253a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b02      	cmp	r3, #2
 8002546:	f040 8106 	bne.w	8002756 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	015a      	lsls	r2, r3, #5
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4413      	add	r3, r2
 8002552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	0151      	lsls	r1, r2, #5
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	440a      	add	r2, r1
 8002560:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002564:	f023 0302 	bic.w	r3, r3, #2
 8002568:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	212c      	movs	r1, #44	; 0x2c
 8002570:	fb01 f303 	mul.w	r3, r1, r3
 8002574:	4413      	add	r3, r2
 8002576:	3361      	adds	r3, #97	; 0x61
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d109      	bne.n	8002592 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	212c      	movs	r1, #44	; 0x2c
 8002584:	fb01 f303 	mul.w	r3, r1, r3
 8002588:	4413      	add	r3, r2
 800258a:	3360      	adds	r3, #96	; 0x60
 800258c:	2201      	movs	r2, #1
 800258e:	701a      	strb	r2, [r3, #0]
 8002590:	e0c9      	b.n	8002726 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	212c      	movs	r1, #44	; 0x2c
 8002598:	fb01 f303 	mul.w	r3, r1, r3
 800259c:	4413      	add	r3, r2
 800259e:	3361      	adds	r3, #97	; 0x61
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b05      	cmp	r3, #5
 80025a4:	d109      	bne.n	80025ba <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	212c      	movs	r1, #44	; 0x2c
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	4413      	add	r3, r2
 80025b2:	3360      	adds	r3, #96	; 0x60
 80025b4:	2205      	movs	r2, #5
 80025b6:	701a      	strb	r2, [r3, #0]
 80025b8:	e0b5      	b.n	8002726 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	212c      	movs	r1, #44	; 0x2c
 80025c0:	fb01 f303 	mul.w	r3, r1, r3
 80025c4:	4413      	add	r3, r2
 80025c6:	3361      	adds	r3, #97	; 0x61
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b06      	cmp	r3, #6
 80025cc:	d009      	beq.n	80025e2 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	212c      	movs	r1, #44	; 0x2c
 80025d4:	fb01 f303 	mul.w	r3, r1, r3
 80025d8:	4413      	add	r3, r2
 80025da:	3361      	adds	r3, #97	; 0x61
 80025dc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d150      	bne.n	8002684 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	212c      	movs	r1, #44	; 0x2c
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	335c      	adds	r3, #92	; 0x5c
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	202c      	movs	r0, #44	; 0x2c
 80025fa:	fb00 f303 	mul.w	r3, r0, r3
 80025fe:	440b      	add	r3, r1
 8002600:	335c      	adds	r3, #92	; 0x5c
 8002602:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	212c      	movs	r1, #44	; 0x2c
 800260a:	fb01 f303 	mul.w	r3, r1, r3
 800260e:	4413      	add	r3, r2
 8002610:	335c      	adds	r3, #92	; 0x5c
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2b02      	cmp	r3, #2
 8002616:	d912      	bls.n	800263e <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	212c      	movs	r1, #44	; 0x2c
 800261e:	fb01 f303 	mul.w	r3, r1, r3
 8002622:	4413      	add	r3, r2
 8002624:	335c      	adds	r3, #92	; 0x5c
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	212c      	movs	r1, #44	; 0x2c
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	4413      	add	r3, r2
 8002636:	3360      	adds	r3, #96	; 0x60
 8002638:	2204      	movs	r2, #4
 800263a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800263c:	e073      	b.n	8002726 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	212c      	movs	r1, #44	; 0x2c
 8002644:	fb01 f303 	mul.w	r3, r1, r3
 8002648:	4413      	add	r3, r2
 800264a:	3360      	adds	r3, #96	; 0x60
 800264c:	2202      	movs	r2, #2
 800264e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4413      	add	r3, r2
 8002658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002666:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800266e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4413      	add	r3, r2
 8002678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267c:	461a      	mov	r2, r3
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002682:	e050      	b.n	8002726 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	212c      	movs	r1, #44	; 0x2c
 800268a:	fb01 f303 	mul.w	r3, r1, r3
 800268e:	4413      	add	r3, r2
 8002690:	3361      	adds	r3, #97	; 0x61
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b03      	cmp	r3, #3
 8002696:	d122      	bne.n	80026de <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	212c      	movs	r1, #44	; 0x2c
 800269e:	fb01 f303 	mul.w	r3, r1, r3
 80026a2:	4413      	add	r3, r2
 80026a4:	3360      	adds	r3, #96	; 0x60
 80026a6:	2202      	movs	r2, #2
 80026a8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	015a      	lsls	r2, r3, #5
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	4413      	add	r3, r2
 80026b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026c0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026c8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	015a      	lsls	r2, r3, #5
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4413      	add	r3, r2
 80026d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d6:	461a      	mov	r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	e023      	b.n	8002726 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	212c      	movs	r1, #44	; 0x2c
 80026e4:	fb01 f303 	mul.w	r3, r1, r3
 80026e8:	4413      	add	r3, r2
 80026ea:	3361      	adds	r3, #97	; 0x61
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b07      	cmp	r3, #7
 80026f0:	d119      	bne.n	8002726 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	212c      	movs	r1, #44	; 0x2c
 80026f8:	fb01 f303 	mul.w	r3, r1, r3
 80026fc:	4413      	add	r3, r2
 80026fe:	335c      	adds	r3, #92	; 0x5c
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	202c      	movs	r0, #44	; 0x2c
 800270a:	fb00 f303 	mul.w	r3, r0, r3
 800270e:	440b      	add	r3, r1
 8002710:	335c      	adds	r3, #92	; 0x5c
 8002712:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	212c      	movs	r1, #44	; 0x2c
 800271a:	fb01 f303 	mul.w	r3, r1, r3
 800271e:	4413      	add	r3, r2
 8002720:	3360      	adds	r3, #96	; 0x60
 8002722:	2204      	movs	r2, #4
 8002724:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	015a      	lsls	r2, r3, #5
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	4413      	add	r3, r2
 800272e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002732:	461a      	mov	r2, r3
 8002734:	2302      	movs	r3, #2
 8002736:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	b2d9      	uxtb	r1, r3
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	202c      	movs	r0, #44	; 0x2c
 8002742:	fb00 f303 	mul.w	r3, r0, r3
 8002746:	4413      	add	r3, r2
 8002748:	3360      	adds	r3, #96	; 0x60
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f005 fe56 	bl	8008400 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002754:	e081      	b.n	800285a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	015a      	lsls	r2, r3, #5
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4413      	add	r3, r2
 800275e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 0310 	and.w	r3, r3, #16
 8002768:	2b10      	cmp	r3, #16
 800276a:	d176      	bne.n	800285a <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	212c      	movs	r1, #44	; 0x2c
 8002772:	fb01 f303 	mul.w	r3, r1, r3
 8002776:	4413      	add	r3, r2
 8002778:	333f      	adds	r3, #63	; 0x3f
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b03      	cmp	r3, #3
 800277e:	d121      	bne.n	80027c4 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	212c      	movs	r1, #44	; 0x2c
 8002786:	fb01 f303 	mul.w	r3, r1, r3
 800278a:	4413      	add	r3, r2
 800278c:	335c      	adds	r3, #92	; 0x5c
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	015a      	lsls	r2, r3, #5
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	4413      	add	r3, r2
 800279a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	0151      	lsls	r1, r2, #5
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	440a      	add	r2, r1
 80027a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027ac:	f043 0302 	orr.w	r3, r3, #2
 80027b0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	4611      	mov	r1, r2
 80027bc:	4618      	mov	r0, r3
 80027be:	f003 fc62 	bl	8006086 <USB_HC_Halt>
 80027c2:	e041      	b.n	8002848 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	212c      	movs	r1, #44	; 0x2c
 80027ca:	fb01 f303 	mul.w	r3, r1, r3
 80027ce:	4413      	add	r3, r2
 80027d0:	333f      	adds	r3, #63	; 0x3f
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d009      	beq.n	80027ec <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	212c      	movs	r1, #44	; 0x2c
 80027de:	fb01 f303 	mul.w	r3, r1, r3
 80027e2:	4413      	add	r3, r2
 80027e4:	333f      	adds	r3, #63	; 0x3f
 80027e6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d12d      	bne.n	8002848 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	212c      	movs	r1, #44	; 0x2c
 80027f2:	fb01 f303 	mul.w	r3, r1, r3
 80027f6:	4413      	add	r3, r2
 80027f8:	335c      	adds	r3, #92	; 0x5c
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d120      	bne.n	8002848 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	212c      	movs	r1, #44	; 0x2c
 800280c:	fb01 f303 	mul.w	r3, r1, r3
 8002810:	4413      	add	r3, r2
 8002812:	3361      	adds	r3, #97	; 0x61
 8002814:	2203      	movs	r2, #3
 8002816:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4413      	add	r3, r2
 8002820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	0151      	lsls	r1, r2, #5
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	440a      	add	r2, r1
 800282e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002832:	f043 0302 	orr.w	r3, r3, #2
 8002836:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	4611      	mov	r1, r2
 8002842:	4618      	mov	r0, r3
 8002844:	f003 fc1f 	bl	8006086 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	4413      	add	r3, r2
 8002850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002854:	461a      	mov	r2, r3
 8002856:	2310      	movs	r3, #16
 8002858:	6093      	str	r3, [r2, #8]
}
 800285a:	bf00      	nop
 800285c:	3718      	adds	r7, #24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b088      	sub	sp, #32
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
 800286a:	460b      	mov	r3, r1
 800286c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002878:	78fb      	ldrb	r3, [r7, #3]
 800287a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	4413      	add	r3, r2
 8002884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	2b04      	cmp	r3, #4
 8002890:	d119      	bne.n	80028c6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	015a      	lsls	r2, r3, #5
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	4413      	add	r3, r2
 800289a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289e:	461a      	mov	r2, r3
 80028a0:	2304      	movs	r3, #4
 80028a2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	0151      	lsls	r1, r2, #5
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	440a      	add	r2, r1
 80028ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028be:	f043 0302 	orr.w	r3, r3, #2
 80028c2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80028c4:	e3ca      	b.n	800305c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	015a      	lsls	r2, r3, #5
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 0320 	and.w	r3, r3, #32
 80028d8:	2b20      	cmp	r3, #32
 80028da:	d13e      	bne.n	800295a <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e8:	461a      	mov	r2, r3
 80028ea:	2320      	movs	r3, #32
 80028ec:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	212c      	movs	r1, #44	; 0x2c
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	333d      	adds	r3, #61	; 0x3d
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	f040 83ac 	bne.w	800305c <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	212c      	movs	r1, #44	; 0x2c
 800290a:	fb01 f303 	mul.w	r3, r1, r3
 800290e:	4413      	add	r3, r2
 8002910:	333d      	adds	r3, #61	; 0x3d
 8002912:	2200      	movs	r2, #0
 8002914:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	212c      	movs	r1, #44	; 0x2c
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	4413      	add	r3, r2
 8002922:	3360      	adds	r3, #96	; 0x60
 8002924:	2202      	movs	r2, #2
 8002926:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	015a      	lsls	r2, r3, #5
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	4413      	add	r3, r2
 8002930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	0151      	lsls	r1, r2, #5
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	440a      	add	r2, r1
 800293e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002942:	f043 0302 	orr.w	r3, r3, #2
 8002946:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	4611      	mov	r1, r2
 8002952:	4618      	mov	r0, r3
 8002954:	f003 fb97 	bl	8006086 <USB_HC_Halt>
}
 8002958:	e380      	b.n	800305c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	015a      	lsls	r2, r3, #5
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	4413      	add	r3, r2
 8002962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800296c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002970:	d122      	bne.n	80029b8 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	015a      	lsls	r2, r3, #5
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	4413      	add	r3, r2
 800297a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	0151      	lsls	r1, r2, #5
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	440a      	add	r2, r1
 8002988:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800298c:	f043 0302 	orr.w	r3, r3, #2
 8002990:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	4611      	mov	r1, r2
 800299c:	4618      	mov	r0, r3
 800299e:	f003 fb72 	bl	8006086 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	015a      	lsls	r2, r3, #5
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	4413      	add	r3, r2
 80029aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ae:	461a      	mov	r2, r3
 80029b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029b4:	6093      	str	r3, [r2, #8]
}
 80029b6:	e351      	b.n	800305c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	015a      	lsls	r2, r3, #5
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	4413      	add	r3, r2
 80029c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d150      	bne.n	8002a70 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	212c      	movs	r1, #44	; 0x2c
 80029d4:	fb01 f303 	mul.w	r3, r1, r3
 80029d8:	4413      	add	r3, r2
 80029da:	335c      	adds	r3, #92	; 0x5c
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	015a      	lsls	r2, r3, #5
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	4413      	add	r3, r2
 80029e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f2:	2b40      	cmp	r3, #64	; 0x40
 80029f4:	d111      	bne.n	8002a1a <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	212c      	movs	r1, #44	; 0x2c
 80029fc:	fb01 f303 	mul.w	r3, r1, r3
 8002a00:	4413      	add	r3, r2
 8002a02:	333d      	adds	r3, #61	; 0x3d
 8002a04:	2201      	movs	r2, #1
 8002a06:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	015a      	lsls	r2, r3, #5
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a14:	461a      	mov	r2, r3
 8002a16:	2340      	movs	r3, #64	; 0x40
 8002a18:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	0151      	lsls	r1, r2, #5
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	440a      	add	r2, r1
 8002a30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a34:	f043 0302 	orr.w	r3, r3, #2
 8002a38:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	4611      	mov	r1, r2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f003 fb1e 	bl	8006086 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	015a      	lsls	r2, r3, #5
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	4413      	add	r3, r2
 8002a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a56:	461a      	mov	r2, r3
 8002a58:	2301      	movs	r3, #1
 8002a5a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	212c      	movs	r1, #44	; 0x2c
 8002a62:	fb01 f303 	mul.w	r3, r1, r3
 8002a66:	4413      	add	r3, r2
 8002a68:	3361      	adds	r3, #97	; 0x61
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	701a      	strb	r2, [r3, #0]
}
 8002a6e:	e2f5      	b.n	800305c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a82:	2b40      	cmp	r3, #64	; 0x40
 8002a84:	d13c      	bne.n	8002b00 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	212c      	movs	r1, #44	; 0x2c
 8002a8c:	fb01 f303 	mul.w	r3, r1, r3
 8002a90:	4413      	add	r3, r2
 8002a92:	3361      	adds	r3, #97	; 0x61
 8002a94:	2204      	movs	r2, #4
 8002a96:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	212c      	movs	r1, #44	; 0x2c
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	333d      	adds	r3, #61	; 0x3d
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	212c      	movs	r1, #44	; 0x2c
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	335c      	adds	r3, #92	; 0x5c
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	015a      	lsls	r2, r3, #5
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	0151      	lsls	r1, r2, #5
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	440a      	add	r2, r1
 8002ad2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ad6:	f043 0302 	orr.w	r3, r3, #2
 8002ada:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	4611      	mov	r1, r2
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f003 facd 	bl	8006086 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af8:	461a      	mov	r2, r3
 8002afa:	2340      	movs	r3, #64	; 0x40
 8002afc:	6093      	str	r3, [r2, #8]
}
 8002afe:	e2ad      	b.n	800305c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	015a      	lsls	r2, r3, #5
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d12a      	bne.n	8002b6c <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	015a      	lsls	r2, r3, #5
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b22:	461a      	mov	r2, r3
 8002b24:	2308      	movs	r3, #8
 8002b26:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	015a      	lsls	r2, r3, #5
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	0151      	lsls	r1, r2, #5
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	440a      	add	r2, r1
 8002b3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b42:	f043 0302 	orr.w	r3, r3, #2
 8002b46:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	4611      	mov	r1, r2
 8002b52:	4618      	mov	r0, r3
 8002b54:	f003 fa97 	bl	8006086 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	212c      	movs	r1, #44	; 0x2c
 8002b5e:	fb01 f303 	mul.w	r3, r1, r3
 8002b62:	4413      	add	r3, r2
 8002b64:	3361      	adds	r3, #97	; 0x61
 8002b66:	2205      	movs	r2, #5
 8002b68:	701a      	strb	r2, [r3, #0]
}
 8002b6a:	e277      	b.n	800305c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	015a      	lsls	r2, r3, #5
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	4413      	add	r3, r2
 8002b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 0310 	and.w	r3, r3, #16
 8002b7e:	2b10      	cmp	r3, #16
 8002b80:	d150      	bne.n	8002c24 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	212c      	movs	r1, #44	; 0x2c
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	335c      	adds	r3, #92	; 0x5c
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	212c      	movs	r1, #44	; 0x2c
 8002b9a:	fb01 f303 	mul.w	r3, r1, r3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	3361      	adds	r3, #97	; 0x61
 8002ba2:	2203      	movs	r2, #3
 8002ba4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	212c      	movs	r1, #44	; 0x2c
 8002bac:	fb01 f303 	mul.w	r3, r1, r3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	333d      	adds	r3, #61	; 0x3d
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d112      	bne.n	8002be0 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	212c      	movs	r1, #44	; 0x2c
 8002bc0:	fb01 f303 	mul.w	r3, r1, r3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	333c      	adds	r3, #60	; 0x3c
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d108      	bne.n	8002be0 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	212c      	movs	r1, #44	; 0x2c
 8002bd4:	fb01 f303 	mul.w	r3, r1, r3
 8002bd8:	4413      	add	r3, r2
 8002bda:	333d      	adds	r3, #61	; 0x3d
 8002bdc:	2201      	movs	r2, #1
 8002bde:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	015a      	lsls	r2, r3, #5
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	4413      	add	r3, r2
 8002be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	0151      	lsls	r1, r2, #5
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	440a      	add	r2, r1
 8002bf6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bfa:	f043 0302 	orr.w	r3, r3, #2
 8002bfe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	4611      	mov	r1, r2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f003 fa3b 	bl	8006086 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	015a      	lsls	r2, r3, #5
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	2310      	movs	r3, #16
 8002c20:	6093      	str	r3, [r2, #8]
}
 8002c22:	e21b      	b.n	800305c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	015a      	lsls	r2, r3, #5
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c36:	2b80      	cmp	r3, #128	; 0x80
 8002c38:	d174      	bne.n	8002d24 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d121      	bne.n	8002c86 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	212c      	movs	r1, #44	; 0x2c
 8002c48:	fb01 f303 	mul.w	r3, r1, r3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	3361      	adds	r3, #97	; 0x61
 8002c50:	2206      	movs	r2, #6
 8002c52:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	015a      	lsls	r2, r3, #5
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	0151      	lsls	r1, r2, #5
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	440a      	add	r2, r1
 8002c6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c6e:	f043 0302 	orr.w	r3, r3, #2
 8002c72:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	4611      	mov	r1, r2
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f003 fa01 	bl	8006086 <USB_HC_Halt>
 8002c84:	e044      	b.n	8002d10 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	212c      	movs	r1, #44	; 0x2c
 8002c8c:	fb01 f303 	mul.w	r3, r1, r3
 8002c90:	4413      	add	r3, r2
 8002c92:	335c      	adds	r3, #92	; 0x5c
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	202c      	movs	r0, #44	; 0x2c
 8002c9e:	fb00 f303 	mul.w	r3, r0, r3
 8002ca2:	440b      	add	r3, r1
 8002ca4:	335c      	adds	r3, #92	; 0x5c
 8002ca6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	212c      	movs	r1, #44	; 0x2c
 8002cae:	fb01 f303 	mul.w	r3, r1, r3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	335c      	adds	r3, #92	; 0x5c
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d920      	bls.n	8002cfe <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	212c      	movs	r1, #44	; 0x2c
 8002cc2:	fb01 f303 	mul.w	r3, r1, r3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	335c      	adds	r3, #92	; 0x5c
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	212c      	movs	r1, #44	; 0x2c
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	4413      	add	r3, r2
 8002cda:	3360      	adds	r3, #96	; 0x60
 8002cdc:	2204      	movs	r2, #4
 8002cde:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	b2d9      	uxtb	r1, r3
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	202c      	movs	r0, #44	; 0x2c
 8002cea:	fb00 f303 	mul.w	r3, r0, r3
 8002cee:	4413      	add	r3, r2
 8002cf0:	3360      	adds	r3, #96	; 0x60
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f005 fb82 	bl	8008400 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002cfc:	e008      	b.n	8002d10 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	212c      	movs	r1, #44	; 0x2c
 8002d04:	fb01 f303 	mul.w	r3, r1, r3
 8002d08:	4413      	add	r3, r2
 8002d0a:	3360      	adds	r3, #96	; 0x60
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	015a      	lsls	r2, r3, #5
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	4413      	add	r3, r2
 8002d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	2380      	movs	r3, #128	; 0x80
 8002d20:	6093      	str	r3, [r2, #8]
}
 8002d22:	e19b      	b.n	800305c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d3a:	d134      	bne.n	8002da6 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	015a      	lsls	r2, r3, #5
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	0151      	lsls	r1, r2, #5
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	440a      	add	r2, r1
 8002d52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d56:	f043 0302 	orr.w	r3, r3, #2
 8002d5a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	b2d2      	uxtb	r2, r2
 8002d64:	4611      	mov	r1, r2
 8002d66:	4618      	mov	r0, r3
 8002d68:	f003 f98d 	bl	8006086 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d78:	461a      	mov	r2, r3
 8002d7a:	2310      	movs	r3, #16
 8002d7c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d90:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	212c      	movs	r1, #44	; 0x2c
 8002d98:	fb01 f303 	mul.w	r3, r1, r3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	3361      	adds	r3, #97	; 0x61
 8002da0:	2208      	movs	r2, #8
 8002da2:	701a      	strb	r2, [r3, #0]
}
 8002da4:	e15a      	b.n	800305c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	f040 814f 	bne.w	800305c <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	015a      	lsls	r2, r3, #5
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	0151      	lsls	r1, r2, #5
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	440a      	add	r2, r1
 8002dd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dd8:	f023 0302 	bic.w	r3, r3, #2
 8002ddc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	212c      	movs	r1, #44	; 0x2c
 8002de4:	fb01 f303 	mul.w	r3, r1, r3
 8002de8:	4413      	add	r3, r2
 8002dea:	3361      	adds	r3, #97	; 0x61
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d17d      	bne.n	8002eee <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	212c      	movs	r1, #44	; 0x2c
 8002df8:	fb01 f303 	mul.w	r3, r1, r3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3360      	adds	r3, #96	; 0x60
 8002e00:	2201      	movs	r2, #1
 8002e02:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	212c      	movs	r1, #44	; 0x2c
 8002e0a:	fb01 f303 	mul.w	r3, r1, r3
 8002e0e:	4413      	add	r3, r2
 8002e10:	333f      	adds	r3, #63	; 0x3f
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d00a      	beq.n	8002e2e <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	212c      	movs	r1, #44	; 0x2c
 8002e1e:	fb01 f303 	mul.w	r3, r1, r3
 8002e22:	4413      	add	r3, r2
 8002e24:	333f      	adds	r3, #63	; 0x3f
 8002e26:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002e28:	2b03      	cmp	r3, #3
 8002e2a:	f040 8100 	bne.w	800302e <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d113      	bne.n	8002e5e <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	212c      	movs	r1, #44	; 0x2c
 8002e3c:	fb01 f303 	mul.w	r3, r1, r3
 8002e40:	4413      	add	r3, r2
 8002e42:	3355      	adds	r3, #85	; 0x55
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	f083 0301 	eor.w	r3, r3, #1
 8002e4a:	b2d8      	uxtb	r0, r3
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	212c      	movs	r1, #44	; 0x2c
 8002e52:	fb01 f303 	mul.w	r3, r1, r3
 8002e56:	4413      	add	r3, r2
 8002e58:	3355      	adds	r3, #85	; 0x55
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	f040 80e3 	bne.w	800302e <HCD_HC_OUT_IRQHandler+0x7cc>
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	212c      	movs	r1, #44	; 0x2c
 8002e6e:	fb01 f303 	mul.w	r3, r1, r3
 8002e72:	4413      	add	r3, r2
 8002e74:	334c      	adds	r3, #76	; 0x4c
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 80d8 	beq.w	800302e <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	212c      	movs	r1, #44	; 0x2c
 8002e84:	fb01 f303 	mul.w	r3, r1, r3
 8002e88:	4413      	add	r3, r2
 8002e8a:	334c      	adds	r3, #76	; 0x4c
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	202c      	movs	r0, #44	; 0x2c
 8002e94:	fb00 f202 	mul.w	r2, r0, r2
 8002e98:	440a      	add	r2, r1
 8002e9a:	3240      	adds	r2, #64	; 0x40
 8002e9c:	8812      	ldrh	r2, [r2, #0]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	202c      	movs	r0, #44	; 0x2c
 8002ea8:	fb00 f202 	mul.w	r2, r0, r2
 8002eac:	440a      	add	r2, r1
 8002eae:	3240      	adds	r2, #64	; 0x40
 8002eb0:	8812      	ldrh	r2, [r2, #0]
 8002eb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 80b5 	beq.w	800302e <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	212c      	movs	r1, #44	; 0x2c
 8002eca:	fb01 f303 	mul.w	r3, r1, r3
 8002ece:	4413      	add	r3, r2
 8002ed0:	3355      	adds	r3, #85	; 0x55
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	f083 0301 	eor.w	r3, r3, #1
 8002ed8:	b2d8      	uxtb	r0, r3
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	212c      	movs	r1, #44	; 0x2c
 8002ee0:	fb01 f303 	mul.w	r3, r1, r3
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3355      	adds	r3, #85	; 0x55
 8002ee8:	4602      	mov	r2, r0
 8002eea:	701a      	strb	r2, [r3, #0]
 8002eec:	e09f      	b.n	800302e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	212c      	movs	r1, #44	; 0x2c
 8002ef4:	fb01 f303 	mul.w	r3, r1, r3
 8002ef8:	4413      	add	r3, r2
 8002efa:	3361      	adds	r3, #97	; 0x61
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b03      	cmp	r3, #3
 8002f00:	d109      	bne.n	8002f16 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	212c      	movs	r1, #44	; 0x2c
 8002f08:	fb01 f303 	mul.w	r3, r1, r3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3360      	adds	r3, #96	; 0x60
 8002f10:	2202      	movs	r2, #2
 8002f12:	701a      	strb	r2, [r3, #0]
 8002f14:	e08b      	b.n	800302e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	212c      	movs	r1, #44	; 0x2c
 8002f1c:	fb01 f303 	mul.w	r3, r1, r3
 8002f20:	4413      	add	r3, r2
 8002f22:	3361      	adds	r3, #97	; 0x61
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d109      	bne.n	8002f3e <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	212c      	movs	r1, #44	; 0x2c
 8002f30:	fb01 f303 	mul.w	r3, r1, r3
 8002f34:	4413      	add	r3, r2
 8002f36:	3360      	adds	r3, #96	; 0x60
 8002f38:	2202      	movs	r2, #2
 8002f3a:	701a      	strb	r2, [r3, #0]
 8002f3c:	e077      	b.n	800302e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	212c      	movs	r1, #44	; 0x2c
 8002f44:	fb01 f303 	mul.w	r3, r1, r3
 8002f48:	4413      	add	r3, r2
 8002f4a:	3361      	adds	r3, #97	; 0x61
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b05      	cmp	r3, #5
 8002f50:	d109      	bne.n	8002f66 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	212c      	movs	r1, #44	; 0x2c
 8002f58:	fb01 f303 	mul.w	r3, r1, r3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	3360      	adds	r3, #96	; 0x60
 8002f60:	2205      	movs	r2, #5
 8002f62:	701a      	strb	r2, [r3, #0]
 8002f64:	e063      	b.n	800302e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	212c      	movs	r1, #44	; 0x2c
 8002f6c:	fb01 f303 	mul.w	r3, r1, r3
 8002f70:	4413      	add	r3, r2
 8002f72:	3361      	adds	r3, #97	; 0x61
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b06      	cmp	r3, #6
 8002f78:	d009      	beq.n	8002f8e <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	212c      	movs	r1, #44	; 0x2c
 8002f80:	fb01 f303 	mul.w	r3, r1, r3
 8002f84:	4413      	add	r3, r2
 8002f86:	3361      	adds	r3, #97	; 0x61
 8002f88:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f8a:	2b08      	cmp	r3, #8
 8002f8c:	d14f      	bne.n	800302e <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	212c      	movs	r1, #44	; 0x2c
 8002f94:	fb01 f303 	mul.w	r3, r1, r3
 8002f98:	4413      	add	r3, r2
 8002f9a:	335c      	adds	r3, #92	; 0x5c
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	202c      	movs	r0, #44	; 0x2c
 8002fa6:	fb00 f303 	mul.w	r3, r0, r3
 8002faa:	440b      	add	r3, r1
 8002fac:	335c      	adds	r3, #92	; 0x5c
 8002fae:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	212c      	movs	r1, #44	; 0x2c
 8002fb6:	fb01 f303 	mul.w	r3, r1, r3
 8002fba:	4413      	add	r3, r2
 8002fbc:	335c      	adds	r3, #92	; 0x5c
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d912      	bls.n	8002fea <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	212c      	movs	r1, #44	; 0x2c
 8002fca:	fb01 f303 	mul.w	r3, r1, r3
 8002fce:	4413      	add	r3, r2
 8002fd0:	335c      	adds	r3, #92	; 0x5c
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	212c      	movs	r1, #44	; 0x2c
 8002fdc:	fb01 f303 	mul.w	r3, r1, r3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	3360      	adds	r3, #96	; 0x60
 8002fe4:	2204      	movs	r2, #4
 8002fe6:	701a      	strb	r2, [r3, #0]
 8002fe8:	e021      	b.n	800302e <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	212c      	movs	r1, #44	; 0x2c
 8002ff0:	fb01 f303 	mul.w	r3, r1, r3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3360      	adds	r3, #96	; 0x60
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	015a      	lsls	r2, r3, #5
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	4413      	add	r3, r2
 8003004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003012:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800301a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	4413      	add	r3, r2
 8003024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003028:	461a      	mov	r2, r3
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	015a      	lsls	r2, r3, #5
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	4413      	add	r3, r2
 8003036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303a:	461a      	mov	r2, r3
 800303c:	2302      	movs	r3, #2
 800303e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	b2d9      	uxtb	r1, r3
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	202c      	movs	r0, #44	; 0x2c
 800304a:	fb00 f303 	mul.w	r3, r0, r3
 800304e:	4413      	add	r3, r2
 8003050:	3360      	adds	r3, #96	; 0x60
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	461a      	mov	r2, r3
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f005 f9d2 	bl	8008400 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800305c:	bf00      	nop
 800305e:	3720      	adds	r7, #32
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08a      	sub	sp, #40	; 0x28
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	f003 030f 	and.w	r3, r3, #15
 8003084:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	0c5b      	lsrs	r3, r3, #17
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	091b      	lsrs	r3, r3, #4
 8003094:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003098:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2b02      	cmp	r3, #2
 800309e:	d004      	beq.n	80030aa <HCD_RXQLVL_IRQHandler+0x46>
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	2b05      	cmp	r3, #5
 80030a4:	f000 80a9 	beq.w	80031fa <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80030a8:	e0aa      	b.n	8003200 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 80a6 	beq.w	80031fe <HCD_RXQLVL_IRQHandler+0x19a>
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	212c      	movs	r1, #44	; 0x2c
 80030b8:	fb01 f303 	mul.w	r3, r1, r3
 80030bc:	4413      	add	r3, r2
 80030be:	3344      	adds	r3, #68	; 0x44
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 809b 	beq.w	80031fe <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	212c      	movs	r1, #44	; 0x2c
 80030ce:	fb01 f303 	mul.w	r3, r1, r3
 80030d2:	4413      	add	r3, r2
 80030d4:	3350      	adds	r3, #80	; 0x50
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	441a      	add	r2, r3
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	202c      	movs	r0, #44	; 0x2c
 80030e2:	fb00 f303 	mul.w	r3, r0, r3
 80030e6:	440b      	add	r3, r1
 80030e8:	334c      	adds	r3, #76	; 0x4c
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d87a      	bhi.n	80031e6 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6818      	ldr	r0, [r3, #0]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	212c      	movs	r1, #44	; 0x2c
 80030fa:	fb01 f303 	mul.w	r3, r1, r3
 80030fe:	4413      	add	r3, r2
 8003100:	3344      	adds	r3, #68	; 0x44
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	b292      	uxth	r2, r2
 8003108:	4619      	mov	r1, r3
 800310a:	f002 fb35 	bl	8005778 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	212c      	movs	r1, #44	; 0x2c
 8003114:	fb01 f303 	mul.w	r3, r1, r3
 8003118:	4413      	add	r3, r2
 800311a:	3344      	adds	r3, #68	; 0x44
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	441a      	add	r2, r3
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	202c      	movs	r0, #44	; 0x2c
 8003128:	fb00 f303 	mul.w	r3, r0, r3
 800312c:	440b      	add	r3, r1
 800312e:	3344      	adds	r3, #68	; 0x44
 8003130:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	212c      	movs	r1, #44	; 0x2c
 8003138:	fb01 f303 	mul.w	r3, r1, r3
 800313c:	4413      	add	r3, r2
 800313e:	3350      	adds	r3, #80	; 0x50
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	441a      	add	r2, r3
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	202c      	movs	r0, #44	; 0x2c
 800314c:	fb00 f303 	mul.w	r3, r0, r3
 8003150:	440b      	add	r3, r1
 8003152:	3350      	adds	r3, #80	; 0x50
 8003154:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	015a      	lsls	r2, r3, #5
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	4413      	add	r3, r2
 800315e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	0cdb      	lsrs	r3, r3, #19
 8003166:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800316a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	212c      	movs	r1, #44	; 0x2c
 8003172:	fb01 f303 	mul.w	r3, r1, r3
 8003176:	4413      	add	r3, r2
 8003178:	3340      	adds	r3, #64	; 0x40
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	461a      	mov	r2, r3
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4293      	cmp	r3, r2
 8003182:	d13c      	bne.n	80031fe <HCD_RXQLVL_IRQHandler+0x19a>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d039      	beq.n	80031fe <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	4413      	add	r3, r2
 8003192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031a0:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031a8:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	015a      	lsls	r2, r3, #5
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	4413      	add	r3, r2
 80031b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b6:	461a      	mov	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	212c      	movs	r1, #44	; 0x2c
 80031c2:	fb01 f303 	mul.w	r3, r1, r3
 80031c6:	4413      	add	r3, r2
 80031c8:	3354      	adds	r3, #84	; 0x54
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	f083 0301 	eor.w	r3, r3, #1
 80031d0:	b2d8      	uxtb	r0, r3
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	212c      	movs	r1, #44	; 0x2c
 80031d8:	fb01 f303 	mul.w	r3, r1, r3
 80031dc:	4413      	add	r3, r2
 80031de:	3354      	adds	r3, #84	; 0x54
 80031e0:	4602      	mov	r2, r0
 80031e2:	701a      	strb	r2, [r3, #0]
      break;
 80031e4:	e00b      	b.n	80031fe <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	212c      	movs	r1, #44	; 0x2c
 80031ec:	fb01 f303 	mul.w	r3, r1, r3
 80031f0:	4413      	add	r3, r2
 80031f2:	3360      	adds	r3, #96	; 0x60
 80031f4:	2204      	movs	r2, #4
 80031f6:	701a      	strb	r2, [r3, #0]
      break;
 80031f8:	e001      	b.n	80031fe <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80031fa:	bf00      	nop
 80031fc:	e000      	b.n	8003200 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80031fe:	bf00      	nop
  }
}
 8003200:	bf00      	nop
 8003202:	3728      	adds	r7, #40	; 0x28
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003234:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b02      	cmp	r3, #2
 800323e:	d10b      	bne.n	8003258 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b01      	cmp	r3, #1
 8003248:	d102      	bne.n	8003250 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f005 f8bc 	bl	80083c8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f043 0302 	orr.w	r3, r3, #2
 8003256:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b08      	cmp	r3, #8
 8003260:	d132      	bne.n	80032c8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	f043 0308 	orr.w	r3, r3, #8
 8003268:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b04      	cmp	r3, #4
 8003272:	d126      	bne.n	80032c2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	2b02      	cmp	r3, #2
 800327a:	d113      	bne.n	80032a4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003282:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003286:	d106      	bne.n	8003296 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2102      	movs	r1, #2
 800328e:	4618      	mov	r0, r3
 8003290:	f002 fbd2 	bl	8005a38 <USB_InitFSLSPClkSel>
 8003294:	e011      	b.n	80032ba <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2101      	movs	r1, #1
 800329c:	4618      	mov	r0, r3
 800329e:	f002 fbcb 	bl	8005a38 <USB_InitFSLSPClkSel>
 80032a2:	e00a      	b.n	80032ba <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d106      	bne.n	80032ba <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032b2:	461a      	mov	r2, r3
 80032b4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80032b8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f005 f8ae 	bl	800841c <HAL_HCD_PortEnabled_Callback>
 80032c0:	e002      	b.n	80032c8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f005 f8b8 	bl	8008438 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f003 0320 	and.w	r3, r3, #32
 80032ce:	2b20      	cmp	r3, #32
 80032d0:	d103      	bne.n	80032da <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	f043 0320 	orr.w	r3, r3, #32
 80032d8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032e0:	461a      	mov	r2, r3
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	6013      	str	r3, [r2, #0]
}
 80032e6:	bf00      	nop
 80032e8:	3718      	adds	r7, #24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
	...

080032f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e1be      	b.n	8003680 <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a9f      	ldr	r2, [pc, #636]	; (8003584 <HAL_I2C_Init+0x294>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d00e      	beq.n	800332a <HAL_I2C_Init+0x3a>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a9d      	ldr	r2, [pc, #628]	; (8003588 <HAL_I2C_Init+0x298>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d009      	beq.n	800332a <HAL_I2C_Init+0x3a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a9c      	ldr	r2, [pc, #624]	; (800358c <HAL_I2C_Init+0x29c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d004      	beq.n	800332a <HAL_I2C_Init+0x3a>
 8003320:	f240 11bf 	movw	r1, #447	; 0x1bf
 8003324:	489a      	ldr	r0, [pc, #616]	; (8003590 <HAL_I2C_Init+0x2a0>)
 8003326:	f7fd fc6c 	bl	8000c02 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d004      	beq.n	800333c <HAL_I2C_Init+0x4c>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	4a97      	ldr	r2, [pc, #604]	; (8003594 <HAL_I2C_Init+0x2a4>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d904      	bls.n	8003346 <HAL_I2C_Init+0x56>
 800333c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8003340:	4893      	ldr	r0, [pc, #588]	; (8003590 <HAL_I2C_Init+0x2a0>)
 8003342:	f7fd fc5e 	bl	8000c02 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d009      	beq.n	8003362 <HAL_I2C_Init+0x72>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003356:	d004      	beq.n	8003362 <HAL_I2C_Init+0x72>
 8003358:	f240 11c1 	movw	r1, #449	; 0x1c1
 800335c:	488c      	ldr	r0, [pc, #560]	; (8003590 <HAL_I2C_Init+0x2a0>)
 800335e:	f7fd fc50 	bl	8000c02 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800336a:	f023 0303 	bic.w	r3, r3, #3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d004      	beq.n	800337c <HAL_I2C_Init+0x8c>
 8003372:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8003376:	4886      	ldr	r0, [pc, #536]	; (8003590 <HAL_I2C_Init+0x2a0>)
 8003378:	f7fd fc43 	bl	8000c02 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003384:	d009      	beq.n	800339a <HAL_I2C_Init+0xaa>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800338e:	d004      	beq.n	800339a <HAL_I2C_Init+0xaa>
 8003390:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003394:	487e      	ldr	r0, [pc, #504]	; (8003590 <HAL_I2C_Init+0x2a0>)
 8003396:	f7fd fc34 	bl	8000c02 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d008      	beq.n	80033b4 <HAL_I2C_Init+0xc4>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d004      	beq.n	80033b4 <HAL_I2C_Init+0xc4>
 80033aa:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80033ae:	4878      	ldr	r0, [pc, #480]	; (8003590 <HAL_I2C_Init+0x2a0>)
 80033b0:	f7fd fc27 	bl	8000c02 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d004      	beq.n	80033ca <HAL_I2C_Init+0xda>
 80033c0:	f240 11c5 	movw	r1, #453	; 0x1c5
 80033c4:	4872      	ldr	r0, [pc, #456]	; (8003590 <HAL_I2C_Init+0x2a0>)
 80033c6:	f7fd fc1c 	bl	8000c02 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d008      	beq.n	80033e4 <HAL_I2C_Init+0xf4>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	2b40      	cmp	r3, #64	; 0x40
 80033d8:	d004      	beq.n	80033e4 <HAL_I2C_Init+0xf4>
 80033da:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80033de:	486c      	ldr	r0, [pc, #432]	; (8003590 <HAL_I2C_Init+0x2a0>)
 80033e0:	f7fd fc0f 	bl	8000c02 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d008      	beq.n	80033fe <HAL_I2C_Init+0x10e>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	2b80      	cmp	r3, #128	; 0x80
 80033f2:	d004      	beq.n	80033fe <HAL_I2C_Init+0x10e>
 80033f4:	f240 11c7 	movw	r1, #455	; 0x1c7
 80033f8:	4865      	ldr	r0, [pc, #404]	; (8003590 <HAL_I2C_Init+0x2a0>)
 80033fa:	f7fd fc02 	bl	8000c02 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d106      	bne.n	8003418 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7fd f964 	bl	80006e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2224      	movs	r2, #36	; 0x24
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0201 	bic.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800343e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800344e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003450:	f001 fc1c 	bl	8004c8c <HAL_RCC_GetPCLK1Freq>
 8003454:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	4a4f      	ldr	r2, [pc, #316]	; (8003598 <HAL_I2C_Init+0x2a8>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d807      	bhi.n	8003470 <HAL_I2C_Init+0x180>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4a4e      	ldr	r2, [pc, #312]	; (800359c <HAL_I2C_Init+0x2ac>)
 8003464:	4293      	cmp	r3, r2
 8003466:	bf94      	ite	ls
 8003468:	2301      	movls	r3, #1
 800346a:	2300      	movhi	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	e006      	b.n	800347e <HAL_I2C_Init+0x18e>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4a4b      	ldr	r2, [pc, #300]	; (80035a0 <HAL_I2C_Init+0x2b0>)
 8003474:	4293      	cmp	r3, r2
 8003476:	bf94      	ite	ls
 8003478:	2301      	movls	r3, #1
 800347a:	2300      	movhi	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e0fc      	b.n	8003680 <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	4a46      	ldr	r2, [pc, #280]	; (80035a4 <HAL_I2C_Init+0x2b4>)
 800348a:	fba2 2303 	umull	r2, r3, r2, r3
 800348e:	0c9b      	lsrs	r3, r3, #18
 8003490:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	4a38      	ldr	r2, [pc, #224]	; (8003598 <HAL_I2C_Init+0x2a8>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d802      	bhi.n	80034c0 <HAL_I2C_Init+0x1d0>
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	3301      	adds	r3, #1
 80034be:	e009      	b.n	80034d4 <HAL_I2C_Init+0x1e4>
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034c6:	fb02 f303 	mul.w	r3, r2, r3
 80034ca:	4a37      	ldr	r2, [pc, #220]	; (80035a8 <HAL_I2C_Init+0x2b8>)
 80034cc:	fba2 2303 	umull	r2, r3, r2, r3
 80034d0:	099b      	lsrs	r3, r3, #6
 80034d2:	3301      	adds	r3, #1
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6812      	ldr	r2, [r2, #0]
 80034d8:	430b      	orrs	r3, r1
 80034da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	492a      	ldr	r1, [pc, #168]	; (8003598 <HAL_I2C_Init+0x2a8>)
 80034f0:	428b      	cmp	r3, r1
 80034f2:	d819      	bhi.n	8003528 <HAL_I2C_Init+0x238>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	1e59      	subs	r1, r3, #1
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003502:	1c59      	adds	r1, r3, #1
 8003504:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003508:	400b      	ands	r3, r1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <HAL_I2C_Init+0x234>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	1e59      	subs	r1, r3, #1
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	fbb1 f3f3 	udiv	r3, r1, r3
 800351c:	3301      	adds	r3, #1
 800351e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003522:	e066      	b.n	80035f2 <HAL_I2C_Init+0x302>
 8003524:	2304      	movs	r3, #4
 8003526:	e064      	b.n	80035f2 <HAL_I2C_Init+0x302>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d111      	bne.n	8003554 <HAL_I2C_Init+0x264>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	1e58      	subs	r0, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6859      	ldr	r1, [r3, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	440b      	add	r3, r1
 800353e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003542:	3301      	adds	r3, #1
 8003544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003548:	2b00      	cmp	r3, #0
 800354a:	bf0c      	ite	eq
 800354c:	2301      	moveq	r3, #1
 800354e:	2300      	movne	r3, #0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	e012      	b.n	800357a <HAL_I2C_Init+0x28a>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	1e58      	subs	r0, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6859      	ldr	r1, [r3, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	0099      	lsls	r1, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	fbb0 f3f3 	udiv	r3, r0, r3
 800356a:	3301      	adds	r3, #1
 800356c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003570:	2b00      	cmp	r3, #0
 8003572:	bf0c      	ite	eq
 8003574:	2301      	moveq	r3, #1
 8003576:	2300      	movne	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d016      	beq.n	80035ac <HAL_I2C_Init+0x2bc>
 800357e:	2301      	movs	r3, #1
 8003580:	e037      	b.n	80035f2 <HAL_I2C_Init+0x302>
 8003582:	bf00      	nop
 8003584:	40005400 	.word	0x40005400
 8003588:	40005800 	.word	0x40005800
 800358c:	40005c00 	.word	0x40005c00
 8003590:	08008b94 	.word	0x08008b94
 8003594:	00061a80 	.word	0x00061a80
 8003598:	000186a0 	.word	0x000186a0
 800359c:	001e847f 	.word	0x001e847f
 80035a0:	003d08ff 	.word	0x003d08ff
 80035a4:	431bde83 	.word	0x431bde83
 80035a8:	10624dd3 	.word	0x10624dd3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10e      	bne.n	80035d2 <HAL_I2C_Init+0x2e2>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	1e58      	subs	r0, r3, #1
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6859      	ldr	r1, [r3, #4]
 80035bc:	460b      	mov	r3, r1
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	440b      	add	r3, r1
 80035c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035c6:	3301      	adds	r3, #1
 80035c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035d0:	e00f      	b.n	80035f2 <HAL_I2C_Init+0x302>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	1e58      	subs	r0, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6859      	ldr	r1, [r3, #4]
 80035da:	460b      	mov	r3, r1
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	0099      	lsls	r1, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80035e8:	3301      	adds	r3, #1
 80035ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	6809      	ldr	r1, [r1, #0]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69da      	ldr	r2, [r3, #28]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	431a      	orrs	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003620:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6911      	ldr	r1, [r2, #16]
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	68d2      	ldr	r2, [r2, #12]
 800362c:	4311      	orrs	r1, r2
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6812      	ldr	r2, [r2, #0]
 8003632:	430b      	orrs	r3, r1
 8003634:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	695a      	ldr	r2, [r3, #20]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	431a      	orrs	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0201 	orr.w	r2, r2, #1
 8003660:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b088      	sub	sp, #32
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e1e7      	b.n	8003a6a <HAL_I2S_Init+0x3e2>
  }

  /* Check the I2S parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a9b      	ldr	r2, [pc, #620]	; (800390c <HAL_I2S_Init+0x284>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d018      	beq.n	80036d6 <HAL_I2S_Init+0x4e>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a99      	ldr	r2, [pc, #612]	; (8003910 <HAL_I2S_Init+0x288>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d013      	beq.n	80036d6 <HAL_I2S_Init+0x4e>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a98      	ldr	r2, [pc, #608]	; (8003914 <HAL_I2S_Init+0x28c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d00e      	beq.n	80036d6 <HAL_I2S_Init+0x4e>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a96      	ldr	r2, [pc, #600]	; (8003918 <HAL_I2S_Init+0x290>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d009      	beq.n	80036d6 <HAL_I2S_Init+0x4e>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a95      	ldr	r2, [pc, #596]	; (800391c <HAL_I2S_Init+0x294>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d004      	beq.n	80036d6 <HAL_I2S_Init+0x4e>
 80036cc:	f240 111b 	movw	r1, #283	; 0x11b
 80036d0:	4893      	ldr	r0, [pc, #588]	; (8003920 <HAL_I2S_Init+0x298>)
 80036d2:	f7fd fa96 	bl	8000c02 <assert_failed>
  assert_param(IS_I2S_MODE(hi2s->Init.Mode));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d013      	beq.n	8003706 <HAL_I2S_Init+0x7e>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036e6:	d00e      	beq.n	8003706 <HAL_I2S_Init+0x7e>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036f0:	d009      	beq.n	8003706 <HAL_I2S_Init+0x7e>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036fa:	d004      	beq.n	8003706 <HAL_I2S_Init+0x7e>
 80036fc:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8003700:	4887      	ldr	r0, [pc, #540]	; (8003920 <HAL_I2S_Init+0x298>)
 8003702:	f7fd fa7e 	bl	8000c02 <assert_failed>
  assert_param(IS_I2S_STANDARD(hi2s->Init.Standard));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d014      	beq.n	8003738 <HAL_I2S_Init+0xb0>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2b10      	cmp	r3, #16
 8003714:	d010      	beq.n	8003738 <HAL_I2S_Init+0xb0>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	2b20      	cmp	r3, #32
 800371c:	d00c      	beq.n	8003738 <HAL_I2S_Init+0xb0>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	2b30      	cmp	r3, #48	; 0x30
 8003724:	d008      	beq.n	8003738 <HAL_I2S_Init+0xb0>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	2bb0      	cmp	r3, #176	; 0xb0
 800372c:	d004      	beq.n	8003738 <HAL_I2S_Init+0xb0>
 800372e:	f240 111d 	movw	r1, #285	; 0x11d
 8003732:	487b      	ldr	r0, [pc, #492]	; (8003920 <HAL_I2S_Init+0x298>)
 8003734:	f7fd fa65 	bl	8000c02 <assert_failed>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d010      	beq.n	8003762 <HAL_I2S_Init+0xda>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d00c      	beq.n	8003762 <HAL_I2S_Init+0xda>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	2b03      	cmp	r3, #3
 800374e:	d008      	beq.n	8003762 <HAL_I2S_Init+0xda>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	2b05      	cmp	r3, #5
 8003756:	d004      	beq.n	8003762 <HAL_I2S_Init+0xda>
 8003758:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800375c:	4870      	ldr	r0, [pc, #448]	; (8003920 <HAL_I2S_Init+0x298>)
 800375e:	f7fd fa50 	bl	8000c02 <assert_failed>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800376a:	d008      	beq.n	800377e <HAL_I2S_Init+0xf6>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d004      	beq.n	800377e <HAL_I2S_Init+0xf6>
 8003774:	f240 111f 	movw	r1, #287	; 0x11f
 8003778:	4869      	ldr	r0, [pc, #420]	; (8003920 <HAL_I2S_Init+0x298>)
 800377a:	f7fd fa42 	bl	8000c02 <assert_failed>
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8003786:	d304      	bcc.n	8003792 <HAL_I2S_Init+0x10a>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	4a65      	ldr	r2, [pc, #404]	; (8003924 <HAL_I2S_Init+0x29c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d908      	bls.n	80037a4 <HAL_I2S_Init+0x11c>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d004      	beq.n	80037a4 <HAL_I2S_Init+0x11c>
 800379a:	f44f 7190 	mov.w	r1, #288	; 0x120
 800379e:	4860      	ldr	r0, [pc, #384]	; (8003920 <HAL_I2S_Init+0x298>)
 80037a0:	f7fd fa2f 	bl	8000c02 <assert_failed>
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d008      	beq.n	80037be <HAL_I2S_Init+0x136>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d004      	beq.n	80037be <HAL_I2S_Init+0x136>
 80037b4:	f240 1121 	movw	r1, #289	; 0x121
 80037b8:	4859      	ldr	r0, [pc, #356]	; (8003920 <HAL_I2S_Init+0x298>)
 80037ba:	f7fd fa22 	bl	8000c02 <assert_failed>
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d008      	beq.n	80037d8 <HAL_I2S_Init+0x150>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d004      	beq.n	80037d8 <HAL_I2S_Init+0x150>
 80037ce:	f44f 7191 	mov.w	r1, #290	; 0x122
 80037d2:	4853      	ldr	r0, [pc, #332]	; (8003920 <HAL_I2S_Init+0x298>)
 80037d4:	f7fd fa15 	bl	8000c02 <assert_failed>

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d109      	bne.n	80037f8 <HAL_I2S_Init+0x170>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a4e      	ldr	r2, [pc, #312]	; (8003928 <HAL_I2S_Init+0x2a0>)
 80037f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7fd f81a 	bl	800082c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6812      	ldr	r2, [r2, #0]
 800380a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800380e:	f023 030f 	bic.w	r3, r3, #15
 8003812:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2202      	movs	r2, #2
 800381a:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	2b02      	cmp	r3, #2
 8003822:	d060      	beq.n	80038e6 <HAL_I2S_Init+0x25e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d102      	bne.n	8003832 <HAL_I2S_Init+0x1aa>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800382c:	2310      	movs	r3, #16
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	e001      	b.n	8003836 <HAL_I2S_Init+0x1ae>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003832:	2320      	movs	r3, #32
 8003834:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	2b20      	cmp	r3, #32
 800383c:	d802      	bhi.n	8003844 <HAL_I2S_Init+0x1bc>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003844:	2001      	movs	r0, #1
 8003846:	f001 fc49 	bl	80050dc <HAL_RCCEx_GetPeriphCLKFreq>
 800384a:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003854:	d125      	bne.n	80038a2 <HAL_I2S_Init+0x21a>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d010      	beq.n	8003880 <HAL_I2S_Init+0x1f8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	fbb2 f2f3 	udiv	r2, r2, r3
 8003868:	4613      	mov	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	461a      	mov	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	fbb2 f3f3 	udiv	r3, r2, r3
 800387a:	3305      	adds	r3, #5
 800387c:	613b      	str	r3, [r7, #16]
 800387e:	e01f      	b.n	80038c0 <HAL_I2S_Init+0x238>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	fbb2 f2f3 	udiv	r2, r2, r3
 800388a:	4613      	mov	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	461a      	mov	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	fbb2 f3f3 	udiv	r3, r2, r3
 800389c:	3305      	adds	r3, #5
 800389e:	613b      	str	r3, [r7, #16]
 80038a0:	e00e      	b.n	80038c0 <HAL_I2S_Init+0x238>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80038aa:	4613      	mov	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	461a      	mov	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038bc:	3305      	adds	r3, #5
 80038be:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	4a1a      	ldr	r2, [pc, #104]	; (800392c <HAL_I2S_Init+0x2a4>)
 80038c4:	fba2 2303 	umull	r2, r3, r2, r3
 80038c8:	08db      	lsrs	r3, r3, #3
 80038ca:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	085b      	lsrs	r3, r3, #1
 80038dc:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	021b      	lsls	r3, r3, #8
 80038e2:	61bb      	str	r3, [r7, #24]
 80038e4:	e003      	b.n	80038ee <HAL_I2S_Init+0x266>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80038e6:	2302      	movs	r3, #2
 80038e8:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d902      	bls.n	80038fa <HAL_I2S_Init+0x272>
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	2bff      	cmp	r3, #255	; 0xff
 80038f8:	d91a      	bls.n	8003930 <HAL_I2S_Init+0x2a8>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	f043 0210 	orr.w	r2, r3, #16
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e0af      	b.n	8003a6a <HAL_I2S_Init+0x3e2>
 800390a:	bf00      	nop
 800390c:	40013000 	.word	0x40013000
 8003910:	40003800 	.word	0x40003800
 8003914:	40003c00 	.word	0x40003c00
 8003918:	40013400 	.word	0x40013400
 800391c:	40015000 	.word	0x40015000
 8003920:	08008bcc 	.word	0x08008bcc
 8003924:	0002ee00 	.word	0x0002ee00
 8003928:	08003b7b 	.word	0x08003b7b
 800392c:	cccccccd 	.word	0xcccccccd
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691a      	ldr	r2, [r3, #16]
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	ea42 0103 	orr.w	r1, r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	69fa      	ldr	r2, [r7, #28]
 8003940:	430a      	orrs	r2, r1
 8003942:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800394e:	f023 030f 	bic.w	r3, r3, #15
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6851      	ldr	r1, [r2, #4]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6892      	ldr	r2, [r2, #8]
 800395a:	4311      	orrs	r1, r2
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	68d2      	ldr	r2, [r2, #12]
 8003960:	4311      	orrs	r1, r2
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6992      	ldr	r2, [r2, #24]
 8003966:	430a      	orrs	r2, r1
 8003968:	431a      	orrs	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003972:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_ASTRTEN */

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d008      	beq.n	800398e <HAL_I2S_Init+0x306>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d004      	beq.n	800398e <HAL_I2S_Init+0x306>
 8003984:	f240 11bd 	movw	r1, #445	; 0x1bd
 8003988:	483a      	ldr	r0, [pc, #232]	; (8003a74 <HAL_I2S_Init+0x3ec>)
 800398a:	f7fd f93a 	bl	8000c02 <assert_failed>

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d161      	bne.n	8003a5a <HAL_I2S_Init+0x3d2>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a37      	ldr	r2, [pc, #220]	; (8003a78 <HAL_I2S_Init+0x3f0>)
 800399a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a36      	ldr	r2, [pc, #216]	; (8003a7c <HAL_I2S_Init+0x3f4>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d101      	bne.n	80039aa <HAL_I2S_Init+0x322>
 80039a6:	4b36      	ldr	r3, [pc, #216]	; (8003a80 <HAL_I2S_Init+0x3f8>)
 80039a8:	e001      	b.n	80039ae <HAL_I2S_Init+0x326>
 80039aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6812      	ldr	r2, [r2, #0]
 80039b4:	4931      	ldr	r1, [pc, #196]	; (8003a7c <HAL_I2S_Init+0x3f4>)
 80039b6:	428a      	cmp	r2, r1
 80039b8:	d101      	bne.n	80039be <HAL_I2S_Init+0x336>
 80039ba:	4a31      	ldr	r2, [pc, #196]	; (8003a80 <HAL_I2S_Init+0x3f8>)
 80039bc:	e001      	b.n	80039c2 <HAL_I2S_Init+0x33a>
 80039be:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80039c2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80039c6:	f023 030f 	bic.w	r3, r3, #15
 80039ca:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a2a      	ldr	r2, [pc, #168]	; (8003a7c <HAL_I2S_Init+0x3f4>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d101      	bne.n	80039da <HAL_I2S_Init+0x352>
 80039d6:	4b2a      	ldr	r3, [pc, #168]	; (8003a80 <HAL_I2S_Init+0x3f8>)
 80039d8:	e001      	b.n	80039de <HAL_I2S_Init+0x356>
 80039da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039de:	2202      	movs	r2, #2
 80039e0:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a25      	ldr	r2, [pc, #148]	; (8003a7c <HAL_I2S_Init+0x3f4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d101      	bne.n	80039f0 <HAL_I2S_Init+0x368>
 80039ec:	4b24      	ldr	r3, [pc, #144]	; (8003a80 <HAL_I2S_Init+0x3f8>)
 80039ee:	e001      	b.n	80039f4 <HAL_I2S_Init+0x36c>
 80039f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a00:	d003      	beq.n	8003a0a <HAL_I2S_Init+0x382>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d103      	bne.n	8003a12 <HAL_I2S_Init+0x38a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003a0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a0e:	613b      	str	r3, [r7, #16]
 8003a10:	e001      	b.n	8003a16 <HAL_I2S_Init+0x38e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003a12:	2300      	movs	r3, #0
 8003a14:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a20:	4313      	orrs	r3, r2
 8003a22:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a34:	4313      	orrs	r3, r2
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	897b      	ldrh	r3, [r7, #10]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a42:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a0c      	ldr	r2, [pc, #48]	; (8003a7c <HAL_I2S_Init+0x3f4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d101      	bne.n	8003a52 <HAL_I2S_Init+0x3ca>
 8003a4e:	4b0c      	ldr	r3, [pc, #48]	; (8003a80 <HAL_I2S_Init+0x3f8>)
 8003a50:	e001      	b.n	8003a56 <HAL_I2S_Init+0x3ce>
 8003a52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a56:	897a      	ldrh	r2, [r7, #10]
 8003a58:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3720      	adds	r7, #32
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	08008bcc 	.word	0x08008bcc
 8003a78:	08003c91 	.word	0x08003c91
 8003a7c:	40003800 	.word	0x40003800
 8003a80:	40003400 	.word	0x40003400

08003a84 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	881a      	ldrh	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	1c9a      	adds	r2, r3, #2
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10e      	bne.n	8003b14 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b04:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7ff ffb8 	bl	8003a84 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003b14:	bf00      	nop
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2e:	b292      	uxth	r2, r2
 8003b30:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b36:	1c9a      	adds	r2, r3, #2
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10e      	bne.n	8003b72 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b62:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7ff ff93 	bl	8003a98 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b086      	sub	sp, #24
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d13a      	bne.n	8003c0c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d109      	bne.n	8003bb4 <I2S_IRQHandler+0x3a>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003baa:	2b40      	cmp	r3, #64	; 0x40
 8003bac:	d102      	bne.n	8003bb4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7ff ffb4 	bl	8003b1c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bba:	2b40      	cmp	r3, #64	; 0x40
 8003bbc:	d126      	bne.n	8003c0c <I2S_IRQHandler+0x92>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f003 0320 	and.w	r3, r3, #32
 8003bc8:	2b20      	cmp	r3, #32
 8003bca:	d11f      	bne.n	8003c0c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bda:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003bdc:	2300      	movs	r3, #0
 8003bde:	613b      	str	r3, [r7, #16]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	613b      	str	r3, [r7, #16]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	613b      	str	r3, [r7, #16]
 8003bf0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfe:	f043 0202 	orr.w	r2, r3, #2
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7ff ff50 	bl	8003aac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b03      	cmp	r3, #3
 8003c16:	d136      	bne.n	8003c86 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d109      	bne.n	8003c36 <I2S_IRQHandler+0xbc>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2c:	2b80      	cmp	r3, #128	; 0x80
 8003c2e:	d102      	bne.n	8003c36 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff ff45 	bl	8003ac0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f003 0308 	and.w	r3, r3, #8
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d122      	bne.n	8003c86 <I2S_IRQHandler+0x10c>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b20      	cmp	r3, #32
 8003c4c:	d11b      	bne.n	8003c86 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c5c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c78:	f043 0204 	orr.w	r2, r3, #4
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff ff13 	bl	8003aac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c86:	bf00      	nop
 8003c88:	3718      	adds	r7, #24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b088      	sub	sp, #32
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4aa2      	ldr	r2, [pc, #648]	; (8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d101      	bne.n	8003cae <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003caa:	4ba2      	ldr	r3, [pc, #648]	; (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003cac:	e001      	b.n	8003cb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003cae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a9b      	ldr	r2, [pc, #620]	; (8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d101      	bne.n	8003ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003cc8:	4b9a      	ldr	r3, [pc, #616]	; (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003cca:	e001      	b.n	8003cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003ccc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cdc:	d004      	beq.n	8003ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f040 8099 	bne.w	8003e1a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d107      	bne.n	8003d02 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d002      	beq.n	8003d02 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f925 	bl	8003f4c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d107      	bne.n	8003d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f9c8 	bl	80040ac <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d22:	2b40      	cmp	r3, #64	; 0x40
 8003d24:	d13a      	bne.n	8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f003 0320 	and.w	r3, r3, #32
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d035      	beq.n	8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a7e      	ldr	r2, [pc, #504]	; (8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d101      	bne.n	8003d3e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003d3a:	4b7e      	ldr	r3, [pc, #504]	; (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d3c:	e001      	b.n	8003d42 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003d3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4979      	ldr	r1, [pc, #484]	; (8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d4a:	428b      	cmp	r3, r1
 8003d4c:	d101      	bne.n	8003d52 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003d4e:	4b79      	ldr	r3, [pc, #484]	; (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d50:	e001      	b.n	8003d56 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003d52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d5a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685a      	ldr	r2, [r3, #4]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d6a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8e:	f043 0202 	orr.w	r2, r3, #2
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7ff fe88 	bl	8003aac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	f040 80be 	bne.w	8003f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f003 0320 	and.w	r3, r3, #32
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 80b8 	beq.w	8003f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dc2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a59      	ldr	r2, [pc, #356]	; (8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d101      	bne.n	8003dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003dce:	4b59      	ldr	r3, [pc, #356]	; (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003dd0:	e001      	b.n	8003dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003dd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4954      	ldr	r1, [pc, #336]	; (8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003dde:	428b      	cmp	r3, r1
 8003de0:	d101      	bne.n	8003de6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003de2:	4b54      	ldr	r3, [pc, #336]	; (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003de4:	e001      	b.n	8003dea <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003de6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dee:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003df0:	2300      	movs	r3, #0
 8003df2:	60bb      	str	r3, [r7, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	60bb      	str	r3, [r7, #8]
 8003dfc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0a:	f043 0204 	orr.w	r2, r3, #4
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7ff fe4a 	bl	8003aac <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e18:	e084      	b.n	8003f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d107      	bne.n	8003e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f8be 	bl	8003fb0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d107      	bne.n	8003e4e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d002      	beq.n	8003e4e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f8fd 	bl	8004048 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e54:	2b40      	cmp	r3, #64	; 0x40
 8003e56:	d12f      	bne.n	8003eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f003 0320 	and.w	r3, r3, #32
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d02a      	beq.n	8003eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e70:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a2e      	ldr	r2, [pc, #184]	; (8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d101      	bne.n	8003e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003e7c:	4b2d      	ldr	r3, [pc, #180]	; (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e7e:	e001      	b.n	8003e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003e80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4929      	ldr	r1, [pc, #164]	; (8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e8c:	428b      	cmp	r3, r1
 8003e8e:	d101      	bne.n	8003e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003e90:	4b28      	ldr	r3, [pc, #160]	; (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e92:	e001      	b.n	8003e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003e94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e9c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eaa:	f043 0202 	orr.w	r2, r3, #2
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7ff fdfa 	bl	8003aac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	f003 0308 	and.w	r3, r3, #8
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d131      	bne.n	8003f26 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f003 0320 	and.w	r3, r3, #32
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d02c      	beq.n	8003f26 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a17      	ldr	r2, [pc, #92]	; (8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d101      	bne.n	8003eda <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003ed6:	4b17      	ldr	r3, [pc, #92]	; (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ed8:	e001      	b.n	8003ede <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003eda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4912      	ldr	r1, [pc, #72]	; (8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ee6:	428b      	cmp	r3, r1
 8003ee8:	d101      	bne.n	8003eee <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003eea:	4b12      	ldr	r3, [pc, #72]	; (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003eec:	e001      	b.n	8003ef2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003eee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ef2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ef6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f06:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f14:	f043 0204 	orr.w	r2, r3, #4
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7ff fdc5 	bl	8003aac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f22:	e000      	b.n	8003f26 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f24:	bf00      	nop
}
 8003f26:	bf00      	nop
 8003f28:	3720      	adds	r7, #32
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40003800 	.word	0x40003800
 8003f34:	40003400 	.word	0x40003400

08003f38 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	1c99      	adds	r1, r3, #2
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6251      	str	r1, [r2, #36]	; 0x24
 8003f5e:	881a      	ldrh	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d113      	bne.n	8003fa6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f8c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d106      	bne.n	8003fa6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f7ff ffc9 	bl	8003f38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fa6:	bf00      	nop
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
	...

08003fb0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	1c99      	adds	r1, r3, #2
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6251      	str	r1, [r2, #36]	; 0x24
 8003fc2:	8819      	ldrh	r1, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a1d      	ldr	r2, [pc, #116]	; (8004040 <I2SEx_TxISR_I2SExt+0x90>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d101      	bne.n	8003fd2 <I2SEx_TxISR_I2SExt+0x22>
 8003fce:	4b1d      	ldr	r3, [pc, #116]	; (8004044 <I2SEx_TxISR_I2SExt+0x94>)
 8003fd0:	e001      	b.n	8003fd6 <I2SEx_TxISR_I2SExt+0x26>
 8003fd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fd6:	460a      	mov	r2, r1
 8003fd8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d121      	bne.n	8004036 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a12      	ldr	r2, [pc, #72]	; (8004040 <I2SEx_TxISR_I2SExt+0x90>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d101      	bne.n	8004000 <I2SEx_TxISR_I2SExt+0x50>
 8003ffc:	4b11      	ldr	r3, [pc, #68]	; (8004044 <I2SEx_TxISR_I2SExt+0x94>)
 8003ffe:	e001      	b.n	8004004 <I2SEx_TxISR_I2SExt+0x54>
 8004000:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	490d      	ldr	r1, [pc, #52]	; (8004040 <I2SEx_TxISR_I2SExt+0x90>)
 800400c:	428b      	cmp	r3, r1
 800400e:	d101      	bne.n	8004014 <I2SEx_TxISR_I2SExt+0x64>
 8004010:	4b0c      	ldr	r3, [pc, #48]	; (8004044 <I2SEx_TxISR_I2SExt+0x94>)
 8004012:	e001      	b.n	8004018 <I2SEx_TxISR_I2SExt+0x68>
 8004014:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004018:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800401c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d106      	bne.n	8004036 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7ff ff81 	bl	8003f38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004036:	bf00      	nop
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	40003800 	.word	0x40003800
 8004044:	40003400 	.word	0x40003400

08004048 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68d8      	ldr	r0, [r3, #12]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405a:	1c99      	adds	r1, r3, #2
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004060:	b282      	uxth	r2, r0
 8004062:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004068:	b29b      	uxth	r3, r3
 800406a:	3b01      	subs	r3, #1
 800406c:	b29a      	uxth	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004076:	b29b      	uxth	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d113      	bne.n	80040a4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800408a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004090:	b29b      	uxth	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d106      	bne.n	80040a4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7ff ff4a 	bl	8003f38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040a4:	bf00      	nop
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a20      	ldr	r2, [pc, #128]	; (800413c <I2SEx_RxISR_I2SExt+0x90>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d101      	bne.n	80040c2 <I2SEx_RxISR_I2SExt+0x16>
 80040be:	4b20      	ldr	r3, [pc, #128]	; (8004140 <I2SEx_RxISR_I2SExt+0x94>)
 80040c0:	e001      	b.n	80040c6 <I2SEx_RxISR_I2SExt+0x1a>
 80040c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040c6:	68d8      	ldr	r0, [r3, #12]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040cc:	1c99      	adds	r1, r3, #2
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80040d2:	b282      	uxth	r2, r0
 80040d4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040da:	b29b      	uxth	r3, r3
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d121      	bne.n	8004132 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a12      	ldr	r2, [pc, #72]	; (800413c <I2SEx_RxISR_I2SExt+0x90>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d101      	bne.n	80040fc <I2SEx_RxISR_I2SExt+0x50>
 80040f8:	4b11      	ldr	r3, [pc, #68]	; (8004140 <I2SEx_RxISR_I2SExt+0x94>)
 80040fa:	e001      	b.n	8004100 <I2SEx_RxISR_I2SExt+0x54>
 80040fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	490d      	ldr	r1, [pc, #52]	; (800413c <I2SEx_RxISR_I2SExt+0x90>)
 8004108:	428b      	cmp	r3, r1
 800410a:	d101      	bne.n	8004110 <I2SEx_RxISR_I2SExt+0x64>
 800410c:	4b0c      	ldr	r3, [pc, #48]	; (8004140 <I2SEx_RxISR_I2SExt+0x94>)
 800410e:	e001      	b.n	8004114 <I2SEx_RxISR_I2SExt+0x68>
 8004110:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004114:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004118:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411e:	b29b      	uxth	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d106      	bne.n	8004132 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f7ff ff03 	bl	8003f38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004132:	bf00      	nop
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	40003800 	.word	0x40003800
 8004140:	40003400 	.word	0x40003400

08004144 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e316      	b.n	8004784 <HAL_RCC_OscConfig+0x640>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b0f      	cmp	r3, #15
 800415c:	d903      	bls.n	8004166 <HAL_RCC_OscConfig+0x22>
 800415e:	21e8      	movs	r1, #232	; 0xe8
 8004160:	48a3      	ldr	r0, [pc, #652]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 8004162:	f7fc fd4e 	bl	8000c02 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 8088 	beq.w	8004284 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00d      	beq.n	8004198 <HAL_RCC_OscConfig+0x54>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004184:	d008      	beq.n	8004198 <HAL_RCC_OscConfig+0x54>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800418e:	d003      	beq.n	8004198 <HAL_RCC_OscConfig+0x54>
 8004190:	21ed      	movs	r1, #237	; 0xed
 8004192:	4897      	ldr	r0, [pc, #604]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 8004194:	f7fc fd35 	bl	8000c02 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004198:	4b96      	ldr	r3, [pc, #600]	; (80043f4 <HAL_RCC_OscConfig+0x2b0>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 030c 	and.w	r3, r3, #12
 80041a0:	2b04      	cmp	r3, #4
 80041a2:	d00c      	beq.n	80041be <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041a4:	4b93      	ldr	r3, [pc, #588]	; (80043f4 <HAL_RCC_OscConfig+0x2b0>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	d112      	bne.n	80041d6 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041b0:	4b90      	ldr	r3, [pc, #576]	; (80043f4 <HAL_RCC_OscConfig+0x2b0>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041bc:	d10b      	bne.n	80041d6 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041be:	4b8d      	ldr	r3, [pc, #564]	; (80043f4 <HAL_RCC_OscConfig+0x2b0>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d05b      	beq.n	8004282 <HAL_RCC_OscConfig+0x13e>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d157      	bne.n	8004282 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e2d6      	b.n	8004784 <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041de:	d106      	bne.n	80041ee <HAL_RCC_OscConfig+0xaa>
 80041e0:	4b84      	ldr	r3, [pc, #528]	; (80043f4 <HAL_RCC_OscConfig+0x2b0>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a83      	ldr	r2, [pc, #524]	; (80043f4 <HAL_RCC_OscConfig+0x2b0>)
 80041e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ea:	6013      	str	r3, [r2, #0]
 80041ec:	e01d      	b.n	800422a <HAL_RCC_OscConfig+0xe6>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041f6:	d10c      	bne.n	8004212 <HAL_RCC_OscConfig+0xce>
 80041f8:	4b7e      	ldr	r3, [pc, #504]	; (80043f4 <HAL_RCC_OscConfig+0x2b0>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a7d      	ldr	r2, [pc, #500]	; (80043f4 <HAL_RCC_OscConfig+0x2b0>)
 80041fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004202:	6013      	str	r3, [r2, #0]
 8004204:	4b7b      	ldr	r3, [pc, #492]	; (80043f4 <HAL_RCC_OscConfig+0x2b0>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a7a      	ldr	r2, [pc, #488]	; (80043f4 <HAL_RCC_OscConfig+0x2b0>)
 800420a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800420e:	6013      	str	r3, [r2, #0]
 8004210:	e00b      	b.n	800422a <HAL_RCC_OscConfig+0xe6>
 8004212:	4b78      	ldr	r3, [pc, #480]	; (80043f4 <HAL_RCC_OscConfig+0x2b0>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a77      	ldr	r2, [pc, #476]	; (80043f4 <HAL_RCC_OscConfig+0x2b0>)
 8004218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	4b75      	ldr	r3, [pc, #468]	; (80043f4 <HAL_RCC_OscConfig+0x2b0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a74      	ldr	r2, [pc, #464]	; (80043f4 <HAL_RCC_OscConfig+0x2b0>)
 8004224:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004228:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d013      	beq.n	800425a <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004232:	f7fc fea3 	bl	8000f7c <HAL_GetTick>
 8004236:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004238:	e008      	b.n	800424c <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800423a:	f7fc fe9f 	bl	8000f7c <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b64      	cmp	r3, #100	; 0x64
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e29b      	b.n	8004784 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800424c:	4b69      	ldr	r3, [pc, #420]	; (80043f4 <HAL_RCC_OscConfig+0x2b0>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0f0      	beq.n	800423a <HAL_RCC_OscConfig+0xf6>
 8004258:	e014      	b.n	8004284 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800425a:	f7fc fe8f 	bl	8000f7c <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004260:	e008      	b.n	8004274 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004262:	f7fc fe8b 	bl	8000f7c <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b64      	cmp	r3, #100	; 0x64
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e287      	b.n	8004784 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004274:	4b5f      	ldr	r3, [pc, #380]	; (80043f4 <HAL_RCC_OscConfig+0x2b0>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1f0      	bne.n	8004262 <HAL_RCC_OscConfig+0x11e>
 8004280:	e000      	b.n	8004284 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004282:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d079      	beq.n	8004384 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d008      	beq.n	80042aa <HAL_RCC_OscConfig+0x166>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d004      	beq.n	80042aa <HAL_RCC_OscConfig+0x166>
 80042a0:	f240 111f 	movw	r1, #287	; 0x11f
 80042a4:	4852      	ldr	r0, [pc, #328]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 80042a6:	f7fc fcac 	bl	8000c02 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	2b1f      	cmp	r3, #31
 80042b0:	d904      	bls.n	80042bc <HAL_RCC_OscConfig+0x178>
 80042b2:	f44f 7190 	mov.w	r1, #288	; 0x120
 80042b6:	484e      	ldr	r0, [pc, #312]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 80042b8:	f7fc fca3 	bl	8000c02 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042bc:	4b4d      	ldr	r3, [pc, #308]	; (80043f4 <HAL_RCC_OscConfig+0x2b0>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f003 030c 	and.w	r3, r3, #12
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00b      	beq.n	80042e0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042c8:	4b4a      	ldr	r3, [pc, #296]	; (80043f4 <HAL_RCC_OscConfig+0x2b0>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d11c      	bne.n	800430e <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042d4:	4b47      	ldr	r3, [pc, #284]	; (80043f4 <HAL_RCC_OscConfig+0x2b0>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d116      	bne.n	800430e <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042e0:	4b44      	ldr	r3, [pc, #272]	; (80043f4 <HAL_RCC_OscConfig+0x2b0>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d005      	beq.n	80042f8 <HAL_RCC_OscConfig+0x1b4>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d001      	beq.n	80042f8 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e245      	b.n	8004784 <HAL_RCC_OscConfig+0x640>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f8:	4b3e      	ldr	r3, [pc, #248]	; (80043f4 <HAL_RCC_OscConfig+0x2b0>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	493b      	ldr	r1, [pc, #236]	; (80043f4 <HAL_RCC_OscConfig+0x2b0>)
 8004308:	4313      	orrs	r3, r2
 800430a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800430c:	e03a      	b.n	8004384 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d020      	beq.n	8004358 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004316:	4b38      	ldr	r3, [pc, #224]	; (80043f8 <HAL_RCC_OscConfig+0x2b4>)
 8004318:	2201      	movs	r2, #1
 800431a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431c:	f7fc fe2e 	bl	8000f7c <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004324:	f7fc fe2a 	bl	8000f7c <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e226      	b.n	8004784 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004336:	4b2f      	ldr	r3, [pc, #188]	; (80043f4 <HAL_RCC_OscConfig+0x2b0>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0f0      	beq.n	8004324 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004342:	4b2c      	ldr	r3, [pc, #176]	; (80043f4 <HAL_RCC_OscConfig+0x2b0>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	4928      	ldr	r1, [pc, #160]	; (80043f4 <HAL_RCC_OscConfig+0x2b0>)
 8004352:	4313      	orrs	r3, r2
 8004354:	600b      	str	r3, [r1, #0]
 8004356:	e015      	b.n	8004384 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004358:	4b27      	ldr	r3, [pc, #156]	; (80043f8 <HAL_RCC_OscConfig+0x2b4>)
 800435a:	2200      	movs	r2, #0
 800435c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435e:	f7fc fe0d 	bl	8000f7c <HAL_GetTick>
 8004362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004364:	e008      	b.n	8004378 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004366:	f7fc fe09 	bl	8000f7c <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d901      	bls.n	8004378 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e205      	b.n	8004784 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004378:	4b1e      	ldr	r3, [pc, #120]	; (80043f4 <HAL_RCC_OscConfig+0x2b0>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1f0      	bne.n	8004366 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0308 	and.w	r3, r3, #8
 800438c:	2b00      	cmp	r3, #0
 800438e:	d046      	beq.n	800441e <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d008      	beq.n	80043aa <HAL_RCC_OscConfig+0x266>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d004      	beq.n	80043aa <HAL_RCC_OscConfig+0x266>
 80043a0:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80043a4:	4812      	ldr	r0, [pc, #72]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 80043a6:	f7fc fc2c 	bl	8000c02 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d016      	beq.n	80043e0 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043b2:	4b12      	ldr	r3, [pc, #72]	; (80043fc <HAL_RCC_OscConfig+0x2b8>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b8:	f7fc fde0 	bl	8000f7c <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043c0:	f7fc fddc 	bl	8000f7c <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e1d8      	b.n	8004784 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d2:	4b08      	ldr	r3, [pc, #32]	; (80043f4 <HAL_RCC_OscConfig+0x2b0>)
 80043d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCC_OscConfig+0x27c>
 80043de:	e01e      	b.n	800441e <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043e0:	4b06      	ldr	r3, [pc, #24]	; (80043fc <HAL_RCC_OscConfig+0x2b8>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043e6:	f7fc fdc9 	bl	8000f7c <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ec:	e011      	b.n	8004412 <HAL_RCC_OscConfig+0x2ce>
 80043ee:	bf00      	nop
 80043f0:	08008c04 	.word	0x08008c04
 80043f4:	40023800 	.word	0x40023800
 80043f8:	42470000 	.word	0x42470000
 80043fc:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004400:	f7fc fdbc 	bl	8000f7c <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e1b8      	b.n	8004784 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004412:	4b97      	ldr	r3, [pc, #604]	; (8004670 <HAL_RCC_OscConfig+0x52c>)
 8004414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1f0      	bne.n	8004400 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0304 	and.w	r3, r3, #4
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 80a8 	beq.w	800457c <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 800442c:	2300      	movs	r3, #0
 800442e:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00c      	beq.n	8004452 <HAL_RCC_OscConfig+0x30e>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d008      	beq.n	8004452 <HAL_RCC_OscConfig+0x30e>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	2b05      	cmp	r3, #5
 8004446:	d004      	beq.n	8004452 <HAL_RCC_OscConfig+0x30e>
 8004448:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800444c:	4889      	ldr	r0, [pc, #548]	; (8004674 <HAL_RCC_OscConfig+0x530>)
 800444e:	f7fc fbd8 	bl	8000c02 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004452:	4b87      	ldr	r3, [pc, #540]	; (8004670 <HAL_RCC_OscConfig+0x52c>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10f      	bne.n	800447e <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800445e:	2300      	movs	r3, #0
 8004460:	60bb      	str	r3, [r7, #8]
 8004462:	4b83      	ldr	r3, [pc, #524]	; (8004670 <HAL_RCC_OscConfig+0x52c>)
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	4a82      	ldr	r2, [pc, #520]	; (8004670 <HAL_RCC_OscConfig+0x52c>)
 8004468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800446c:	6413      	str	r3, [r2, #64]	; 0x40
 800446e:	4b80      	ldr	r3, [pc, #512]	; (8004670 <HAL_RCC_OscConfig+0x52c>)
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004476:	60bb      	str	r3, [r7, #8]
 8004478:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800447a:	2301      	movs	r3, #1
 800447c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800447e:	4b7e      	ldr	r3, [pc, #504]	; (8004678 <HAL_RCC_OscConfig+0x534>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004486:	2b00      	cmp	r3, #0
 8004488:	d118      	bne.n	80044bc <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800448a:	4b7b      	ldr	r3, [pc, #492]	; (8004678 <HAL_RCC_OscConfig+0x534>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a7a      	ldr	r2, [pc, #488]	; (8004678 <HAL_RCC_OscConfig+0x534>)
 8004490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004494:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004496:	f7fc fd71 	bl	8000f7c <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800449e:	f7fc fd6d 	bl	8000f7c <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e169      	b.n	8004784 <HAL_RCC_OscConfig+0x640>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b0:	4b71      	ldr	r3, [pc, #452]	; (8004678 <HAL_RCC_OscConfig+0x534>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0f0      	beq.n	800449e <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d106      	bne.n	80044d2 <HAL_RCC_OscConfig+0x38e>
 80044c4:	4b6a      	ldr	r3, [pc, #424]	; (8004670 <HAL_RCC_OscConfig+0x52c>)
 80044c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c8:	4a69      	ldr	r2, [pc, #420]	; (8004670 <HAL_RCC_OscConfig+0x52c>)
 80044ca:	f043 0301 	orr.w	r3, r3, #1
 80044ce:	6713      	str	r3, [r2, #112]	; 0x70
 80044d0:	e01c      	b.n	800450c <HAL_RCC_OscConfig+0x3c8>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	2b05      	cmp	r3, #5
 80044d8:	d10c      	bne.n	80044f4 <HAL_RCC_OscConfig+0x3b0>
 80044da:	4b65      	ldr	r3, [pc, #404]	; (8004670 <HAL_RCC_OscConfig+0x52c>)
 80044dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044de:	4a64      	ldr	r2, [pc, #400]	; (8004670 <HAL_RCC_OscConfig+0x52c>)
 80044e0:	f043 0304 	orr.w	r3, r3, #4
 80044e4:	6713      	str	r3, [r2, #112]	; 0x70
 80044e6:	4b62      	ldr	r3, [pc, #392]	; (8004670 <HAL_RCC_OscConfig+0x52c>)
 80044e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ea:	4a61      	ldr	r2, [pc, #388]	; (8004670 <HAL_RCC_OscConfig+0x52c>)
 80044ec:	f043 0301 	orr.w	r3, r3, #1
 80044f0:	6713      	str	r3, [r2, #112]	; 0x70
 80044f2:	e00b      	b.n	800450c <HAL_RCC_OscConfig+0x3c8>
 80044f4:	4b5e      	ldr	r3, [pc, #376]	; (8004670 <HAL_RCC_OscConfig+0x52c>)
 80044f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f8:	4a5d      	ldr	r2, [pc, #372]	; (8004670 <HAL_RCC_OscConfig+0x52c>)
 80044fa:	f023 0301 	bic.w	r3, r3, #1
 80044fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004500:	4b5b      	ldr	r3, [pc, #364]	; (8004670 <HAL_RCC_OscConfig+0x52c>)
 8004502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004504:	4a5a      	ldr	r2, [pc, #360]	; (8004670 <HAL_RCC_OscConfig+0x52c>)
 8004506:	f023 0304 	bic.w	r3, r3, #4
 800450a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d015      	beq.n	8004540 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004514:	f7fc fd32 	bl	8000f7c <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451a:	e00a      	b.n	8004532 <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800451c:	f7fc fd2e 	bl	8000f7c <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	f241 3288 	movw	r2, #5000	; 0x1388
 800452a:	4293      	cmp	r3, r2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e128      	b.n	8004784 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004532:	4b4f      	ldr	r3, [pc, #316]	; (8004670 <HAL_RCC_OscConfig+0x52c>)
 8004534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0ee      	beq.n	800451c <HAL_RCC_OscConfig+0x3d8>
 800453e:	e014      	b.n	800456a <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004540:	f7fc fd1c 	bl	8000f7c <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004546:	e00a      	b.n	800455e <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004548:	f7fc fd18 	bl	8000f7c <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	f241 3288 	movw	r2, #5000	; 0x1388
 8004556:	4293      	cmp	r3, r2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e112      	b.n	8004784 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800455e:	4b44      	ldr	r3, [pc, #272]	; (8004670 <HAL_RCC_OscConfig+0x52c>)
 8004560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1ee      	bne.n	8004548 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800456a:	7dfb      	ldrb	r3, [r7, #23]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d105      	bne.n	800457c <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004570:	4b3f      	ldr	r3, [pc, #252]	; (8004670 <HAL_RCC_OscConfig+0x52c>)
 8004572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004574:	4a3e      	ldr	r2, [pc, #248]	; (8004670 <HAL_RCC_OscConfig+0x52c>)
 8004576:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800457a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00c      	beq.n	800459e <HAL_RCC_OscConfig+0x45a>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d008      	beq.n	800459e <HAL_RCC_OscConfig+0x45a>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	2b02      	cmp	r3, #2
 8004592:	d004      	beq.n	800459e <HAL_RCC_OscConfig+0x45a>
 8004594:	f240 11cf 	movw	r1, #463	; 0x1cf
 8004598:	4836      	ldr	r0, [pc, #216]	; (8004674 <HAL_RCC_OscConfig+0x530>)
 800459a:	f7fc fb32 	bl	8000c02 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f000 80ed 	beq.w	8004782 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045a8:	4b31      	ldr	r3, [pc, #196]	; (8004670 <HAL_RCC_OscConfig+0x52c>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 030c 	and.w	r3, r3, #12
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	f000 80ae 	beq.w	8004712 <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	f040 8092 	bne.w	80046e4 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d009      	beq.n	80045dc <HAL_RCC_OscConfig+0x498>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	69db      	ldr	r3, [r3, #28]
 80045cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045d0:	d004      	beq.n	80045dc <HAL_RCC_OscConfig+0x498>
 80045d2:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80045d6:	4827      	ldr	r0, [pc, #156]	; (8004674 <HAL_RCC_OscConfig+0x530>)
 80045d8:	f7fc fb13 	bl	8000c02 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	2b3f      	cmp	r3, #63	; 0x3f
 80045e2:	d904      	bls.n	80045ee <HAL_RCC_OscConfig+0x4aa>
 80045e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80045e8:	4822      	ldr	r0, [pc, #136]	; (8004674 <HAL_RCC_OscConfig+0x530>)
 80045ea:	f7fc fb0a 	bl	8000c02 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	2b31      	cmp	r3, #49	; 0x31
 80045f4:	d904      	bls.n	8004600 <HAL_RCC_OscConfig+0x4bc>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80045fe:	d904      	bls.n	800460a <HAL_RCC_OscConfig+0x4c6>
 8004600:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8004604:	481b      	ldr	r0, [pc, #108]	; (8004674 <HAL_RCC_OscConfig+0x530>)
 8004606:	f7fc fafc 	bl	8000c02 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460e:	2b02      	cmp	r3, #2
 8004610:	d010      	beq.n	8004634 <HAL_RCC_OscConfig+0x4f0>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004616:	2b04      	cmp	r3, #4
 8004618:	d00c      	beq.n	8004634 <HAL_RCC_OscConfig+0x4f0>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461e:	2b06      	cmp	r3, #6
 8004620:	d008      	beq.n	8004634 <HAL_RCC_OscConfig+0x4f0>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004626:	2b08      	cmp	r3, #8
 8004628:	d004      	beq.n	8004634 <HAL_RCC_OscConfig+0x4f0>
 800462a:	f240 11db 	movw	r1, #475	; 0x1db
 800462e:	4811      	ldr	r0, [pc, #68]	; (8004674 <HAL_RCC_OscConfig+0x530>)
 8004630:	f7fc fae7 	bl	8000c02 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	2b01      	cmp	r3, #1
 800463a:	d903      	bls.n	8004644 <HAL_RCC_OscConfig+0x500>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	2b0f      	cmp	r3, #15
 8004642:	d904      	bls.n	800464e <HAL_RCC_OscConfig+0x50a>
 8004644:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8004648:	480a      	ldr	r0, [pc, #40]	; (8004674 <HAL_RCC_OscConfig+0x530>)
 800464a:	f7fc fada 	bl	8000c02 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800464e:	4b0b      	ldr	r3, [pc, #44]	; (800467c <HAL_RCC_OscConfig+0x538>)
 8004650:	2200      	movs	r2, #0
 8004652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004654:	f7fc fc92 	bl	8000f7c <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800465a:	e011      	b.n	8004680 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800465c:	f7fc fc8e 	bl	8000f7c <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d90a      	bls.n	8004680 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e08a      	b.n	8004784 <HAL_RCC_OscConfig+0x640>
 800466e:	bf00      	nop
 8004670:	40023800 	.word	0x40023800
 8004674:	08008c04 	.word	0x08008c04
 8004678:	40007000 	.word	0x40007000
 800467c:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004680:	4b42      	ldr	r3, [pc, #264]	; (800478c <HAL_RCC_OscConfig+0x648>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1e7      	bne.n	800465c <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	69da      	ldr	r2, [r3, #28]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	431a      	orrs	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469a:	019b      	lsls	r3, r3, #6
 800469c:	431a      	orrs	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a2:	085b      	lsrs	r3, r3, #1
 80046a4:	3b01      	subs	r3, #1
 80046a6:	041b      	lsls	r3, r3, #16
 80046a8:	431a      	orrs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ae:	061b      	lsls	r3, r3, #24
 80046b0:	4936      	ldr	r1, [pc, #216]	; (800478c <HAL_RCC_OscConfig+0x648>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046b6:	4b36      	ldr	r3, [pc, #216]	; (8004790 <HAL_RCC_OscConfig+0x64c>)
 80046b8:	2201      	movs	r2, #1
 80046ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046bc:	f7fc fc5e 	bl	8000f7c <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046c4:	f7fc fc5a 	bl	8000f7c <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e056      	b.n	8004784 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d6:	4b2d      	ldr	r3, [pc, #180]	; (800478c <HAL_RCC_OscConfig+0x648>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0f0      	beq.n	80046c4 <HAL_RCC_OscConfig+0x580>
 80046e2:	e04e      	b.n	8004782 <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e4:	4b2a      	ldr	r3, [pc, #168]	; (8004790 <HAL_RCC_OscConfig+0x64c>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ea:	f7fc fc47 	bl	8000f7c <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046f2:	f7fc fc43 	bl	8000f7c <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e03f      	b.n	8004784 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004704:	4b21      	ldr	r3, [pc, #132]	; (800478c <HAL_RCC_OscConfig+0x648>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1f0      	bne.n	80046f2 <HAL_RCC_OscConfig+0x5ae>
 8004710:	e037      	b.n	8004782 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d101      	bne.n	800471e <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e032      	b.n	8004784 <HAL_RCC_OscConfig+0x640>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800471e:	4b1b      	ldr	r3, [pc, #108]	; (800478c <HAL_RCC_OscConfig+0x648>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d028      	beq.n	800477e <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004736:	429a      	cmp	r2, r3
 8004738:	d121      	bne.n	800477e <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004744:	429a      	cmp	r2, r3
 8004746:	d11a      	bne.n	800477e <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800474e:	4013      	ands	r3, r2
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004754:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004756:	4293      	cmp	r3, r2
 8004758:	d111      	bne.n	800477e <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004764:	085b      	lsrs	r3, r3, #1
 8004766:	3b01      	subs	r3, #1
 8004768:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800476a:	429a      	cmp	r2, r3
 800476c:	d107      	bne.n	800477e <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004778:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800477a:	429a      	cmp	r2, r3
 800477c:	d001      	beq.n	8004782 <HAL_RCC_OscConfig+0x63e>
#endif
        {
          return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <HAL_RCC_OscConfig+0x640>
        }
      }
    }
  }
  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	40023800 	.word	0x40023800
 8004790:	42470060 	.word	0x42470060

08004794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e174      	b.n	8004a92 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x24>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b0f      	cmp	r3, #15
 80047b6:	d904      	bls.n	80047c2 <HAL_RCC_ClockConfig+0x2e>
 80047b8:	f44f 7117 	mov.w	r1, #604	; 0x25c
 80047bc:	487b      	ldr	r0, [pc, #492]	; (80049ac <HAL_RCC_ClockConfig+0x218>)
 80047be:	f7fc fa20 	bl	8000c02 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d019      	beq.n	80047fc <HAL_RCC_ClockConfig+0x68>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d016      	beq.n	80047fc <HAL_RCC_ClockConfig+0x68>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d013      	beq.n	80047fc <HAL_RCC_ClockConfig+0x68>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	2b03      	cmp	r3, #3
 80047d8:	d010      	beq.n	80047fc <HAL_RCC_ClockConfig+0x68>
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b04      	cmp	r3, #4
 80047de:	d00d      	beq.n	80047fc <HAL_RCC_ClockConfig+0x68>
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	2b05      	cmp	r3, #5
 80047e4:	d00a      	beq.n	80047fc <HAL_RCC_ClockConfig+0x68>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b06      	cmp	r3, #6
 80047ea:	d007      	beq.n	80047fc <HAL_RCC_ClockConfig+0x68>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	2b07      	cmp	r3, #7
 80047f0:	d004      	beq.n	80047fc <HAL_RCC_ClockConfig+0x68>
 80047f2:	f240 215d 	movw	r1, #605	; 0x25d
 80047f6:	486d      	ldr	r0, [pc, #436]	; (80049ac <HAL_RCC_ClockConfig+0x218>)
 80047f8:	f7fc fa03 	bl	8000c02 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047fc:	4b6c      	ldr	r3, [pc, #432]	; (80049b0 <HAL_RCC_ClockConfig+0x21c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	429a      	cmp	r2, r3
 8004808:	d90c      	bls.n	8004824 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800480a:	4b69      	ldr	r3, [pc, #420]	; (80049b0 <HAL_RCC_ClockConfig+0x21c>)
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	b2d2      	uxtb	r2, r2
 8004810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004812:	4b67      	ldr	r3, [pc, #412]	; (80049b0 <HAL_RCC_ClockConfig+0x21c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	429a      	cmp	r2, r3
 800481e:	d001      	beq.n	8004824 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e136      	b.n	8004a92 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d049      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b00      	cmp	r3, #0
 800483a:	d005      	beq.n	8004848 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800483c:	4b5d      	ldr	r3, [pc, #372]	; (80049b4 <HAL_RCC_ClockConfig+0x220>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	4a5c      	ldr	r2, [pc, #368]	; (80049b4 <HAL_RCC_ClockConfig+0x220>)
 8004842:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004846:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0308 	and.w	r3, r3, #8
 8004850:	2b00      	cmp	r3, #0
 8004852:	d005      	beq.n	8004860 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004854:	4b57      	ldr	r3, [pc, #348]	; (80049b4 <HAL_RCC_ClockConfig+0x220>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	4a56      	ldr	r2, [pc, #344]	; (80049b4 <HAL_RCC_ClockConfig+0x220>)
 800485a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800485e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d024      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x11e>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	2b80      	cmp	r3, #128	; 0x80
 800486e:	d020      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x11e>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	2b90      	cmp	r3, #144	; 0x90
 8004876:	d01c      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x11e>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	2ba0      	cmp	r3, #160	; 0xa0
 800487e:	d018      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x11e>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	2bb0      	cmp	r3, #176	; 0xb0
 8004886:	d014      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x11e>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	2bc0      	cmp	r3, #192	; 0xc0
 800488e:	d010      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x11e>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	2bd0      	cmp	r3, #208	; 0xd0
 8004896:	d00c      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x11e>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	2be0      	cmp	r3, #224	; 0xe0
 800489e:	d008      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x11e>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	2bf0      	cmp	r3, #240	; 0xf0
 80048a6:	d004      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x11e>
 80048a8:	f44f 7120 	mov.w	r1, #640	; 0x280
 80048ac:	483f      	ldr	r0, [pc, #252]	; (80049ac <HAL_RCC_ClockConfig+0x218>)
 80048ae:	f7fc f9a8 	bl	8000c02 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048b2:	4b40      	ldr	r3, [pc, #256]	; (80049b4 <HAL_RCC_ClockConfig+0x220>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	493d      	ldr	r1, [pc, #244]	; (80049b4 <HAL_RCC_ClockConfig+0x220>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d059      	beq.n	8004984 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d010      	beq.n	80048fa <HAL_RCC_ClockConfig+0x166>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d00c      	beq.n	80048fa <HAL_RCC_ClockConfig+0x166>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d008      	beq.n	80048fa <HAL_RCC_ClockConfig+0x166>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	2b03      	cmp	r3, #3
 80048ee:	d004      	beq.n	80048fa <HAL_RCC_ClockConfig+0x166>
 80048f0:	f240 2187 	movw	r1, #647	; 0x287
 80048f4:	482d      	ldr	r0, [pc, #180]	; (80049ac <HAL_RCC_ClockConfig+0x218>)
 80048f6:	f7fc f984 	bl	8000c02 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d107      	bne.n	8004912 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004902:	4b2c      	ldr	r3, [pc, #176]	; (80049b4 <HAL_RCC_ClockConfig+0x220>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d119      	bne.n	8004942 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e0bf      	b.n	8004a92 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2b02      	cmp	r3, #2
 8004918:	d003      	beq.n	8004922 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800491e:	2b03      	cmp	r3, #3
 8004920:	d107      	bne.n	8004932 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004922:	4b24      	ldr	r3, [pc, #144]	; (80049b4 <HAL_RCC_ClockConfig+0x220>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d109      	bne.n	8004942 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e0af      	b.n	8004a92 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004932:	4b20      	ldr	r3, [pc, #128]	; (80049b4 <HAL_RCC_ClockConfig+0x220>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e0a7      	b.n	8004a92 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004942:	4b1c      	ldr	r3, [pc, #112]	; (80049b4 <HAL_RCC_ClockConfig+0x220>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f023 0203 	bic.w	r2, r3, #3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	4919      	ldr	r1, [pc, #100]	; (80049b4 <HAL_RCC_ClockConfig+0x220>)
 8004950:	4313      	orrs	r3, r2
 8004952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004954:	f7fc fb12 	bl	8000f7c <HAL_GetTick>
 8004958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800495a:	e00a      	b.n	8004972 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800495c:	f7fc fb0e 	bl	8000f7c <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	f241 3288 	movw	r2, #5000	; 0x1388
 800496a:	4293      	cmp	r3, r2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e08f      	b.n	8004a92 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004972:	4b10      	ldr	r3, [pc, #64]	; (80049b4 <HAL_RCC_ClockConfig+0x220>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 020c 	and.w	r2, r3, #12
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	429a      	cmp	r2, r3
 8004982:	d1eb      	bne.n	800495c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004984:	4b0a      	ldr	r3, [pc, #40]	; (80049b0 <HAL_RCC_ClockConfig+0x21c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d212      	bcs.n	80049b8 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004992:	4b07      	ldr	r3, [pc, #28]	; (80049b0 <HAL_RCC_ClockConfig+0x21c>)
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	b2d2      	uxtb	r2, r2
 8004998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800499a:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <HAL_RCC_ClockConfig+0x21c>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0307 	and.w	r3, r3, #7
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d007      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e072      	b.n	8004a92 <HAL_RCC_ClockConfig+0x2fe>
 80049ac:	08008c04 	.word	0x08008c04
 80049b0:	40023c00 	.word	0x40023c00
 80049b4:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d025      	beq.n	8004a10 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d018      	beq.n	80049fe <HAL_RCC_ClockConfig+0x26a>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d4:	d013      	beq.n	80049fe <HAL_RCC_ClockConfig+0x26a>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80049de:	d00e      	beq.n	80049fe <HAL_RCC_ClockConfig+0x26a>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80049e8:	d009      	beq.n	80049fe <HAL_RCC_ClockConfig+0x26a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80049f2:	d004      	beq.n	80049fe <HAL_RCC_ClockConfig+0x26a>
 80049f4:	f240 21c5 	movw	r1, #709	; 0x2c5
 80049f8:	4828      	ldr	r0, [pc, #160]	; (8004a9c <HAL_RCC_ClockConfig+0x308>)
 80049fa:	f7fc f902 	bl	8000c02 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049fe:	4b28      	ldr	r3, [pc, #160]	; (8004aa0 <HAL_RCC_ClockConfig+0x30c>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	4925      	ldr	r1, [pc, #148]	; (8004aa0 <HAL_RCC_ClockConfig+0x30c>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0308 	and.w	r3, r3, #8
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d026      	beq.n	8004a6a <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d018      	beq.n	8004a56 <HAL_RCC_ClockConfig+0x2c2>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2c:	d013      	beq.n	8004a56 <HAL_RCC_ClockConfig+0x2c2>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004a36:	d00e      	beq.n	8004a56 <HAL_RCC_ClockConfig+0x2c2>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004a40:	d009      	beq.n	8004a56 <HAL_RCC_ClockConfig+0x2c2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004a4a:	d004      	beq.n	8004a56 <HAL_RCC_ClockConfig+0x2c2>
 8004a4c:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8004a50:	4812      	ldr	r0, [pc, #72]	; (8004a9c <HAL_RCC_ClockConfig+0x308>)
 8004a52:	f7fc f8d6 	bl	8000c02 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a56:	4b12      	ldr	r3, [pc, #72]	; (8004aa0 <HAL_RCC_ClockConfig+0x30c>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	490e      	ldr	r1, [pc, #56]	; (8004aa0 <HAL_RCC_ClockConfig+0x30c>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a6a:	f000 f821 	bl	8004ab0 <HAL_RCC_GetSysClockFreq>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	4b0b      	ldr	r3, [pc, #44]	; (8004aa0 <HAL_RCC_ClockConfig+0x30c>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	091b      	lsrs	r3, r3, #4
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	490a      	ldr	r1, [pc, #40]	; (8004aa4 <HAL_RCC_ClockConfig+0x310>)
 8004a7c:	5ccb      	ldrb	r3, [r1, r3]
 8004a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a82:	4a09      	ldr	r2, [pc, #36]	; (8004aa8 <HAL_RCC_ClockConfig+0x314>)
 8004a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a86:	4b09      	ldr	r3, [pc, #36]	; (8004aac <HAL_RCC_ClockConfig+0x318>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fc fa32 	bl	8000ef4 <HAL_InitTick>

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	08008c04 	.word	0x08008c04
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	08008cb4 	.word	0x08008cb4
 8004aa8:	20000000 	.word	0x20000000
 8004aac:	20000004 	.word	0x20000004

08004ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ab0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004ab4:	b084      	sub	sp, #16
 8004ab6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	607b      	str	r3, [r7, #4]
 8004abc:	2300      	movs	r3, #0
 8004abe:	60fb      	str	r3, [r7, #12]
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ac8:	4b67      	ldr	r3, [pc, #412]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f003 030c 	and.w	r3, r3, #12
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d00d      	beq.n	8004af0 <HAL_RCC_GetSysClockFreq+0x40>
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	f200 80bd 	bhi.w	8004c54 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x34>
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d003      	beq.n	8004aea <HAL_RCC_GetSysClockFreq+0x3a>
 8004ae2:	e0b7      	b.n	8004c54 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ae4:	4b61      	ldr	r3, [pc, #388]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004ae6:	60bb      	str	r3, [r7, #8]
       break;
 8004ae8:	e0b7      	b.n	8004c5a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004aea:	4b61      	ldr	r3, [pc, #388]	; (8004c70 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004aec:	60bb      	str	r3, [r7, #8]
      break;
 8004aee:	e0b4      	b.n	8004c5a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004af0:	4b5d      	ldr	r3, [pc, #372]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004af8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004afa:	4b5b      	ldr	r3, [pc, #364]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d04d      	beq.n	8004ba2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b06:	4b58      	ldr	r3, [pc, #352]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	099b      	lsrs	r3, r3, #6
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	f04f 0300 	mov.w	r3, #0
 8004b12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b16:	f04f 0100 	mov.w	r1, #0
 8004b1a:	ea02 0800 	and.w	r8, r2, r0
 8004b1e:	ea03 0901 	and.w	r9, r3, r1
 8004b22:	4640      	mov	r0, r8
 8004b24:	4649      	mov	r1, r9
 8004b26:	f04f 0200 	mov.w	r2, #0
 8004b2a:	f04f 0300 	mov.w	r3, #0
 8004b2e:	014b      	lsls	r3, r1, #5
 8004b30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b34:	0142      	lsls	r2, r0, #5
 8004b36:	4610      	mov	r0, r2
 8004b38:	4619      	mov	r1, r3
 8004b3a:	ebb0 0008 	subs.w	r0, r0, r8
 8004b3e:	eb61 0109 	sbc.w	r1, r1, r9
 8004b42:	f04f 0200 	mov.w	r2, #0
 8004b46:	f04f 0300 	mov.w	r3, #0
 8004b4a:	018b      	lsls	r3, r1, #6
 8004b4c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b50:	0182      	lsls	r2, r0, #6
 8004b52:	1a12      	subs	r2, r2, r0
 8004b54:	eb63 0301 	sbc.w	r3, r3, r1
 8004b58:	f04f 0000 	mov.w	r0, #0
 8004b5c:	f04f 0100 	mov.w	r1, #0
 8004b60:	00d9      	lsls	r1, r3, #3
 8004b62:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b66:	00d0      	lsls	r0, r2, #3
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	eb12 0208 	adds.w	r2, r2, r8
 8004b70:	eb43 0309 	adc.w	r3, r3, r9
 8004b74:	f04f 0000 	mov.w	r0, #0
 8004b78:	f04f 0100 	mov.w	r1, #0
 8004b7c:	0259      	lsls	r1, r3, #9
 8004b7e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004b82:	0250      	lsls	r0, r2, #9
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	4610      	mov	r0, r2
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	f7fb fb20 	bl	80001d8 <__aeabi_uldivmod>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	e04a      	b.n	8004c38 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ba2:	4b31      	ldr	r3, [pc, #196]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	099b      	lsrs	r3, r3, #6
 8004ba8:	461a      	mov	r2, r3
 8004baa:	f04f 0300 	mov.w	r3, #0
 8004bae:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004bb2:	f04f 0100 	mov.w	r1, #0
 8004bb6:	ea02 0400 	and.w	r4, r2, r0
 8004bba:	ea03 0501 	and.w	r5, r3, r1
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	4629      	mov	r1, r5
 8004bc2:	f04f 0200 	mov.w	r2, #0
 8004bc6:	f04f 0300 	mov.w	r3, #0
 8004bca:	014b      	lsls	r3, r1, #5
 8004bcc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004bd0:	0142      	lsls	r2, r0, #5
 8004bd2:	4610      	mov	r0, r2
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	1b00      	subs	r0, r0, r4
 8004bd8:	eb61 0105 	sbc.w	r1, r1, r5
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	018b      	lsls	r3, r1, #6
 8004be6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004bea:	0182      	lsls	r2, r0, #6
 8004bec:	1a12      	subs	r2, r2, r0
 8004bee:	eb63 0301 	sbc.w	r3, r3, r1
 8004bf2:	f04f 0000 	mov.w	r0, #0
 8004bf6:	f04f 0100 	mov.w	r1, #0
 8004bfa:	00d9      	lsls	r1, r3, #3
 8004bfc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c00:	00d0      	lsls	r0, r2, #3
 8004c02:	4602      	mov	r2, r0
 8004c04:	460b      	mov	r3, r1
 8004c06:	1912      	adds	r2, r2, r4
 8004c08:	eb45 0303 	adc.w	r3, r5, r3
 8004c0c:	f04f 0000 	mov.w	r0, #0
 8004c10:	f04f 0100 	mov.w	r1, #0
 8004c14:	0299      	lsls	r1, r3, #10
 8004c16:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004c1a:	0290      	lsls	r0, r2, #10
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	4610      	mov	r0, r2
 8004c22:	4619      	mov	r1, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	461a      	mov	r2, r3
 8004c28:	f04f 0300 	mov.w	r3, #0
 8004c2c:	f7fb fad4 	bl	80001d8 <__aeabi_uldivmod>
 8004c30:	4602      	mov	r2, r0
 8004c32:	460b      	mov	r3, r1
 8004c34:	4613      	mov	r3, r2
 8004c36:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c38:	4b0b      	ldr	r3, [pc, #44]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	0c1b      	lsrs	r3, r3, #16
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	3301      	adds	r3, #1
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c50:	60bb      	str	r3, [r7, #8]
      break;
 8004c52:	e002      	b.n	8004c5a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c54:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004c56:	60bb      	str	r3, [r7, #8]
      break;
 8004c58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c5a:	68bb      	ldr	r3, [r7, #8]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004c66:	bf00      	nop
 8004c68:	40023800 	.word	0x40023800
 8004c6c:	00f42400 	.word	0x00f42400
 8004c70:	007a1200 	.word	0x007a1200

08004c74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c78:	4b03      	ldr	r3, [pc, #12]	; (8004c88 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	20000000 	.word	0x20000000

08004c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c90:	f7ff fff0 	bl	8004c74 <HAL_RCC_GetHCLKFreq>
 8004c94:	4602      	mov	r2, r0
 8004c96:	4b05      	ldr	r3, [pc, #20]	; (8004cac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	0a9b      	lsrs	r3, r3, #10
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	4903      	ldr	r1, [pc, #12]	; (8004cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ca2:	5ccb      	ldrb	r3, [r1, r3]
 8004ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	40023800 	.word	0x40023800
 8004cb0:	08008cc4 	.word	0x08008cc4

08004cb4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b0f      	cmp	r3, #15
 8004cd2:	d904      	bls.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8004cd4:	f640 11d9 	movw	r1, #2521	; 0x9d9
 8004cd8:	489d      	ldr	r0, [pc, #628]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004cda:	f7fb ff92 	bl	8000c02 <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d105      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d060      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d903      	bls.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	2b07      	cmp	r3, #7
 8004d04:	d904      	bls.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004d06:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 8004d0a:	4891      	ldr	r0, [pc, #580]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004d0c:	f7fb ff79 	bl	8000c02 <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	2b31      	cmp	r3, #49	; 0x31
 8004d16:	d904      	bls.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004d20:	d904      	bls.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004d22:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8004d26:	488a      	ldr	r0, [pc, #552]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004d28:	f7fb ff6b 	bl	8000c02 <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d903      	bls.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x88>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	2b3f      	cmp	r3, #63	; 0x3f
 8004d3a:	d904      	bls.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x92>
 8004d3c:	f640 11e3 	movw	r1, #2531	; 0x9e3
 8004d40:	4883      	ldr	r0, [pc, #524]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004d42:	f7fb ff5e 	bl	8000c02 <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d46:	4b83      	ldr	r3, [pc, #524]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d4c:	f7fc f916 	bl	8000f7c <HAL_GetTick>
 8004d50:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d52:	e008      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d54:	f7fc f912 	bl	8000f7c <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e1ae      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d66:	4b7c      	ldr	r3, [pc, #496]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1f0      	bne.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	019b      	lsls	r3, r3, #6
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	071b      	lsls	r3, r3, #28
 8004d84:	4974      	ldr	r1, [pc, #464]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d8c:	4b71      	ldr	r3, [pc, #452]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004d8e:	2201      	movs	r2, #1
 8004d90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d92:	f7fc f8f3 	bl	8000f7c <HAL_GetTick>
 8004d96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d98:	e008      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d9a:	f7fc f8ef 	bl	8000f7c <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d901      	bls.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e18b      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004dac:	4b6a      	ldr	r3, [pc, #424]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0f0      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 8174 	beq.w	80050ae <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dce:	f000 80a6 	beq.w	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dda:	f000 80a0 	beq.w	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	4a5e      	ldr	r2, [pc, #376]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	f000 809a 	beq.w	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	4a5c      	ldr	r2, [pc, #368]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	f000 8094 	beq.w	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	4a5a      	ldr	r2, [pc, #360]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	f000 808e 	beq.w	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	4a58      	ldr	r2, [pc, #352]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	f000 8088 	beq.w	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	4a56      	ldr	r2, [pc, #344]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	f000 8082 	beq.w	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	4a54      	ldr	r2, [pc, #336]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d07c      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	4a52      	ldr	r2, [pc, #328]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d077      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	4a51      	ldr	r2, [pc, #324]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d072      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	4a4f      	ldr	r2, [pc, #316]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d06d      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	4a4e      	ldr	r2, [pc, #312]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d068      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	4a4c      	ldr	r2, [pc, #304]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d063      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	4a4b      	ldr	r2, [pc, #300]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d05e      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	4a49      	ldr	r2, [pc, #292]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d059      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	4a48      	ldr	r2, [pc, #288]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d054      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	4a46      	ldr	r2, [pc, #280]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d04f      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	4a45      	ldr	r2, [pc, #276]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d04a      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	4a43      	ldr	r2, [pc, #268]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d045      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	4a42      	ldr	r2, [pc, #264]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d040      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	4a40      	ldr	r2, [pc, #256]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d03b      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	4a3f      	ldr	r2, [pc, #252]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d036      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	4a3d      	ldr	r2, [pc, #244]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d031      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	4a3c      	ldr	r2, [pc, #240]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d02c      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	4a3a      	ldr	r2, [pc, #232]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d027      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	4a39      	ldr	r2, [pc, #228]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d022      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	4a37      	ldr	r2, [pc, #220]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d01d      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	4a36      	ldr	r2, [pc, #216]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d018      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	4a34      	ldr	r2, [pc, #208]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d013      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	4a33      	ldr	r2, [pc, #204]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d00e      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	4a31      	ldr	r2, [pc, #196]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d009      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	4a30      	ldr	r2, [pc, #192]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d004      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004f14:	f640 2112 	movw	r1, #2578	; 0xa12
 8004f18:	480d      	ldr	r0, [pc, #52]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004f1a:	f7fb fe72 	bl	8000c02 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f1e:	2300      	movs	r3, #0
 8004f20:	60fb      	str	r3, [r7, #12]
 8004f22:	4b0d      	ldr	r3, [pc, #52]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f26:	4a0c      	ldr	r2, [pc, #48]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f2e:	4b0a      	ldr	r3, [pc, #40]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f3a:	4b26      	ldr	r3, [pc, #152]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a25      	ldr	r2, [pc, #148]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f44:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f46:	f7fc f819 	bl	8000f7c <HAL_GetTick>
 8004f4a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f4c:	e04d      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004f4e:	bf00      	nop
 8004f50:	08008c3c 	.word	0x08008c3c
 8004f54:	42470068 	.word	0x42470068
 8004f58:	40023800 	.word	0x40023800
 8004f5c:	00020300 	.word	0x00020300
 8004f60:	00030300 	.word	0x00030300
 8004f64:	00040300 	.word	0x00040300
 8004f68:	00050300 	.word	0x00050300
 8004f6c:	00060300 	.word	0x00060300
 8004f70:	00070300 	.word	0x00070300
 8004f74:	00080300 	.word	0x00080300
 8004f78:	00090300 	.word	0x00090300
 8004f7c:	000a0300 	.word	0x000a0300
 8004f80:	000b0300 	.word	0x000b0300
 8004f84:	000c0300 	.word	0x000c0300
 8004f88:	000d0300 	.word	0x000d0300
 8004f8c:	000e0300 	.word	0x000e0300
 8004f90:	000f0300 	.word	0x000f0300
 8004f94:	00100300 	.word	0x00100300
 8004f98:	00110300 	.word	0x00110300
 8004f9c:	00120300 	.word	0x00120300
 8004fa0:	00130300 	.word	0x00130300
 8004fa4:	00140300 	.word	0x00140300
 8004fa8:	00150300 	.word	0x00150300
 8004fac:	00160300 	.word	0x00160300
 8004fb0:	00170300 	.word	0x00170300
 8004fb4:	00180300 	.word	0x00180300
 8004fb8:	00190300 	.word	0x00190300
 8004fbc:	001a0300 	.word	0x001a0300
 8004fc0:	001b0300 	.word	0x001b0300
 8004fc4:	001c0300 	.word	0x001c0300
 8004fc8:	001d0300 	.word	0x001d0300
 8004fcc:	001e0300 	.word	0x001e0300
 8004fd0:	001f0300 	.word	0x001f0300
 8004fd4:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004fd8:	f7fb ffd0 	bl	8000f7c <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x336>
      {
        return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e06c      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004fea:	4b38      	ldr	r3, [pc, #224]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x418>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0f0      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x324>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ff6:	4b36      	ldr	r3, [pc, #216]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ffe:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d02f      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	429a      	cmp	r2, r3
 8005012:	d028      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005014:	4b2e      	ldr	r3, [pc, #184]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8005016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800501c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800501e:	4b2d      	ldr	r3, [pc, #180]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8005020:	2201      	movs	r2, #1
 8005022:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005024:	4b2b      	ldr	r3, [pc, #172]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8005026:	2200      	movs	r2, #0
 8005028:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800502a:	4a29      	ldr	r2, [pc, #164]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005030:	4b27      	ldr	r3, [pc, #156]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8005032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	2b01      	cmp	r3, #1
 800503a:	d114      	bne.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800503c:	f7fb ff9e 	bl	8000f7c <HAL_GetTick>
 8005040:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005042:	e00a      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005044:	f7fb ff9a 	bl	8000f7c <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005052:	4293      	cmp	r3, r2
 8005054:	d901      	bls.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e034      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x410>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800505a:	4b1d      	ldr	r3, [pc, #116]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800505c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0ee      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x390>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800506e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005072:	d10d      	bne.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8005074:	4b16      	ldr	r3, [pc, #88]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005088:	4911      	ldr	r1, [pc, #68]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800508a:	4313      	orrs	r3, r2
 800508c:	608b      	str	r3, [r1, #8]
 800508e:	e005      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005090:	4b0f      	ldr	r3, [pc, #60]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	4a0e      	ldr	r2, [pc, #56]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8005096:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800509a:	6093      	str	r3, [r2, #8]
 800509c:	4b0c      	ldr	r3, [pc, #48]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800509e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050a8:	4909      	ldr	r1, [pc, #36]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0308 	and.w	r3, r3, #8
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	7d1a      	ldrb	r2, [r3, #20]
 80050be:	4b06      	ldr	r3, [pc, #24]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80050c0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3718      	adds	r7, #24
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	40007000 	.word	0x40007000
 80050d0:	40023800 	.word	0x40023800
 80050d4:	42470e40 	.word	0x42470e40
 80050d8:	424711e0 	.word	0x424711e0

080050dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80050dc:	b480      	push	{r7}
 80050de:	b087      	sub	sp, #28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80050f0:	2300      	movs	r3, #0
 80050f2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d140      	bne.n	800517c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80050fa:	4b24      	ldr	r3, [pc, #144]	; (800518c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005102:	60fb      	str	r3, [r7, #12]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d005      	beq.n	8005116 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d131      	bne.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005110:	4b1f      	ldr	r3, [pc, #124]	; (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005112:	617b      	str	r3, [r7, #20]
          break;
 8005114:	e031      	b.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005116:	4b1d      	ldr	r3, [pc, #116]	; (800518c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800511e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005122:	d109      	bne.n	8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005124:	4b19      	ldr	r3, [pc, #100]	; (800518c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005126:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800512a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800512e:	4a19      	ldr	r2, [pc, #100]	; (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005130:	fbb2 f3f3 	udiv	r3, r2, r3
 8005134:	613b      	str	r3, [r7, #16]
 8005136:	e008      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005138:	4b14      	ldr	r3, [pc, #80]	; (800518c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800513a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800513e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005142:	4a15      	ldr	r2, [pc, #84]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005144:	fbb2 f3f3 	udiv	r3, r2, r3
 8005148:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800514a:	4b10      	ldr	r3, [pc, #64]	; (800518c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800514c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005150:	099b      	lsrs	r3, r3, #6
 8005152:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	fb02 f303 	mul.w	r3, r2, r3
 800515c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800515e:	4b0b      	ldr	r3, [pc, #44]	; (800518c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005164:	0f1b      	lsrs	r3, r3, #28
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005170:	617b      	str	r3, [r7, #20]
          break;
 8005172:	e002      	b.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005174:	2300      	movs	r3, #0
 8005176:	617b      	str	r3, [r7, #20]
          break;
 8005178:	bf00      	nop
        }
      }
      break;
 800517a:	bf00      	nop
    }
  }
  return frequency;
 800517c:	697b      	ldr	r3, [r7, #20]
}
 800517e:	4618      	mov	r0, r3
 8005180:	371c      	adds	r7, #28
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	40023800 	.word	0x40023800
 8005190:	00bb8000 	.word	0x00bb8000
 8005194:	007a1200 	.word	0x007a1200
 8005198:	00f42400 	.word	0x00f42400

0800519c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e18c      	b.n	80054c8 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a75      	ldr	r2, [pc, #468]	; (8005388 <HAL_SPI_Init+0x1ec>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d018      	beq.n	80051ea <HAL_SPI_Init+0x4e>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a73      	ldr	r2, [pc, #460]	; (800538c <HAL_SPI_Init+0x1f0>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d013      	beq.n	80051ea <HAL_SPI_Init+0x4e>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a72      	ldr	r2, [pc, #456]	; (8005390 <HAL_SPI_Init+0x1f4>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00e      	beq.n	80051ea <HAL_SPI_Init+0x4e>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a70      	ldr	r2, [pc, #448]	; (8005394 <HAL_SPI_Init+0x1f8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d009      	beq.n	80051ea <HAL_SPI_Init+0x4e>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a6f      	ldr	r2, [pc, #444]	; (8005398 <HAL_SPI_Init+0x1fc>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d004      	beq.n	80051ea <HAL_SPI_Init+0x4e>
 80051e0:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80051e4:	486d      	ldr	r0, [pc, #436]	; (800539c <HAL_SPI_Init+0x200>)
 80051e6:	f7fb fd0c 	bl	8000c02 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d009      	beq.n	8005206 <HAL_SPI_Init+0x6a>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051fa:	d004      	beq.n	8005206 <HAL_SPI_Init+0x6a>
 80051fc:	f240 1143 	movw	r1, #323	; 0x143
 8005200:	4866      	ldr	r0, [pc, #408]	; (800539c <HAL_SPI_Init+0x200>)
 8005202:	f7fb fcfe 	bl	8000c02 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00e      	beq.n	800522c <HAL_SPI_Init+0x90>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005216:	d009      	beq.n	800522c <HAL_SPI_Init+0x90>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005220:	d004      	beq.n	800522c <HAL_SPI_Init+0x90>
 8005222:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8005226:	485d      	ldr	r0, [pc, #372]	; (800539c <HAL_SPI_Init+0x200>)
 8005228:	f7fb fceb 	bl	8000c02 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005234:	d008      	beq.n	8005248 <HAL_SPI_Init+0xac>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d004      	beq.n	8005248 <HAL_SPI_Init+0xac>
 800523e:	f240 1145 	movw	r1, #325	; 0x145
 8005242:	4856      	ldr	r0, [pc, #344]	; (800539c <HAL_SPI_Init+0x200>)
 8005244:	f7fb fcdd 	bl	8000c02 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005250:	d00d      	beq.n	800526e <HAL_SPI_Init+0xd2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d009      	beq.n	800526e <HAL_SPI_Init+0xd2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005262:	d004      	beq.n	800526e <HAL_SPI_Init+0xd2>
 8005264:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8005268:	484c      	ldr	r0, [pc, #304]	; (800539c <HAL_SPI_Init+0x200>)
 800526a:	f7fb fcca 	bl	8000c02 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d020      	beq.n	80052b8 <HAL_SPI_Init+0x11c>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	2b08      	cmp	r3, #8
 800527c:	d01c      	beq.n	80052b8 <HAL_SPI_Init+0x11c>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	2b10      	cmp	r3, #16
 8005284:	d018      	beq.n	80052b8 <HAL_SPI_Init+0x11c>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	2b18      	cmp	r3, #24
 800528c:	d014      	beq.n	80052b8 <HAL_SPI_Init+0x11c>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	2b20      	cmp	r3, #32
 8005294:	d010      	beq.n	80052b8 <HAL_SPI_Init+0x11c>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	2b28      	cmp	r3, #40	; 0x28
 800529c:	d00c      	beq.n	80052b8 <HAL_SPI_Init+0x11c>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	2b30      	cmp	r3, #48	; 0x30
 80052a4:	d008      	beq.n	80052b8 <HAL_SPI_Init+0x11c>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	2b38      	cmp	r3, #56	; 0x38
 80052ac:	d004      	beq.n	80052b8 <HAL_SPI_Init+0x11c>
 80052ae:	f240 1147 	movw	r1, #327	; 0x147
 80052b2:	483a      	ldr	r0, [pc, #232]	; (800539c <HAL_SPI_Init+0x200>)
 80052b4:	f7fb fca5 	bl	8000c02 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d008      	beq.n	80052d2 <HAL_SPI_Init+0x136>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	2b80      	cmp	r3, #128	; 0x80
 80052c6:	d004      	beq.n	80052d2 <HAL_SPI_Init+0x136>
 80052c8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80052cc:	4833      	ldr	r0, [pc, #204]	; (800539c <HAL_SPI_Init+0x200>)
 80052ce:	f7fb fc98 	bl	8000c02 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d008      	beq.n	80052ec <HAL_SPI_Init+0x150>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052de:	2b10      	cmp	r3, #16
 80052e0:	d004      	beq.n	80052ec <HAL_SPI_Init+0x150>
 80052e2:	f240 1149 	movw	r1, #329	; 0x149
 80052e6:	482d      	ldr	r0, [pc, #180]	; (800539c <HAL_SPI_Init+0x200>)
 80052e8:	f7fb fc8b 	bl	8000c02 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d155      	bne.n	80053a0 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d008      	beq.n	800530e <HAL_SPI_Init+0x172>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	2b02      	cmp	r3, #2
 8005302:	d004      	beq.n	800530e <HAL_SPI_Init+0x172>
 8005304:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8005308:	4824      	ldr	r0, [pc, #144]	; (800539c <HAL_SPI_Init+0x200>)
 800530a:	f7fb fc7a 	bl	8000c02 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d008      	beq.n	8005328 <HAL_SPI_Init+0x18c>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d004      	beq.n	8005328 <HAL_SPI_Init+0x18c>
 800531e:	f240 114d 	movw	r1, #333	; 0x14d
 8005322:	481e      	ldr	r0, [pc, #120]	; (800539c <HAL_SPI_Init+0x200>)
 8005324:	f7fb fc6d 	bl	8000c02 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005330:	d125      	bne.n	800537e <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d05d      	beq.n	80053f6 <HAL_SPI_Init+0x25a>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	2b08      	cmp	r3, #8
 8005340:	d059      	beq.n	80053f6 <HAL_SPI_Init+0x25a>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	2b10      	cmp	r3, #16
 8005348:	d055      	beq.n	80053f6 <HAL_SPI_Init+0x25a>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	2b18      	cmp	r3, #24
 8005350:	d051      	beq.n	80053f6 <HAL_SPI_Init+0x25a>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	69db      	ldr	r3, [r3, #28]
 8005356:	2b20      	cmp	r3, #32
 8005358:	d04d      	beq.n	80053f6 <HAL_SPI_Init+0x25a>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	2b28      	cmp	r3, #40	; 0x28
 8005360:	d049      	beq.n	80053f6 <HAL_SPI_Init+0x25a>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	2b30      	cmp	r3, #48	; 0x30
 8005368:	d045      	beq.n	80053f6 <HAL_SPI_Init+0x25a>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	2b38      	cmp	r3, #56	; 0x38
 8005370:	d041      	beq.n	80053f6 <HAL_SPI_Init+0x25a>
 8005372:	f240 1151 	movw	r1, #337	; 0x151
 8005376:	4809      	ldr	r0, [pc, #36]	; (800539c <HAL_SPI_Init+0x200>)
 8005378:	f7fb fc43 	bl	8000c02 <assert_failed>
 800537c:	e03b      	b.n	80053f6 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	61da      	str	r2, [r3, #28]
 8005384:	e037      	b.n	80053f6 <HAL_SPI_Init+0x25a>
 8005386:	bf00      	nop
 8005388:	40013000 	.word	0x40013000
 800538c:	40003800 	.word	0x40003800
 8005390:	40003c00 	.word	0x40003c00
 8005394:	40013400 	.word	0x40013400
 8005398:	40015000 	.word	0x40015000
 800539c:	08008c78 	.word	0x08008c78
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d020      	beq.n	80053ea <HAL_SPI_Init+0x24e>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	69db      	ldr	r3, [r3, #28]
 80053ac:	2b08      	cmp	r3, #8
 80053ae:	d01c      	beq.n	80053ea <HAL_SPI_Init+0x24e>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	69db      	ldr	r3, [r3, #28]
 80053b4:	2b10      	cmp	r3, #16
 80053b6:	d018      	beq.n	80053ea <HAL_SPI_Init+0x24e>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	69db      	ldr	r3, [r3, #28]
 80053bc:	2b18      	cmp	r3, #24
 80053be:	d014      	beq.n	80053ea <HAL_SPI_Init+0x24e>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	69db      	ldr	r3, [r3, #28]
 80053c4:	2b20      	cmp	r3, #32
 80053c6:	d010      	beq.n	80053ea <HAL_SPI_Init+0x24e>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	69db      	ldr	r3, [r3, #28]
 80053cc:	2b28      	cmp	r3, #40	; 0x28
 80053ce:	d00c      	beq.n	80053ea <HAL_SPI_Init+0x24e>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	2b30      	cmp	r3, #48	; 0x30
 80053d6:	d008      	beq.n	80053ea <HAL_SPI_Init+0x24e>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	69db      	ldr	r3, [r3, #28]
 80053dc:	2b38      	cmp	r3, #56	; 0x38
 80053de:	d004      	beq.n	80053ea <HAL_SPI_Init+0x24e>
 80053e0:	f240 115b 	movw	r1, #347	; 0x15b
 80053e4:	483a      	ldr	r0, [pc, #232]	; (80054d0 <HAL_SPI_Init+0x334>)
 80053e6:	f7fb fc0c 	bl	8000c02 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b00      	cmp	r3, #0
 8005406:	d106      	bne.n	8005416 <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f7fb fc37 	bl	8000c84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2202      	movs	r2, #2
 800541a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800542c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800543e:	431a      	orrs	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005448:	431a      	orrs	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	431a      	orrs	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	431a      	orrs	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	69db      	ldr	r3, [r3, #28]
 800546c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005470:	431a      	orrs	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800547a:	ea42 0103 	orr.w	r1, r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005482:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	430a      	orrs	r2, r1
 800548c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	0c1b      	lsrs	r3, r3, #16
 8005494:	f003 0104 	and.w	r1, r3, #4
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	f003 0210 	and.w	r2, r3, #16
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	430a      	orrs	r2, r1
 80054a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	69da      	ldr	r2, [r3, #28]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	08008c78 	.word	0x08008c78

080054d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054d4:	b084      	sub	sp, #16
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b084      	sub	sp, #16
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	f107 001c 	add.w	r0, r7, #28
 80054e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d122      	bne.n	8005532 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005516:	2b01      	cmp	r3, #1
 8005518:	d105      	bne.n	8005526 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f9a0 	bl	800586c <USB_CoreReset>
 800552c:	4603      	mov	r3, r0
 800552e:	73fb      	strb	r3, [r7, #15]
 8005530:	e01a      	b.n	8005568 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f994 	bl	800586c <USB_CoreReset>
 8005544:	4603      	mov	r3, r0
 8005546:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800554a:	2b00      	cmp	r3, #0
 800554c:	d106      	bne.n	800555c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005552:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	639a      	str	r2, [r3, #56]	; 0x38
 800555a:	e005      	b.n	8005568 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005560:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556a:	2b01      	cmp	r3, #1
 800556c:	d10b      	bne.n	8005586 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f043 0206 	orr.w	r2, r3, #6
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f043 0220 	orr.w	r2, r3, #32
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005586:	7bfb      	ldrb	r3, [r7, #15]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005592:	b004      	add	sp, #16
 8005594:	4770      	bx	lr

08005596 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005596:	b480      	push	{r7}
 8005598:	b083      	sub	sp, #12
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f043 0201 	orr.w	r2, r3, #1
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f023 0201 	bic.w	r2, r3, #1
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b084      	sub	sp, #16
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
 80055e2:	460b      	mov	r3, r1
 80055e4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80055f6:	78fb      	ldrb	r3, [r7, #3]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d115      	bne.n	8005628 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005608:	2001      	movs	r0, #1
 800560a:	f7fb fcc3 	bl	8000f94 <HAL_Delay>
      ms++;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	3301      	adds	r3, #1
 8005612:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f91a 	bl	800584e <USB_GetMode>
 800561a:	4603      	mov	r3, r0
 800561c:	2b01      	cmp	r3, #1
 800561e:	d01e      	beq.n	800565e <USB_SetCurrentMode+0x84>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2b31      	cmp	r3, #49	; 0x31
 8005624:	d9f0      	bls.n	8005608 <USB_SetCurrentMode+0x2e>
 8005626:	e01a      	b.n	800565e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005628:	78fb      	ldrb	r3, [r7, #3]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d115      	bne.n	800565a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800563a:	2001      	movs	r0, #1
 800563c:	f7fb fcaa 	bl	8000f94 <HAL_Delay>
      ms++;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	3301      	adds	r3, #1
 8005644:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f901 	bl	800584e <USB_GetMode>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d005      	beq.n	800565e <USB_SetCurrentMode+0x84>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2b31      	cmp	r3, #49	; 0x31
 8005656:	d9f0      	bls.n	800563a <USB_SetCurrentMode+0x60>
 8005658:	e001      	b.n	800565e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e005      	b.n	800566a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2b32      	cmp	r3, #50	; 0x32
 8005662:	d101      	bne.n	8005668 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e000      	b.n	800566a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
	...

08005674 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800567e:	2300      	movs	r3, #0
 8005680:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	019b      	lsls	r3, r3, #6
 8005686:	f043 0220 	orr.w	r2, r3, #32
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	3301      	adds	r3, #1
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	4a08      	ldr	r2, [pc, #32]	; (80056b8 <USB_FlushTxFifo+0x44>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d901      	bls.n	800569e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e006      	b.n	80056ac <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f003 0320 	and.w	r3, r3, #32
 80056a6:	2b20      	cmp	r3, #32
 80056a8:	d0f1      	beq.n	800568e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	00030d40 	.word	0x00030d40

080056bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056c4:	2300      	movs	r3, #0
 80056c6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2210      	movs	r2, #16
 80056cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	3301      	adds	r3, #1
 80056d2:	60fb      	str	r3, [r7, #12]
 80056d4:	4a08      	ldr	r2, [pc, #32]	; (80056f8 <USB_FlushRxFifo+0x3c>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d901      	bls.n	80056de <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e006      	b.n	80056ec <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	f003 0310 	and.w	r3, r3, #16
 80056e6:	2b10      	cmp	r3, #16
 80056e8:	d0f1      	beq.n	80056ce <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr
 80056f8:	00030d40 	.word	0x00030d40

080056fc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b089      	sub	sp, #36	; 0x24
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	4611      	mov	r1, r2
 8005708:	461a      	mov	r2, r3
 800570a:	460b      	mov	r3, r1
 800570c:	71fb      	strb	r3, [r7, #7]
 800570e:	4613      	mov	r3, r2
 8005710:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800571a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800571e:	2b00      	cmp	r3, #0
 8005720:	d123      	bne.n	800576a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005722:	88bb      	ldrh	r3, [r7, #4]
 8005724:	3303      	adds	r3, #3
 8005726:	089b      	lsrs	r3, r3, #2
 8005728:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800572a:	2300      	movs	r3, #0
 800572c:	61bb      	str	r3, [r7, #24]
 800572e:	e018      	b.n	8005762 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005730:	79fb      	ldrb	r3, [r7, #7]
 8005732:	031a      	lsls	r2, r3, #12
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	4413      	add	r3, r2
 8005738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800573c:	461a      	mov	r2, r3
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	3301      	adds	r3, #1
 8005748:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	3301      	adds	r3, #1
 800574e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	3301      	adds	r3, #1
 8005754:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	3301      	adds	r3, #1
 800575a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	3301      	adds	r3, #1
 8005760:	61bb      	str	r3, [r7, #24]
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	429a      	cmp	r2, r3
 8005768:	d3e2      	bcc.n	8005730 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3724      	adds	r7, #36	; 0x24
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005778:	b480      	push	{r7}
 800577a:	b08b      	sub	sp, #44	; 0x2c
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	4613      	mov	r3, r2
 8005784:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800578e:	88fb      	ldrh	r3, [r7, #6]
 8005790:	089b      	lsrs	r3, r3, #2
 8005792:	b29b      	uxth	r3, r3
 8005794:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005796:	88fb      	ldrh	r3, [r7, #6]
 8005798:	f003 0303 	and.w	r3, r3, #3
 800579c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800579e:	2300      	movs	r3, #0
 80057a0:	623b      	str	r3, [r7, #32]
 80057a2:	e014      	b.n	80057ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	601a      	str	r2, [r3, #0]
    pDest++;
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	3301      	adds	r3, #1
 80057b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80057b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b8:	3301      	adds	r3, #1
 80057ba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	3301      	adds	r3, #1
 80057c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80057c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c4:	3301      	adds	r3, #1
 80057c6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80057c8:	6a3b      	ldr	r3, [r7, #32]
 80057ca:	3301      	adds	r3, #1
 80057cc:	623b      	str	r3, [r7, #32]
 80057ce:	6a3a      	ldr	r2, [r7, #32]
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d3e6      	bcc.n	80057a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80057d6:	8bfb      	ldrh	r3, [r7, #30]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d01e      	beq.n	800581a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80057dc:	2300      	movs	r3, #0
 80057de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057e6:	461a      	mov	r2, r3
 80057e8:	f107 0310 	add.w	r3, r7, #16
 80057ec:	6812      	ldr	r2, [r2, #0]
 80057ee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	6a3b      	ldr	r3, [r7, #32]
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	00db      	lsls	r3, r3, #3
 80057f8:	fa22 f303 	lsr.w	r3, r2, r3
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	701a      	strb	r2, [r3, #0]
      i++;
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	3301      	adds	r3, #1
 8005806:	623b      	str	r3, [r7, #32]
      pDest++;
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	3301      	adds	r3, #1
 800580c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800580e:	8bfb      	ldrh	r3, [r7, #30]
 8005810:	3b01      	subs	r3, #1
 8005812:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005814:	8bfb      	ldrh	r3, [r7, #30]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1ea      	bne.n	80057f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800581c:	4618      	mov	r0, r3
 800581e:	372c      	adds	r7, #44	; 0x2c
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	4013      	ands	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005840:	68fb      	ldr	r3, [r7, #12]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800584e:	b480      	push	{r7}
 8005850:	b083      	sub	sp, #12
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	f003 0301 	and.w	r3, r3, #1
}
 800585e:	4618      	mov	r0, r3
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
	...

0800586c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005874:	2300      	movs	r3, #0
 8005876:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	3301      	adds	r3, #1
 800587c:	60fb      	str	r3, [r7, #12]
 800587e:	4a13      	ldr	r2, [pc, #76]	; (80058cc <USB_CoreReset+0x60>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d901      	bls.n	8005888 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e01a      	b.n	80058be <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	2b00      	cmp	r3, #0
 800588e:	daf3      	bge.n	8005878 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	f043 0201 	orr.w	r2, r3, #1
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	3301      	adds	r3, #1
 80058a4:	60fb      	str	r3, [r7, #12]
 80058a6:	4a09      	ldr	r2, [pc, #36]	; (80058cc <USB_CoreReset+0x60>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d901      	bls.n	80058b0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e006      	b.n	80058be <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d0f1      	beq.n	80058a0 <USB_CoreReset+0x34>

  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3714      	adds	r7, #20
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	00030d40 	.word	0x00030d40

080058d0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058d0:	b084      	sub	sp, #16
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b084      	sub	sp, #16
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
 80058da:	f107 001c 	add.w	r0, r7, #28
 80058de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058ec:	461a      	mov	r2, r3
 80058ee:	2300      	movs	r3, #0
 80058f0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005902:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800591e:	2b00      	cmp	r3, #0
 8005920:	d018      	beq.n	8005954 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	2b01      	cmp	r3, #1
 8005926:	d10a      	bne.n	800593e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005936:	f043 0304 	orr.w	r3, r3, #4
 800593a:	6013      	str	r3, [r2, #0]
 800593c:	e014      	b.n	8005968 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800594c:	f023 0304 	bic.w	r3, r3, #4
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	e009      	b.n	8005968 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005962:	f023 0304 	bic.w	r3, r3, #4
 8005966:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005968:	2110      	movs	r1, #16
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f7ff fe82 	bl	8005674 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7ff fea3 	bl	80056bc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005976:	2300      	movs	r3, #0
 8005978:	60fb      	str	r3, [r7, #12]
 800597a:	e015      	b.n	80059a8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	4413      	add	r3, r2
 8005984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005988:	461a      	mov	r2, r3
 800598a:	f04f 33ff 	mov.w	r3, #4294967295
 800598e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	4413      	add	r3, r2
 8005998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800599c:	461a      	mov	r2, r3
 800599e:	2300      	movs	r3, #0
 80059a0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3301      	adds	r3, #1
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d3e5      	bcc.n	800597c <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f04f 32ff 	mov.w	r2, #4294967295
 80059bc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00b      	beq.n	80059e2 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059d0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a13      	ldr	r2, [pc, #76]	; (8005a24 <USB_HostInit+0x154>)
 80059d6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a13      	ldr	r2, [pc, #76]	; (8005a28 <USB_HostInit+0x158>)
 80059dc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80059e0:	e009      	b.n	80059f6 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2280      	movs	r2, #128	; 0x80
 80059e6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a10      	ldr	r2, [pc, #64]	; (8005a2c <USB_HostInit+0x15c>)
 80059ec:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a0f      	ldr	r2, [pc, #60]	; (8005a30 <USB_HostInit+0x160>)
 80059f2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80059f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d105      	bne.n	8005a08 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	f043 0210 	orr.w	r2, r3, #16
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	699a      	ldr	r2, [r3, #24]
 8005a0c:	4b09      	ldr	r3, [pc, #36]	; (8005a34 <USB_HostInit+0x164>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a20:	b004      	add	sp, #16
 8005a22:	4770      	bx	lr
 8005a24:	01000200 	.word	0x01000200
 8005a28:	00e00300 	.word	0x00e00300
 8005a2c:	00600080 	.word	0x00600080
 8005a30:	004000e0 	.word	0x004000e0
 8005a34:	a3200008 	.word	0xa3200008

08005a38 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	460b      	mov	r3, r1
 8005a42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a56:	f023 0303 	bic.w	r3, r3, #3
 8005a5a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	78fb      	ldrb	r3, [r7, #3]
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	68f9      	ldr	r1, [r7, #12]
 8005a6c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005a70:	4313      	orrs	r3, r2
 8005a72:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005a74:	78fb      	ldrb	r3, [r7, #3]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d107      	bne.n	8005a8a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a80:	461a      	mov	r2, r3
 8005a82:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005a86:	6053      	str	r3, [r2, #4]
 8005a88:	e009      	b.n	8005a9e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005a8a:	78fb      	ldrb	r3, [r7, #3]
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d106      	bne.n	8005a9e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a96:	461a      	mov	r2, r3
 8005a98:	f241 7370 	movw	r3, #6000	; 0x1770
 8005a9c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3714      	adds	r7, #20
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005acc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ada:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005adc:	2064      	movs	r0, #100	; 0x64
 8005ade:	f7fb fa59 	bl	8000f94 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005aea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005aee:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005af0:	200a      	movs	r0, #10
 8005af2:	f7fb fa4f 	bl	8000f94 <HAL_Delay>

  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	460b      	mov	r3, r1
 8005b0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005b10:	2300      	movs	r3, #0
 8005b12:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005b24:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d109      	bne.n	8005b44 <USB_DriveVbus+0x44>
 8005b30:	78fb      	ldrb	r3, [r7, #3]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d106      	bne.n	8005b44 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b42:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b4e:	d109      	bne.n	8005b64 <USB_DriveVbus+0x64>
 8005b50:	78fb      	ldrb	r3, [r7, #3]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d106      	bne.n	8005b64 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b62:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b085      	sub	sp, #20
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	0c5b      	lsrs	r3, r3, #17
 8005b90:	f003 0303 	and.w	r3, r3, #3
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3714      	adds	r7, #20
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	b29b      	uxth	r3, r3
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
	...

08005bc4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b088      	sub	sp, #32
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	4608      	mov	r0, r1
 8005bce:	4611      	mov	r1, r2
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	70fb      	strb	r3, [r7, #3]
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	70bb      	strb	r3, [r7, #2]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005bde:	2300      	movs	r3, #0
 8005be0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005be6:	78fb      	ldrb	r3, [r7, #3]
 8005be8:	015a      	lsls	r2, r3, #5
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	4413      	add	r3, r2
 8005bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8005bf8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005bfa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005bfe:	2b03      	cmp	r3, #3
 8005c00:	d87e      	bhi.n	8005d00 <USB_HC_Init+0x13c>
 8005c02:	a201      	add	r2, pc, #4	; (adr r2, 8005c08 <USB_HC_Init+0x44>)
 8005c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c08:	08005c19 	.word	0x08005c19
 8005c0c:	08005cc3 	.word	0x08005cc3
 8005c10:	08005c19 	.word	0x08005c19
 8005c14:	08005c85 	.word	0x08005c85
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c18:	78fb      	ldrb	r3, [r7, #3]
 8005c1a:	015a      	lsls	r2, r3, #5
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c24:	461a      	mov	r2, r3
 8005c26:	f240 439d 	movw	r3, #1181	; 0x49d
 8005c2a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005c2c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	da10      	bge.n	8005c56 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005c34:	78fb      	ldrb	r3, [r7, #3]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	78fa      	ldrb	r2, [r7, #3]
 8005c44:	0151      	lsls	r1, r2, #5
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	440a      	add	r2, r1
 8005c4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c52:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005c54:	e057      	b.n	8005d06 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d051      	beq.n	8005d06 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005c62:	78fb      	ldrb	r3, [r7, #3]
 8005c64:	015a      	lsls	r2, r3, #5
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	78fa      	ldrb	r2, [r7, #3]
 8005c72:	0151      	lsls	r1, r2, #5
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	440a      	add	r2, r1
 8005c78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c7c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005c80:	60d3      	str	r3, [r2, #12]
      break;
 8005c82:	e040      	b.n	8005d06 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c84:	78fb      	ldrb	r3, [r7, #3]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c90:	461a      	mov	r2, r3
 8005c92:	f240 639d 	movw	r3, #1693	; 0x69d
 8005c96:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005c98:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	da34      	bge.n	8005d0a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ca0:	78fb      	ldrb	r3, [r7, #3]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	78fa      	ldrb	r2, [r7, #3]
 8005cb0:	0151      	lsls	r1, r2, #5
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	440a      	add	r2, r1
 8005cb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cbe:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005cc0:	e023      	b.n	8005d0a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005cc2:	78fb      	ldrb	r3, [r7, #3]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cce:	461a      	mov	r2, r3
 8005cd0:	f240 2325 	movw	r3, #549	; 0x225
 8005cd4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005cd6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	da17      	bge.n	8005d0e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005cde:	78fb      	ldrb	r3, [r7, #3]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	78fa      	ldrb	r2, [r7, #3]
 8005cee:	0151      	lsls	r1, r2, #5
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	440a      	add	r2, r1
 8005cf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cf8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005cfc:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005cfe:	e006      	b.n	8005d0e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	77fb      	strb	r3, [r7, #31]
      break;
 8005d04:	e004      	b.n	8005d10 <USB_HC_Init+0x14c>
      break;
 8005d06:	bf00      	nop
 8005d08:	e002      	b.n	8005d10 <USB_HC_Init+0x14c>
      break;
 8005d0a:	bf00      	nop
 8005d0c:	e000      	b.n	8005d10 <USB_HC_Init+0x14c>
      break;
 8005d0e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d16:	699a      	ldr	r2, [r3, #24]
 8005d18:	78fb      	ldrb	r3, [r7, #3]
 8005d1a:	f003 030f 	and.w	r3, r3, #15
 8005d1e:	2101      	movs	r1, #1
 8005d20:	fa01 f303 	lsl.w	r3, r1, r3
 8005d24:	6939      	ldr	r1, [r7, #16]
 8005d26:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005d3a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	da03      	bge.n	8005d4a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d46:	61bb      	str	r3, [r7, #24]
 8005d48:	e001      	b.n	8005d4e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7ff ff0f 	bl	8005b72 <USB_GetHostSpeed>
 8005d54:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005d56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d106      	bne.n	8005d6c <USB_HC_Init+0x1a8>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d003      	beq.n	8005d6c <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005d64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d68:	617b      	str	r3, [r7, #20]
 8005d6a:	e001      	b.n	8005d70 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d70:	787b      	ldrb	r3, [r7, #1]
 8005d72:	059b      	lsls	r3, r3, #22
 8005d74:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005d78:	78bb      	ldrb	r3, [r7, #2]
 8005d7a:	02db      	lsls	r3, r3, #11
 8005d7c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d80:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005d82:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d86:	049b      	lsls	r3, r3, #18
 8005d88:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005d8c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005d8e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005d90:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005d94:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d9a:	78fb      	ldrb	r3, [r7, #3]
 8005d9c:	0159      	lsls	r1, r3, #5
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	440b      	add	r3, r1
 8005da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005dac:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005dae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005db2:	2b03      	cmp	r3, #3
 8005db4:	d10f      	bne.n	8005dd6 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005db6:	78fb      	ldrb	r3, [r7, #3]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	78fa      	ldrb	r2, [r7, #3]
 8005dc6:	0151      	lsls	r1, r2, #5
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	440a      	add	r2, r1
 8005dcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005dd4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005dd6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3720      	adds	r7, #32
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b08c      	sub	sp, #48	; 0x30
 8005de4:	af02      	add	r7, sp, #8
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	4613      	mov	r3, r2
 8005dec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	785b      	ldrb	r3, [r3, #1]
 8005df6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005df8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005dfc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d02d      	beq.n	8005e66 <USB_HC_StartXfer+0x86>
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	791b      	ldrb	r3, [r3, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d129      	bne.n	8005e66 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005e12:	79fb      	ldrb	r3, [r7, #7]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d117      	bne.n	8005e48 <USB_HC_StartXfer+0x68>
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	79db      	ldrb	r3, [r3, #7]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d003      	beq.n	8005e28 <USB_HC_StartXfer+0x48>
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	79db      	ldrb	r3, [r3, #7]
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d10f      	bne.n	8005e48 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	69fa      	ldr	r2, [r7, #28]
 8005e38:	0151      	lsls	r1, r2, #5
 8005e3a:	6a3a      	ldr	r2, [r7, #32]
 8005e3c:	440a      	add	r2, r1
 8005e3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e46:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005e48:	79fb      	ldrb	r3, [r7, #7]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10b      	bne.n	8005e66 <USB_HC_StartXfer+0x86>
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	795b      	ldrb	r3, [r3, #5]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d107      	bne.n	8005e66 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	785b      	ldrb	r3, [r3, #1]
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 fa2f 	bl	80062c0 <USB_DoPing>
      return HAL_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	e0f8      	b.n	8006058 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d018      	beq.n	8005ea0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	8912      	ldrh	r2, [r2, #8]
 8005e76:	4413      	add	r3, r2
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	8912      	ldrh	r2, [r2, #8]
 8005e7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e82:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005e84:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005e86:	8b7b      	ldrh	r3, [r7, #26]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d90b      	bls.n	8005ea4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005e8c:	8b7b      	ldrh	r3, [r7, #26]
 8005e8e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005e90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	8912      	ldrh	r2, [r2, #8]
 8005e96:	fb02 f203 	mul.w	r2, r2, r3
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	611a      	str	r2, [r3, #16]
 8005e9e:	e001      	b.n	8005ea4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	78db      	ldrb	r3, [r3, #3]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d007      	beq.n	8005ebc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005eac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	8912      	ldrh	r2, [r2, #8]
 8005eb2:	fb02 f203 	mul.w	r2, r2, r3
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	611a      	str	r2, [r3, #16]
 8005eba:	e003      	b.n	8005ec4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	695a      	ldr	r2, [r3, #20]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005ecc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ece:	04d9      	lsls	r1, r3, #19
 8005ed0:	4b63      	ldr	r3, [pc, #396]	; (8006060 <USB_HC_StartXfer+0x280>)
 8005ed2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ed4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	7a9b      	ldrb	r3, [r3, #10]
 8005eda:	075b      	lsls	r3, r3, #29
 8005edc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ee0:	69f9      	ldr	r1, [r7, #28]
 8005ee2:	0148      	lsls	r0, r1, #5
 8005ee4:	6a39      	ldr	r1, [r7, #32]
 8005ee6:	4401      	add	r1, r0
 8005ee8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005eec:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005eee:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005ef0:	79fb      	ldrb	r3, [r7, #7]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d009      	beq.n	8005f0a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	68d9      	ldr	r1, [r3, #12]
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	6a3b      	ldr	r3, [r7, #32]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f06:	460a      	mov	r2, r1
 8005f08:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	bf0c      	ite	eq
 8005f1a:	2301      	moveq	r3, #1
 8005f1c:	2300      	movne	r3, #0
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	015a      	lsls	r2, r3, #5
 8005f26:	6a3b      	ldr	r3, [r7, #32]
 8005f28:	4413      	add	r3, r2
 8005f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	69fa      	ldr	r2, [r7, #28]
 8005f32:	0151      	lsls	r1, r2, #5
 8005f34:	6a3a      	ldr	r2, [r7, #32]
 8005f36:	440a      	add	r2, r1
 8005f38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f3c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005f40:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	015a      	lsls	r2, r3, #5
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	7e7b      	ldrb	r3, [r7, #25]
 8005f52:	075b      	lsls	r3, r3, #29
 8005f54:	69f9      	ldr	r1, [r7, #28]
 8005f56:	0148      	lsls	r0, r1, #5
 8005f58:	6a39      	ldr	r1, [r7, #32]
 8005f5a:	4401      	add	r1, r0
 8005f5c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005f60:	4313      	orrs	r3, r2
 8005f62:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	015a      	lsls	r2, r3, #5
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f7a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	78db      	ldrb	r3, [r3, #3]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d004      	beq.n	8005f8e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f8a:	613b      	str	r3, [r7, #16]
 8005f8c:	e003      	b.n	8005f96 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f94:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f9c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	015a      	lsls	r2, r3, #5
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005faa:	461a      	mov	r2, r3
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005fb0:	79fb      	ldrb	r3, [r7, #7]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	e04e      	b.n	8006058 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	78db      	ldrb	r3, [r3, #3]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d149      	bne.n	8006056 <USB_HC_StartXfer+0x276>
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d045      	beq.n	8006056 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	79db      	ldrb	r3, [r3, #7]
 8005fce:	2b03      	cmp	r3, #3
 8005fd0:	d830      	bhi.n	8006034 <USB_HC_StartXfer+0x254>
 8005fd2:	a201      	add	r2, pc, #4	; (adr r2, 8005fd8 <USB_HC_StartXfer+0x1f8>)
 8005fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd8:	08005fe9 	.word	0x08005fe9
 8005fdc:	0800600d 	.word	0x0800600d
 8005fe0:	08005fe9 	.word	0x08005fe9
 8005fe4:	0800600d 	.word	0x0800600d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	3303      	adds	r3, #3
 8005fee:	089b      	lsrs	r3, r3, #2
 8005ff0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005ff2:	8afa      	ldrh	r2, [r7, #22]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d91c      	bls.n	8006038 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	f043 0220 	orr.w	r2, r3, #32
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	619a      	str	r2, [r3, #24]
        }
        break;
 800600a:	e015      	b.n	8006038 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	695b      	ldr	r3, [r3, #20]
 8006010:	3303      	adds	r3, #3
 8006012:	089b      	lsrs	r3, r3, #2
 8006014:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006016:	8afa      	ldrh	r2, [r7, #22]
 8006018:	6a3b      	ldr	r3, [r7, #32]
 800601a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	b29b      	uxth	r3, r3
 8006022:	429a      	cmp	r2, r3
 8006024:	d90a      	bls.n	800603c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	619a      	str	r2, [r3, #24]
        }
        break;
 8006032:	e003      	b.n	800603c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006034:	bf00      	nop
 8006036:	e002      	b.n	800603e <USB_HC_StartXfer+0x25e>
        break;
 8006038:	bf00      	nop
 800603a:	e000      	b.n	800603e <USB_HC_StartXfer+0x25e>
        break;
 800603c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	68d9      	ldr	r1, [r3, #12]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	785a      	ldrb	r2, [r3, #1]
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	b29b      	uxth	r3, r3
 800604c:	2000      	movs	r0, #0
 800604e:	9000      	str	r0, [sp, #0]
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f7ff fb53 	bl	80056fc <USB_WritePacket>
  }

  return HAL_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3728      	adds	r7, #40	; 0x28
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	1ff80000 	.word	0x1ff80000

08006064 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	b29b      	uxth	r3, r3
}
 800607a:	4618      	mov	r0, r3
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006086:	b480      	push	{r7}
 8006088:	b089      	sub	sp, #36	; 0x24
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
 800608e:	460b      	mov	r3, r1
 8006090:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8006096:	78fb      	ldrb	r3, [r7, #3]
 8006098:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800609a:	2300      	movs	r3, #0
 800609c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	015a      	lsls	r2, r3, #5
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	4413      	add	r3, r2
 80060a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	0c9b      	lsrs	r3, r3, #18
 80060ae:	f003 0303 	and.w	r3, r3, #3
 80060b2:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	0fdb      	lsrs	r3, r3, #31
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f003 0320 	and.w	r3, r3, #32
 80060d2:	2b20      	cmp	r3, #32
 80060d4:	d104      	bne.n	80060e0 <USB_HC_Halt+0x5a>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d101      	bne.n	80060e0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80060dc:	2300      	movs	r3, #0
 80060de:	e0e8      	b.n	80062b2 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d002      	beq.n	80060ec <USB_HC_Halt+0x66>
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d173      	bne.n	80061d4 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	0151      	lsls	r1, r2, #5
 80060fe:	69ba      	ldr	r2, [r7, #24]
 8006100:	440a      	add	r2, r1
 8006102:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006106:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800610a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f003 0320 	and.w	r3, r3, #32
 8006114:	2b00      	cmp	r3, #0
 8006116:	f040 80cb 	bne.w	80062b0 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d143      	bne.n	80061ae <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	015a      	lsls	r2, r3, #5
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	4413      	add	r3, r2
 800612e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	0151      	lsls	r1, r2, #5
 8006138:	69ba      	ldr	r2, [r7, #24]
 800613a:	440a      	add	r2, r1
 800613c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006140:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006144:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	4413      	add	r3, r2
 800614e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	0151      	lsls	r1, r2, #5
 8006158:	69ba      	ldr	r2, [r7, #24]
 800615a:	440a      	add	r2, r1
 800615c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006164:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	4413      	add	r3, r2
 800616e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	0151      	lsls	r1, r2, #5
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	440a      	add	r2, r1
 800617c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006180:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006184:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	3301      	adds	r3, #1
 800618a:	61fb      	str	r3, [r7, #28]
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006192:	d81d      	bhi.n	80061d0 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	4413      	add	r3, r2
 800619c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061aa:	d0ec      	beq.n	8006186 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80061ac:	e080      	b.n	80062b0 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	0151      	lsls	r1, r2, #5
 80061c0:	69ba      	ldr	r2, [r7, #24]
 80061c2:	440a      	add	r2, r1
 80061c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061cc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80061ce:	e06f      	b.n	80062b0 <USB_HC_Halt+0x22a>
            break;
 80061d0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80061d2:	e06d      	b.n	80062b0 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	0151      	lsls	r1, r2, #5
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	440a      	add	r2, r1
 80061ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061f2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d143      	bne.n	800628c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	4413      	add	r3, r2
 800620c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	0151      	lsls	r1, r2, #5
 8006216:	69ba      	ldr	r2, [r7, #24]
 8006218:	440a      	add	r2, r1
 800621a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800621e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006222:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	4413      	add	r3, r2
 800622c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	0151      	lsls	r1, r2, #5
 8006236:	69ba      	ldr	r2, [r7, #24]
 8006238:	440a      	add	r2, r1
 800623a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800623e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006242:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	015a      	lsls	r2, r3, #5
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	4413      	add	r3, r2
 800624c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	0151      	lsls	r1, r2, #5
 8006256:	69ba      	ldr	r2, [r7, #24]
 8006258:	440a      	add	r2, r1
 800625a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800625e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006262:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	3301      	adds	r3, #1
 8006268:	61fb      	str	r3, [r7, #28]
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006270:	d81d      	bhi.n	80062ae <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	4413      	add	r3, r2
 800627a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006284:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006288:	d0ec      	beq.n	8006264 <USB_HC_Halt+0x1de>
 800628a:	e011      	b.n	80062b0 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	4413      	add	r3, r2
 8006294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	0151      	lsls	r1, r2, #5
 800629e:	69ba      	ldr	r2, [r7, #24]
 80062a0:	440a      	add	r2, r1
 80062a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062aa:	6013      	str	r3, [r2, #0]
 80062ac:	e000      	b.n	80062b0 <USB_HC_Halt+0x22a>
          break;
 80062ae:	bf00      	nop
    }
  }

  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3724      	adds	r7, #36	; 0x24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
	...

080062c0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b087      	sub	sp, #28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	460b      	mov	r3, r1
 80062ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80062d0:	78fb      	ldrb	r3, [r7, #3]
 80062d2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80062d4:	2301      	movs	r3, #1
 80062d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	04da      	lsls	r2, r3, #19
 80062dc:	4b15      	ldr	r3, [pc, #84]	; (8006334 <USB_DoPing+0x74>)
 80062de:	4013      	ands	r3, r2
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	0151      	lsls	r1, r2, #5
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	440a      	add	r2, r1
 80062e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062f0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006308:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006310:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	4413      	add	r3, r2
 800631a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800631e:	461a      	mov	r2, r3
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	371c      	adds	r7, #28
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	1ff80000 	.word	0x1ff80000

08006338 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006344:	2300      	movs	r3, #0
 8006346:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f7ff f935 	bl	80055b8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800634e:	2110      	movs	r1, #16
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f7ff f98f 	bl	8005674 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f7ff f9b0 	bl	80056bc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800635c:	2300      	movs	r3, #0
 800635e:	613b      	str	r3, [r7, #16]
 8006360:	e01f      	b.n	80063a2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	015a      	lsls	r2, r3, #5
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	4413      	add	r3, r2
 800636a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006378:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006380:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006388:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	4413      	add	r3, r2
 8006392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006396:	461a      	mov	r2, r3
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	3301      	adds	r3, #1
 80063a0:	613b      	str	r3, [r7, #16]
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	2b0f      	cmp	r3, #15
 80063a6:	d9dc      	bls.n	8006362 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80063a8:	2300      	movs	r3, #0
 80063aa:	613b      	str	r3, [r7, #16]
 80063ac:	e034      	b.n	8006418 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	015a      	lsls	r2, r3, #5
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	4413      	add	r3, r2
 80063b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063c4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063cc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063d4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063e2:	461a      	mov	r2, r3
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	3301      	adds	r3, #1
 80063ec:	617b      	str	r3, [r7, #20]
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063f4:	d80c      	bhi.n	8006410 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006408:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800640c:	d0ec      	beq.n	80063e8 <USB_StopHost+0xb0>
 800640e:	e000      	b.n	8006412 <USB_StopHost+0xda>
        break;
 8006410:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	3301      	adds	r3, #1
 8006416:	613b      	str	r3, [r7, #16]
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	2b0f      	cmp	r3, #15
 800641c:	d9c7      	bls.n	80063ae <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006424:	461a      	mov	r2, r3
 8006426:	f04f 33ff 	mov.w	r3, #4294967295
 800642a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f04f 32ff 	mov.w	r2, #4294967295
 8006432:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f7ff f8ae 	bl	8005596 <USB_EnableGlobalInt>

  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3718      	adds	r7, #24
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006444:	b590      	push	{r4, r7, lr}
 8006446:	b089      	sub	sp, #36	; 0x24
 8006448:	af04      	add	r7, sp, #16
 800644a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800644c:	2301      	movs	r3, #1
 800644e:	2202      	movs	r2, #2
 8006450:	2102      	movs	r1, #2
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fc66 	bl	8006d24 <USBH_FindInterface>
 8006458:	4603      	mov	r3, r0
 800645a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800645c:	7bfb      	ldrb	r3, [r7, #15]
 800645e:	2bff      	cmp	r3, #255	; 0xff
 8006460:	d002      	beq.n	8006468 <USBH_CDC_InterfaceInit+0x24>
 8006462:	7bfb      	ldrb	r3, [r7, #15]
 8006464:	2b01      	cmp	r3, #1
 8006466:	d901      	bls.n	800646c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006468:	2302      	movs	r3, #2
 800646a:	e13d      	b.n	80066e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800646c:	7bfb      	ldrb	r3, [r7, #15]
 800646e:	4619      	mov	r1, r3
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fc3b 	bl	8006cec <USBH_SelectInterface>
 8006476:	4603      	mov	r3, r0
 8006478:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800647a:	7bbb      	ldrb	r3, [r7, #14]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d001      	beq.n	8006484 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006480:	2302      	movs	r3, #2
 8006482:	e131      	b.n	80066e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800648a:	2050      	movs	r0, #80	; 0x50
 800648c:	f002 fa00 	bl	8008890 <malloc>
 8006490:	4603      	mov	r3, r0
 8006492:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800649a:	69db      	ldr	r3, [r3, #28]
 800649c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80064a4:	2302      	movs	r3, #2
 80064a6:	e11f      	b.n	80066e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80064a8:	2250      	movs	r2, #80	; 0x50
 80064aa:	2100      	movs	r1, #0
 80064ac:	68b8      	ldr	r0, [r7, #8]
 80064ae:	f002 fa0d 	bl	80088cc <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80064b2:	7bfb      	ldrb	r3, [r7, #15]
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	211a      	movs	r1, #26
 80064b8:	fb01 f303 	mul.w	r3, r1, r3
 80064bc:	4413      	add	r3, r2
 80064be:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	b25b      	sxtb	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	da15      	bge.n	80064f6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80064ca:	7bfb      	ldrb	r3, [r7, #15]
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	211a      	movs	r1, #26
 80064d0:	fb01 f303 	mul.w	r3, r1, r3
 80064d4:	4413      	add	r3, r2
 80064d6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80064da:	781a      	ldrb	r2, [r3, #0]
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80064e0:	7bfb      	ldrb	r3, [r7, #15]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	211a      	movs	r1, #26
 80064e6:	fb01 f303 	mul.w	r3, r1, r3
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80064f0:	881a      	ldrh	r2, [r3, #0]
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	785b      	ldrb	r3, [r3, #1]
 80064fa:	4619      	mov	r1, r3
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f001 fe32 	bl	8008166 <USBH_AllocPipe>
 8006502:	4603      	mov	r3, r0
 8006504:	461a      	mov	r2, r3
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	7819      	ldrb	r1, [r3, #0]
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	7858      	ldrb	r0, [r3, #1]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	8952      	ldrh	r2, [r2, #10]
 8006522:	9202      	str	r2, [sp, #8]
 8006524:	2203      	movs	r2, #3
 8006526:	9201      	str	r2, [sp, #4]
 8006528:	9300      	str	r3, [sp, #0]
 800652a:	4623      	mov	r3, r4
 800652c:	4602      	mov	r2, r0
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f001 fdea 	bl	8008108 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	2200      	movs	r2, #0
 800653a:	4619      	mov	r1, r3
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f002 f8f9 	bl	8008734 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006542:	2300      	movs	r3, #0
 8006544:	2200      	movs	r2, #0
 8006546:	210a      	movs	r1, #10
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fbeb 	bl	8006d24 <USBH_FindInterface>
 800654e:	4603      	mov	r3, r0
 8006550:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006552:	7bfb      	ldrb	r3, [r7, #15]
 8006554:	2bff      	cmp	r3, #255	; 0xff
 8006556:	d002      	beq.n	800655e <USBH_CDC_InterfaceInit+0x11a>
 8006558:	7bfb      	ldrb	r3, [r7, #15]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d901      	bls.n	8006562 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800655e:	2302      	movs	r3, #2
 8006560:	e0c2      	b.n	80066e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006562:	7bfb      	ldrb	r3, [r7, #15]
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	211a      	movs	r1, #26
 8006568:	fb01 f303 	mul.w	r3, r1, r3
 800656c:	4413      	add	r3, r2
 800656e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	b25b      	sxtb	r3, r3
 8006576:	2b00      	cmp	r3, #0
 8006578:	da16      	bge.n	80065a8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800657a:	7bfb      	ldrb	r3, [r7, #15]
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	211a      	movs	r1, #26
 8006580:	fb01 f303 	mul.w	r3, r1, r3
 8006584:	4413      	add	r3, r2
 8006586:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800658a:	781a      	ldrb	r2, [r3, #0]
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006590:	7bfb      	ldrb	r3, [r7, #15]
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	211a      	movs	r1, #26
 8006596:	fb01 f303 	mul.w	r3, r1, r3
 800659a:	4413      	add	r3, r2
 800659c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80065a0:	881a      	ldrh	r2, [r3, #0]
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	835a      	strh	r2, [r3, #26]
 80065a6:	e015      	b.n	80065d4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80065a8:	7bfb      	ldrb	r3, [r7, #15]
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	211a      	movs	r1, #26
 80065ae:	fb01 f303 	mul.w	r3, r1, r3
 80065b2:	4413      	add	r3, r2
 80065b4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80065b8:	781a      	ldrb	r2, [r3, #0]
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80065be:	7bfb      	ldrb	r3, [r7, #15]
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	211a      	movs	r1, #26
 80065c4:	fb01 f303 	mul.w	r3, r1, r3
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80065ce:	881a      	ldrh	r2, [r3, #0]
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80065d4:	7bfb      	ldrb	r3, [r7, #15]
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	211a      	movs	r1, #26
 80065da:	fb01 f303 	mul.w	r3, r1, r3
 80065de:	4413      	add	r3, r2
 80065e0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	b25b      	sxtb	r3, r3
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	da16      	bge.n	800661a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	211a      	movs	r1, #26
 80065f2:	fb01 f303 	mul.w	r3, r1, r3
 80065f6:	4413      	add	r3, r2
 80065f8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80065fc:	781a      	ldrb	r2, [r3, #0]
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006602:	7bfb      	ldrb	r3, [r7, #15]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	211a      	movs	r1, #26
 8006608:	fb01 f303 	mul.w	r3, r1, r3
 800660c:	4413      	add	r3, r2
 800660e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006612:	881a      	ldrh	r2, [r3, #0]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	835a      	strh	r2, [r3, #26]
 8006618:	e015      	b.n	8006646 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800661a:	7bfb      	ldrb	r3, [r7, #15]
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	211a      	movs	r1, #26
 8006620:	fb01 f303 	mul.w	r3, r1, r3
 8006624:	4413      	add	r3, r2
 8006626:	f203 3356 	addw	r3, r3, #854	; 0x356
 800662a:	781a      	ldrb	r2, [r3, #0]
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006630:	7bfb      	ldrb	r3, [r7, #15]
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	211a      	movs	r1, #26
 8006636:	fb01 f303 	mul.w	r3, r1, r3
 800663a:	4413      	add	r3, r2
 800663c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006640:	881a      	ldrh	r2, [r3, #0]
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	7b9b      	ldrb	r3, [r3, #14]
 800664a:	4619      	mov	r1, r3
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f001 fd8a 	bl	8008166 <USBH_AllocPipe>
 8006652:	4603      	mov	r3, r0
 8006654:	461a      	mov	r2, r3
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	7bdb      	ldrb	r3, [r3, #15]
 800665e:	4619      	mov	r1, r3
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f001 fd80 	bl	8008166 <USBH_AllocPipe>
 8006666:	4603      	mov	r3, r0
 8006668:	461a      	mov	r2, r3
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	7b59      	ldrb	r1, [r3, #13]
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	7b98      	ldrb	r0, [r3, #14]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	8b12      	ldrh	r2, [r2, #24]
 8006686:	9202      	str	r2, [sp, #8]
 8006688:	2202      	movs	r2, #2
 800668a:	9201      	str	r2, [sp, #4]
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	4623      	mov	r3, r4
 8006690:	4602      	mov	r2, r0
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f001 fd38 	bl	8008108 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	7b19      	ldrb	r1, [r3, #12]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	7bd8      	ldrb	r0, [r3, #15]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	8b52      	ldrh	r2, [r2, #26]
 80066b0:	9202      	str	r2, [sp, #8]
 80066b2:	2202      	movs	r2, #2
 80066b4:	9201      	str	r2, [sp, #4]
 80066b6:	9300      	str	r3, [sp, #0]
 80066b8:	4623      	mov	r3, r4
 80066ba:	4602      	mov	r2, r0
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f001 fd23 	bl	8008108 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	7b5b      	ldrb	r3, [r3, #13]
 80066ce:	2200      	movs	r2, #0
 80066d0:	4619      	mov	r1, r3
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f002 f82e 	bl	8008734 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	7b1b      	ldrb	r3, [r3, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	4619      	mov	r1, r3
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f002 f827 	bl	8008734 <USBH_LL_SetToggle>

  return USBH_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd90      	pop	{r4, r7, pc}

080066f0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066fe:	69db      	ldr	r3, [r3, #28]
 8006700:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00e      	beq.n	8006728 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	4619      	mov	r1, r3
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f001 fd18 	bl	8008146 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	4619      	mov	r1, r3
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f001 fd43 	bl	80081a8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	7b1b      	ldrb	r3, [r3, #12]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00e      	beq.n	800674e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	7b1b      	ldrb	r3, [r3, #12]
 8006734:	4619      	mov	r1, r3
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f001 fd05 	bl	8008146 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	7b1b      	ldrb	r3, [r3, #12]
 8006740:	4619      	mov	r1, r3
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f001 fd30 	bl	80081a8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	7b5b      	ldrb	r3, [r3, #13]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00e      	beq.n	8006774 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	7b5b      	ldrb	r3, [r3, #13]
 800675a:	4619      	mov	r1, r3
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f001 fcf2 	bl	8008146 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	7b5b      	ldrb	r3, [r3, #13]
 8006766:	4619      	mov	r1, r3
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f001 fd1d 	bl	80081a8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800677a:	69db      	ldr	r3, [r3, #28]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00b      	beq.n	8006798 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006786:	69db      	ldr	r3, [r3, #28]
 8006788:	4618      	mov	r0, r3
 800678a:	f002 f889 	bl	80088a0 <free>
    phost->pActiveClass->pData = 0U;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006794:	2200      	movs	r2, #0
 8006796:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b084      	sub	sp, #16
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067b0:	69db      	ldr	r3, [r3, #28]
 80067b2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	3340      	adds	r3, #64	; 0x40
 80067b8:	4619      	mov	r1, r3
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f8b1 	bl	8006922 <GetLineCoding>
 80067c0:	4603      	mov	r3, r0
 80067c2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80067c4:	7afb      	ldrb	r3, [r7, #11]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d105      	bne.n	80067d6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80067d0:	2102      	movs	r1, #2
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80067d6:	7afb      	ldrb	r3, [r7, #11]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80067e8:	2301      	movs	r3, #1
 80067ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80067ec:	2300      	movs	r3, #0
 80067ee:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067f6:	69db      	ldr	r3, [r3, #28]
 80067f8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006800:	2b04      	cmp	r3, #4
 8006802:	d877      	bhi.n	80068f4 <USBH_CDC_Process+0x114>
 8006804:	a201      	add	r2, pc, #4	; (adr r2, 800680c <USBH_CDC_Process+0x2c>)
 8006806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680a:	bf00      	nop
 800680c:	08006821 	.word	0x08006821
 8006810:	08006827 	.word	0x08006827
 8006814:	08006857 	.word	0x08006857
 8006818:	080068cb 	.word	0x080068cb
 800681c:	080068d9 	.word	0x080068d9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006820:	2300      	movs	r3, #0
 8006822:	73fb      	strb	r3, [r7, #15]
      break;
 8006824:	e06d      	b.n	8006902 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800682a:	4619      	mov	r1, r3
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 f897 	bl	8006960 <SetLineCoding>
 8006832:	4603      	mov	r3, r0
 8006834:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006836:	7bbb      	ldrb	r3, [r7, #14]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d104      	bne.n	8006846 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	2202      	movs	r2, #2
 8006840:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006844:	e058      	b.n	80068f8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006846:	7bbb      	ldrb	r3, [r7, #14]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d055      	beq.n	80068f8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	2204      	movs	r2, #4
 8006850:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006854:	e050      	b.n	80068f8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	3340      	adds	r3, #64	; 0x40
 800685a:	4619      	mov	r1, r3
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 f860 	bl	8006922 <GetLineCoding>
 8006862:	4603      	mov	r3, r0
 8006864:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006866:	7bbb      	ldrb	r3, [r7, #14]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d126      	bne.n	80068ba <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800687e:	791b      	ldrb	r3, [r3, #4]
 8006880:	429a      	cmp	r2, r3
 8006882:	d13b      	bne.n	80068fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800688e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006890:	429a      	cmp	r2, r3
 8006892:	d133      	bne.n	80068fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800689e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d12b      	bne.n	80068fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ac:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d124      	bne.n	80068fc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f958 	bl	8006b68 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80068b8:	e020      	b.n	80068fc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80068ba:	7bbb      	ldrb	r3, [r7, #14]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d01d      	beq.n	80068fc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	2204      	movs	r2, #4
 80068c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80068c8:	e018      	b.n	80068fc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f867 	bl	800699e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f8da 	bl	8006a8a <CDC_ProcessReception>
      break;
 80068d6:	e014      	b.n	8006902 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80068d8:	2100      	movs	r1, #0
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 ffe3 	bl	80078a6 <USBH_ClrFeature>
 80068e0:	4603      	mov	r3, r0
 80068e2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80068e4:	7bbb      	ldrb	r3, [r7, #14]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d10a      	bne.n	8006900 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80068f2:	e005      	b.n	8006900 <USBH_CDC_Process+0x120>

    default:
      break;
 80068f4:	bf00      	nop
 80068f6:	e004      	b.n	8006902 <USBH_CDC_Process+0x122>
      break;
 80068f8:	bf00      	nop
 80068fa:	e002      	b.n	8006902 <USBH_CDC_Process+0x122>
      break;
 80068fc:	bf00      	nop
 80068fe:	e000      	b.n	8006902 <USBH_CDC_Process+0x122>
      break;
 8006900:	bf00      	nop

  }

  return status;
 8006902:	7bfb      	ldrb	r3, [r7, #15]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b082      	sub	sp, #8
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
 800692a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	22a1      	movs	r2, #161	; 0xa1
 8006930:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2221      	movs	r2, #33	; 0x21
 8006936:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2207      	movs	r2, #7
 8006948:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2207      	movs	r2, #7
 800694e:	4619      	mov	r1, r3
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f001 f988 	bl	8007c66 <USBH_CtlReq>
 8006956:	4603      	mov	r3, r0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3708      	adds	r7, #8
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2221      	movs	r2, #33	; 0x21
 800696e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2220      	movs	r2, #32
 8006974:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2207      	movs	r2, #7
 8006986:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	2207      	movs	r2, #7
 800698c:	4619      	mov	r1, r3
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f001 f969 	bl	8007c66 <USBH_CtlReq>
 8006994:	4603      	mov	r3, r0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3708      	adds	r7, #8
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b086      	sub	sp, #24
 80069a2:	af02      	add	r7, sp, #8
 80069a4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80069b0:	2300      	movs	r3, #0
 80069b2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d002      	beq.n	80069c4 <CDC_ProcessTransmission+0x26>
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d023      	beq.n	8006a0a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80069c2:	e05e      	b.n	8006a82 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	8b12      	ldrh	r2, [r2, #24]
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d90b      	bls.n	80069e8 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	69d9      	ldr	r1, [r3, #28]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	8b1a      	ldrh	r2, [r3, #24]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	7b5b      	ldrb	r3, [r3, #13]
 80069dc:	2001      	movs	r0, #1
 80069de:	9000      	str	r0, [sp, #0]
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f001 fb4e 	bl	8008082 <USBH_BulkSendData>
 80069e6:	e00b      	b.n	8006a00 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	7b5b      	ldrb	r3, [r3, #13]
 80069f6:	2001      	movs	r0, #1
 80069f8:	9000      	str	r0, [sp, #0]
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f001 fb41 	bl	8008082 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2202      	movs	r2, #2
 8006a04:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006a08:	e03b      	b.n	8006a82 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	7b5b      	ldrb	r3, [r3, #13]
 8006a0e:	4619      	mov	r1, r3
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f001 fe65 	bl	80086e0 <USBH_LL_GetURBState>
 8006a16:	4603      	mov	r3, r0
 8006a18:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006a1a:	7afb      	ldrb	r3, [r7, #11]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d128      	bne.n	8006a72 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	8b12      	ldrh	r2, [r2, #24]
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d90e      	bls.n	8006a4a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	8b12      	ldrh	r2, [r2, #24]
 8006a34:	1a9a      	subs	r2, r3, r2
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	69db      	ldr	r3, [r3, #28]
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	8b12      	ldrh	r2, [r2, #24]
 8006a42:	441a      	add	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	61da      	str	r2, [r3, #28]
 8006a48:	e002      	b.n	8006a50 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d004      	beq.n	8006a62 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006a60:	e00e      	b.n	8006a80 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f868 	bl	8006b40 <USBH_CDC_TransmitCallback>
      break;
 8006a70:	e006      	b.n	8006a80 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006a72:	7afb      	ldrb	r3, [r7, #11]
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d103      	bne.n	8006a80 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006a80:	bf00      	nop
  }
}
 8006a82:	bf00      	nop
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b086      	sub	sp, #24
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a98:	69db      	ldr	r3, [r3, #28]
 8006a9a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006aa6:	2b03      	cmp	r3, #3
 8006aa8:	d002      	beq.n	8006ab0 <CDC_ProcessReception+0x26>
 8006aaa:	2b04      	cmp	r3, #4
 8006aac:	d00e      	beq.n	8006acc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006aae:	e043      	b.n	8006b38 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	6a19      	ldr	r1, [r3, #32]
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	8b5a      	ldrh	r2, [r3, #26]
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	7b1b      	ldrb	r3, [r3, #12]
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f001 fb05 	bl	80080cc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	2204      	movs	r2, #4
 8006ac6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006aca:	e035      	b.n	8006b38 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	7b1b      	ldrb	r3, [r3, #12]
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f001 fe04 	bl	80086e0 <USBH_LL_GetURBState>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006adc:	7cfb      	ldrb	r3, [r7, #19]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d129      	bne.n	8006b36 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	7b1b      	ldrb	r3, [r3, #12]
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f001 fd67 	bl	80085bc <USBH_LL_GetLastXferSize>
 8006aee:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d016      	beq.n	8006b28 <CDC_ProcessReception+0x9e>
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	8b5b      	ldrh	r3, [r3, #26]
 8006afe:	461a      	mov	r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d910      	bls.n	8006b28 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	1ad2      	subs	r2, r2, r3
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	6a1a      	ldr	r2, [r3, #32]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	441a      	add	r2, r3
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	2203      	movs	r2, #3
 8006b22:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006b26:	e006      	b.n	8006b36 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f80f 	bl	8006b54 <USBH_CDC_ReceiveCallback>
      break;
 8006b36:	bf00      	nop
  }
}
 8006b38:	bf00      	nop
 8006b3a:	3718      	adds	r7, #24
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	4613      	mov	r3, r2
 8006b88:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d101      	bne.n	8006b94 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006b90:	2302      	movs	r3, #2
 8006b92:	e029      	b.n	8006be8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	79fa      	ldrb	r2, [r7, #7]
 8006b98:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f000 f81f 	bl	8006bf0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d003      	beq.n	8006be0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f001 fc37 	bl	8008454 <USBH_LL_Init>

  return USBH_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	60fb      	str	r3, [r7, #12]
 8006c00:	e009      	b.n	8006c16 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	33e0      	adds	r3, #224	; 0xe0
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4413      	add	r3, r2
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	3301      	adds	r3, #1
 8006c14:	60fb      	str	r3, [r7, #12]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2b0e      	cmp	r3, #14
 8006c1a:	d9f2      	bls.n	8006c02 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	60fb      	str	r3, [r7, #12]
 8006c20:	e009      	b.n	8006c36 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	4413      	add	r3, r2
 8006c28:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	3301      	adds	r3, #1
 8006c34:	60fb      	str	r3, [r7, #12]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c3c:	d3f1      	bcc.n	8006c22 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2240      	movs	r2, #64	; 0x40
 8006c62:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3714      	adds	r7, #20
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d016      	beq.n	8006cda <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10e      	bne.n	8006cd4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006cbc:	1c59      	adds	r1, r3, #1
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	33de      	adds	r3, #222	; 0xde
 8006cc8:	6839      	ldr	r1, [r7, #0]
 8006cca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	73fb      	strb	r3, [r7, #15]
 8006cd2:	e004      	b.n	8006cde <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	73fb      	strb	r3, [r7, #15]
 8006cd8:	e001      	b.n	8006cde <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006cda:	2302      	movs	r3, #2
 8006cdc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006d02:	78fa      	ldrb	r2, [r7, #3]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d204      	bcs.n	8006d12 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	78fa      	ldrb	r2, [r7, #3]
 8006d0c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006d10:	e001      	b.n	8006d16 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006d12:	2302      	movs	r3, #2
 8006d14:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3714      	adds	r7, #20
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b087      	sub	sp, #28
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	4608      	mov	r0, r1
 8006d2e:	4611      	mov	r1, r2
 8006d30:	461a      	mov	r2, r3
 8006d32:	4603      	mov	r3, r0
 8006d34:	70fb      	strb	r3, [r7, #3]
 8006d36:	460b      	mov	r3, r1
 8006d38:	70bb      	strb	r3, [r7, #2]
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006d42:	2300      	movs	r3, #0
 8006d44:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006d4c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006d4e:	e025      	b.n	8006d9c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006d50:	7dfb      	ldrb	r3, [r7, #23]
 8006d52:	221a      	movs	r2, #26
 8006d54:	fb02 f303 	mul.w	r3, r2, r3
 8006d58:	3308      	adds	r3, #8
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	3302      	adds	r3, #2
 8006d60:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	795b      	ldrb	r3, [r3, #5]
 8006d66:	78fa      	ldrb	r2, [r7, #3]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d002      	beq.n	8006d72 <USBH_FindInterface+0x4e>
 8006d6c:	78fb      	ldrb	r3, [r7, #3]
 8006d6e:	2bff      	cmp	r3, #255	; 0xff
 8006d70:	d111      	bne.n	8006d96 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006d76:	78ba      	ldrb	r2, [r7, #2]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d002      	beq.n	8006d82 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006d7c:	78bb      	ldrb	r3, [r7, #2]
 8006d7e:	2bff      	cmp	r3, #255	; 0xff
 8006d80:	d109      	bne.n	8006d96 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006d86:	787a      	ldrb	r2, [r7, #1]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d002      	beq.n	8006d92 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006d8c:	787b      	ldrb	r3, [r7, #1]
 8006d8e:	2bff      	cmp	r3, #255	; 0xff
 8006d90:	d101      	bne.n	8006d96 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006d92:	7dfb      	ldrb	r3, [r7, #23]
 8006d94:	e006      	b.n	8006da4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006d96:	7dfb      	ldrb	r3, [r7, #23]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006d9c:	7dfb      	ldrb	r3, [r7, #23]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d9d6      	bls.n	8006d50 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006da2:	23ff      	movs	r3, #255	; 0xff
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	371c      	adds	r7, #28
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f001 fb87 	bl	80084cc <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006dbe:	2101      	movs	r1, #1
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f001 fca0 	bl	8008706 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b088      	sub	sp, #32
 8006dd4:	af04      	add	r7, sp, #16
 8006dd6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006dd8:	2302      	movs	r3, #2
 8006dda:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d102      	bne.n	8006df2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2203      	movs	r2, #3
 8006df0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	2b0b      	cmp	r3, #11
 8006dfa:	f200 81b3 	bhi.w	8007164 <USBH_Process+0x394>
 8006dfe:	a201      	add	r2, pc, #4	; (adr r2, 8006e04 <USBH_Process+0x34>)
 8006e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e04:	08006e35 	.word	0x08006e35
 8006e08:	08006e67 	.word	0x08006e67
 8006e0c:	08006ecf 	.word	0x08006ecf
 8006e10:	080070ff 	.word	0x080070ff
 8006e14:	08007165 	.word	0x08007165
 8006e18:	08006f73 	.word	0x08006f73
 8006e1c:	080070a5 	.word	0x080070a5
 8006e20:	08006fa9 	.word	0x08006fa9
 8006e24:	08006fc9 	.word	0x08006fc9
 8006e28:	08006fe9 	.word	0x08006fe9
 8006e2c:	08007017 	.word	0x08007017
 8006e30:	080070e7 	.word	0x080070e7
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f000 8193 	beq.w	8007168 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2201      	movs	r2, #1
 8006e46:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006e48:	20c8      	movs	r0, #200	; 0xc8
 8006e4a:	f001 fca3 	bl	8008794 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f001 fb99 	bl	8008586 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006e64:	e180      	b.n	8007168 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d107      	bne.n	8006e80 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2202      	movs	r2, #2
 8006e7c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006e7e:	e182      	b.n	8007186 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006e86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e8a:	d914      	bls.n	8006eb6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006e92:	3301      	adds	r3, #1
 8006e94:	b2da      	uxtb	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006ea2:	2b03      	cmp	r3, #3
 8006ea4:	d903      	bls.n	8006eae <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	220d      	movs	r2, #13
 8006eaa:	701a      	strb	r2, [r3, #0]
      break;
 8006eac:	e16b      	b.n	8007186 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	701a      	strb	r2, [r3, #0]
      break;
 8006eb4:	e167      	b.n	8007186 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006ebc:	f103 020a 	add.w	r2, r3, #10
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006ec6:	200a      	movs	r0, #10
 8006ec8:	f001 fc64 	bl	8008794 <USBH_Delay>
      break;
 8006ecc:	e15b      	b.n	8007186 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d005      	beq.n	8006ee4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ede:	2104      	movs	r1, #4
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006ee4:	2064      	movs	r0, #100	; 0x64
 8006ee6:	f001 fc55 	bl	8008794 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f001 fb24 	bl	8008538 <USBH_LL_GetSpeed>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2205      	movs	r2, #5
 8006efe:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006f00:	2100      	movs	r1, #0
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f001 f92f 	bl	8008166 <USBH_AllocPipe>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006f10:	2180      	movs	r1, #128	; 0x80
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f001 f927 	bl	8008166 <USBH_AllocPipe>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	7919      	ldrb	r1, [r3, #4]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006f34:	b292      	uxth	r2, r2
 8006f36:	9202      	str	r2, [sp, #8]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	9201      	str	r2, [sp, #4]
 8006f3c:	9300      	str	r3, [sp, #0]
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2280      	movs	r2, #128	; 0x80
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f001 f8e0 	bl	8008108 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	7959      	ldrb	r1, [r3, #5]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006f5c:	b292      	uxth	r2, r2
 8006f5e:	9202      	str	r2, [sp, #8]
 8006f60:	2200      	movs	r2, #0
 8006f62:	9201      	str	r2, [sp, #4]
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	4603      	mov	r3, r0
 8006f68:	2200      	movs	r2, #0
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f001 f8cc 	bl	8008108 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006f70:	e109      	b.n	8007186 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f90c 	bl	8007190 <USBH_HandleEnum>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006f7c:	7bbb      	ldrb	r3, [r7, #14]
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f040 80f3 	bne.w	800716c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d103      	bne.n	8006fa0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2208      	movs	r2, #8
 8006f9c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006f9e:	e0e5      	b.n	800716c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2207      	movs	r2, #7
 8006fa4:	701a      	strb	r2, [r3, #0]
      break;
 8006fa6:	e0e1      	b.n	800716c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f000 80de 	beq.w	8007170 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006fba:	2101      	movs	r1, #1
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2208      	movs	r2, #8
 8006fc4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006fc6:	e0d3      	b.n	8007170 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fc20 	bl	8007818 <USBH_SetCfg>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f040 80ca 	bne.w	8007174 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2209      	movs	r2, #9
 8006fe4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006fe6:	e0c5      	b.n	8007174 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006fee:	f003 0320 	and.w	r3, r3, #32
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00b      	beq.n	800700e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006ff6:	2101      	movs	r1, #1
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fc30 	bl	800785e <USBH_SetFeature>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	f040 80b9 	bne.w	8007178 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	220a      	movs	r2, #10
 800700a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800700c:	e0b4      	b.n	8007178 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	220a      	movs	r2, #10
 8007012:	701a      	strb	r2, [r3, #0]
      break;
 8007014:	e0b0      	b.n	8007178 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 80ad 	beq.w	800717c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800702a:	2300      	movs	r3, #0
 800702c:	73fb      	strb	r3, [r7, #15]
 800702e:	e016      	b.n	800705e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007030:	7bfa      	ldrb	r2, [r7, #15]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	32de      	adds	r2, #222	; 0xde
 8007036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800703a:	791a      	ldrb	r2, [r3, #4]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007042:	429a      	cmp	r2, r3
 8007044:	d108      	bne.n	8007058 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007046:	7bfa      	ldrb	r2, [r7, #15]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	32de      	adds	r2, #222	; 0xde
 800704c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007056:	e005      	b.n	8007064 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007058:	7bfb      	ldrb	r3, [r7, #15]
 800705a:	3301      	adds	r3, #1
 800705c:	73fb      	strb	r3, [r7, #15]
 800705e:	7bfb      	ldrb	r3, [r7, #15]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d0e5      	beq.n	8007030 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800706a:	2b00      	cmp	r3, #0
 800706c:	d016      	beq.n	800709c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	4798      	blx	r3
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d109      	bne.n	8007094 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2206      	movs	r2, #6
 8007084:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800708c:	2103      	movs	r1, #3
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007092:	e073      	b.n	800717c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	220d      	movs	r2, #13
 8007098:	701a      	strb	r2, [r3, #0]
      break;
 800709a:	e06f      	b.n	800717c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	220d      	movs	r2, #13
 80070a0:	701a      	strb	r2, [r3, #0]
      break;
 80070a2:	e06b      	b.n	800717c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d017      	beq.n	80070de <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	4798      	blx	r3
 80070ba:	4603      	mov	r3, r0
 80070bc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80070be:	7bbb      	ldrb	r3, [r7, #14]
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d103      	bne.n	80070ce <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	220b      	movs	r2, #11
 80070ca:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80070cc:	e058      	b.n	8007180 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80070ce:	7bbb      	ldrb	r3, [r7, #14]
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d154      	bne.n	8007180 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	220d      	movs	r2, #13
 80070da:	701a      	strb	r2, [r3, #0]
      break;
 80070dc:	e050      	b.n	8007180 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	220d      	movs	r2, #13
 80070e2:	701a      	strb	r2, [r3, #0]
      break;
 80070e4:	e04c      	b.n	8007180 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d049      	beq.n	8007184 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070f6:	695b      	ldr	r3, [r3, #20]
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	4798      	blx	r3
      }
      break;
 80070fc:	e042      	b.n	8007184 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7ff fd72 	bl	8006bf0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007112:	2b00      	cmp	r3, #0
 8007114:	d009      	beq.n	800712a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007130:	2b00      	cmp	r3, #0
 8007132:	d005      	beq.n	8007140 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800713a:	2105      	movs	r1, #5
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007146:	b2db      	uxtb	r3, r3
 8007148:	2b01      	cmp	r3, #1
 800714a:	d107      	bne.n	800715c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f7ff fe2b 	bl	8006db0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800715a:	e014      	b.n	8007186 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f001 f9b5 	bl	80084cc <USBH_LL_Start>
      break;
 8007162:	e010      	b.n	8007186 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007164:	bf00      	nop
 8007166:	e00e      	b.n	8007186 <USBH_Process+0x3b6>
      break;
 8007168:	bf00      	nop
 800716a:	e00c      	b.n	8007186 <USBH_Process+0x3b6>
      break;
 800716c:	bf00      	nop
 800716e:	e00a      	b.n	8007186 <USBH_Process+0x3b6>
    break;
 8007170:	bf00      	nop
 8007172:	e008      	b.n	8007186 <USBH_Process+0x3b6>
      break;
 8007174:	bf00      	nop
 8007176:	e006      	b.n	8007186 <USBH_Process+0x3b6>
      break;
 8007178:	bf00      	nop
 800717a:	e004      	b.n	8007186 <USBH_Process+0x3b6>
      break;
 800717c:	bf00      	nop
 800717e:	e002      	b.n	8007186 <USBH_Process+0x3b6>
      break;
 8007180:	bf00      	nop
 8007182:	e000      	b.n	8007186 <USBH_Process+0x3b6>
      break;
 8007184:	bf00      	nop
  }
  return USBH_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b088      	sub	sp, #32
 8007194:	af04      	add	r7, sp, #16
 8007196:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007198:	2301      	movs	r3, #1
 800719a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800719c:	2301      	movs	r3, #1
 800719e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	785b      	ldrb	r3, [r3, #1]
 80071a4:	2b07      	cmp	r3, #7
 80071a6:	f200 81c1 	bhi.w	800752c <USBH_HandleEnum+0x39c>
 80071aa:	a201      	add	r2, pc, #4	; (adr r2, 80071b0 <USBH_HandleEnum+0x20>)
 80071ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b0:	080071d1 	.word	0x080071d1
 80071b4:	0800728f 	.word	0x0800728f
 80071b8:	080072f9 	.word	0x080072f9
 80071bc:	08007387 	.word	0x08007387
 80071c0:	080073f1 	.word	0x080073f1
 80071c4:	08007461 	.word	0x08007461
 80071c8:	080074a7 	.word	0x080074a7
 80071cc:	080074ed 	.word	0x080074ed
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80071d0:	2108      	movs	r1, #8
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fa50 	bl	8007678 <USBH_Get_DevDesc>
 80071d8:	4603      	mov	r3, r0
 80071da:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071dc:	7bbb      	ldrb	r3, [r7, #14]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d130      	bne.n	8007244 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	7919      	ldrb	r1, [r3, #4]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007206:	b292      	uxth	r2, r2
 8007208:	9202      	str	r2, [sp, #8]
 800720a:	2200      	movs	r2, #0
 800720c:	9201      	str	r2, [sp, #4]
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	4603      	mov	r3, r0
 8007212:	2280      	movs	r2, #128	; 0x80
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 ff77 	bl	8008108 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	7959      	ldrb	r1, [r3, #5]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800722e:	b292      	uxth	r2, r2
 8007230:	9202      	str	r2, [sp, #8]
 8007232:	2200      	movs	r2, #0
 8007234:	9201      	str	r2, [sp, #4]
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	4603      	mov	r3, r0
 800723a:	2200      	movs	r2, #0
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 ff63 	bl	8008108 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007242:	e175      	b.n	8007530 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007244:	7bbb      	ldrb	r3, [r7, #14]
 8007246:	2b03      	cmp	r3, #3
 8007248:	f040 8172 	bne.w	8007530 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007252:	3301      	adds	r3, #1
 8007254:	b2da      	uxtb	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007262:	2b03      	cmp	r3, #3
 8007264:	d903      	bls.n	800726e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	220d      	movs	r2, #13
 800726a:	701a      	strb	r2, [r3, #0]
      break;
 800726c:	e160      	b.n	8007530 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	795b      	ldrb	r3, [r3, #5]
 8007272:	4619      	mov	r1, r3
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 ff97 	bl	80081a8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	791b      	ldrb	r3, [r3, #4]
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 ff91 	bl	80081a8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	701a      	strb	r2, [r3, #0]
      break;
 800728c:	e150      	b.n	8007530 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800728e:	2112      	movs	r1, #18
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 f9f1 	bl	8007678 <USBH_Get_DevDesc>
 8007296:	4603      	mov	r3, r0
 8007298:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800729a:	7bbb      	ldrb	r3, [r7, #14]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d103      	bne.n	80072a8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2202      	movs	r2, #2
 80072a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80072a6:	e145      	b.n	8007534 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072a8:	7bbb      	ldrb	r3, [r7, #14]
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	f040 8142 	bne.w	8007534 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072b6:	3301      	adds	r3, #1
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072c6:	2b03      	cmp	r3, #3
 80072c8:	d903      	bls.n	80072d2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	220d      	movs	r2, #13
 80072ce:	701a      	strb	r2, [r3, #0]
      break;
 80072d0:	e130      	b.n	8007534 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	795b      	ldrb	r3, [r3, #5]
 80072d6:	4619      	mov	r1, r3
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 ff65 	bl	80081a8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	791b      	ldrb	r3, [r3, #4]
 80072e2:	4619      	mov	r1, r3
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 ff5f 	bl	80081a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	701a      	strb	r2, [r3, #0]
      break;
 80072f6:	e11d      	b.n	8007534 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80072f8:	2101      	movs	r1, #1
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fa68 	bl	80077d0 <USBH_SetAddress>
 8007300:	4603      	mov	r3, r0
 8007302:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007304:	7bbb      	ldrb	r3, [r7, #14]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d132      	bne.n	8007370 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800730a:	2002      	movs	r0, #2
 800730c:	f001 fa42 	bl	8008794 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2203      	movs	r2, #3
 800731c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	7919      	ldrb	r1, [r3, #4]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007332:	b292      	uxth	r2, r2
 8007334:	9202      	str	r2, [sp, #8]
 8007336:	2200      	movs	r2, #0
 8007338:	9201      	str	r2, [sp, #4]
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	4603      	mov	r3, r0
 800733e:	2280      	movs	r2, #128	; 0x80
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fee1 	bl	8008108 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	7959      	ldrb	r1, [r3, #5]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800735a:	b292      	uxth	r2, r2
 800735c:	9202      	str	r2, [sp, #8]
 800735e:	2200      	movs	r2, #0
 8007360:	9201      	str	r2, [sp, #4]
 8007362:	9300      	str	r3, [sp, #0]
 8007364:	4603      	mov	r3, r0
 8007366:	2200      	movs	r2, #0
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fecd 	bl	8008108 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800736e:	e0e3      	b.n	8007538 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007370:	7bbb      	ldrb	r3, [r7, #14]
 8007372:	2b03      	cmp	r3, #3
 8007374:	f040 80e0 	bne.w	8007538 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	220d      	movs	r2, #13
 800737c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	705a      	strb	r2, [r3, #1]
      break;
 8007384:	e0d8      	b.n	8007538 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007386:	2109      	movs	r1, #9
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f99d 	bl	80076c8 <USBH_Get_CfgDesc>
 800738e:	4603      	mov	r3, r0
 8007390:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007392:	7bbb      	ldrb	r3, [r7, #14]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d103      	bne.n	80073a0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2204      	movs	r2, #4
 800739c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800739e:	e0cd      	b.n	800753c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073a0:	7bbb      	ldrb	r3, [r7, #14]
 80073a2:	2b03      	cmp	r3, #3
 80073a4:	f040 80ca 	bne.w	800753c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073ae:	3301      	adds	r3, #1
 80073b0:	b2da      	uxtb	r2, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073be:	2b03      	cmp	r3, #3
 80073c0:	d903      	bls.n	80073ca <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	220d      	movs	r2, #13
 80073c6:	701a      	strb	r2, [r3, #0]
      break;
 80073c8:	e0b8      	b.n	800753c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	795b      	ldrb	r3, [r3, #5]
 80073ce:	4619      	mov	r1, r3
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fee9 	bl	80081a8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	791b      	ldrb	r3, [r3, #4]
 80073da:	4619      	mov	r1, r3
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fee3 	bl	80081a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	701a      	strb	r2, [r3, #0]
      break;
 80073ee:	e0a5      	b.n	800753c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80073f6:	4619      	mov	r1, r3
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f965 	bl	80076c8 <USBH_Get_CfgDesc>
 80073fe:	4603      	mov	r3, r0
 8007400:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007402:	7bbb      	ldrb	r3, [r7, #14]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d103      	bne.n	8007410 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2205      	movs	r2, #5
 800740c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800740e:	e097      	b.n	8007540 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007410:	7bbb      	ldrb	r3, [r7, #14]
 8007412:	2b03      	cmp	r3, #3
 8007414:	f040 8094 	bne.w	8007540 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800741e:	3301      	adds	r3, #1
 8007420:	b2da      	uxtb	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800742e:	2b03      	cmp	r3, #3
 8007430:	d903      	bls.n	800743a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	220d      	movs	r2, #13
 8007436:	701a      	strb	r2, [r3, #0]
      break;
 8007438:	e082      	b.n	8007540 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	795b      	ldrb	r3, [r3, #5]
 800743e:	4619      	mov	r1, r3
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 feb1 	bl	80081a8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	791b      	ldrb	r3, [r3, #4]
 800744a:	4619      	mov	r1, r3
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 feab 	bl	80081a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	701a      	strb	r2, [r3, #0]
      break;
 800745e:	e06f      	b.n	8007540 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007466:	2b00      	cmp	r3, #0
 8007468:	d019      	beq.n	800749e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007476:	23ff      	movs	r3, #255	; 0xff
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 f949 	bl	8007710 <USBH_Get_StringDesc>
 800747e:	4603      	mov	r3, r0
 8007480:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007482:	7bbb      	ldrb	r3, [r7, #14]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d103      	bne.n	8007490 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2206      	movs	r2, #6
 800748c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800748e:	e059      	b.n	8007544 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007490:	7bbb      	ldrb	r3, [r7, #14]
 8007492:	2b03      	cmp	r3, #3
 8007494:	d156      	bne.n	8007544 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2206      	movs	r2, #6
 800749a:	705a      	strb	r2, [r3, #1]
      break;
 800749c:	e052      	b.n	8007544 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2206      	movs	r2, #6
 80074a2:	705a      	strb	r2, [r3, #1]
      break;
 80074a4:	e04e      	b.n	8007544 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d019      	beq.n	80074e4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80074bc:	23ff      	movs	r3, #255	; 0xff
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 f926 	bl	8007710 <USBH_Get_StringDesc>
 80074c4:	4603      	mov	r3, r0
 80074c6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80074c8:	7bbb      	ldrb	r3, [r7, #14]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d103      	bne.n	80074d6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2207      	movs	r2, #7
 80074d2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80074d4:	e038      	b.n	8007548 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074d6:	7bbb      	ldrb	r3, [r7, #14]
 80074d8:	2b03      	cmp	r3, #3
 80074da:	d135      	bne.n	8007548 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2207      	movs	r2, #7
 80074e0:	705a      	strb	r2, [r3, #1]
      break;
 80074e2:	e031      	b.n	8007548 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2207      	movs	r2, #7
 80074e8:	705a      	strb	r2, [r3, #1]
      break;
 80074ea:	e02d      	b.n	8007548 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d017      	beq.n	8007526 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007502:	23ff      	movs	r3, #255	; 0xff
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f903 	bl	8007710 <USBH_Get_StringDesc>
 800750a:	4603      	mov	r3, r0
 800750c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800750e:	7bbb      	ldrb	r3, [r7, #14]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d102      	bne.n	800751a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007514:	2300      	movs	r3, #0
 8007516:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007518:	e018      	b.n	800754c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800751a:	7bbb      	ldrb	r3, [r7, #14]
 800751c:	2b03      	cmp	r3, #3
 800751e:	d115      	bne.n	800754c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007520:	2300      	movs	r3, #0
 8007522:	73fb      	strb	r3, [r7, #15]
      break;
 8007524:	e012      	b.n	800754c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007526:	2300      	movs	r3, #0
 8007528:	73fb      	strb	r3, [r7, #15]
      break;
 800752a:	e00f      	b.n	800754c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800752c:	bf00      	nop
 800752e:	e00e      	b.n	800754e <USBH_HandleEnum+0x3be>
      break;
 8007530:	bf00      	nop
 8007532:	e00c      	b.n	800754e <USBH_HandleEnum+0x3be>
      break;
 8007534:	bf00      	nop
 8007536:	e00a      	b.n	800754e <USBH_HandleEnum+0x3be>
      break;
 8007538:	bf00      	nop
 800753a:	e008      	b.n	800754e <USBH_HandleEnum+0x3be>
      break;
 800753c:	bf00      	nop
 800753e:	e006      	b.n	800754e <USBH_HandleEnum+0x3be>
      break;
 8007540:	bf00      	nop
 8007542:	e004      	b.n	800754e <USBH_HandleEnum+0x3be>
      break;
 8007544:	bf00      	nop
 8007546:	e002      	b.n	800754e <USBH_HandleEnum+0x3be>
      break;
 8007548:	bf00      	nop
 800754a:	e000      	b.n	800754e <USBH_HandleEnum+0x3be>
      break;
 800754c:	bf00      	nop
  }
  return Status;
 800754e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007550:	4618      	mov	r0, r3
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	683a      	ldr	r2, [r7, #0]
 8007566:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800756a:	bf00      	nop
 800756c:	370c      	adds	r7, #12
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr

08007576 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b082      	sub	sp, #8
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007584:	1c5a      	adds	r2, r3, #1
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f804 	bl	800759a <USBH_HandleSof>
}
 8007592:	bf00      	nop
 8007594:	3708      	adds	r7, #8
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b082      	sub	sp, #8
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	2b0b      	cmp	r3, #11
 80075aa:	d10a      	bne.n	80075c2 <USBH_HandleSof+0x28>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d005      	beq.n	80075c2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075bc:	699b      	ldr	r3, [r3, #24]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	4798      	blx	r3
  }
}
 80075c2:	bf00      	nop
 80075c4:	3708      	adds	r7, #8
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80075ca:	b480      	push	{r7}
 80075cc:	b083      	sub	sp, #12
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80075da:	bf00      	nop
}
 80075dc:	370c      	adds	r7, #12
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr

080075e6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b083      	sub	sp, #12
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80075f6:	bf00      	nop
}
 80075f8:	370c      	adds	r7, #12
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr

08007602 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007602:	b480      	push	{r7}
 8007604:	b083      	sub	sp, #12
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2201      	movs	r2, #1
 800760e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 ff56 	bl	8008502 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	791b      	ldrb	r3, [r3, #4]
 800765a:	4619      	mov	r1, r3
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 fda3 	bl	80081a8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	795b      	ldrb	r3, [r3, #5]
 8007666:	4619      	mov	r1, r3
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 fd9d 	bl	80081a8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3708      	adds	r7, #8
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b086      	sub	sp, #24
 800767c:	af02      	add	r7, sp, #8
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	460b      	mov	r3, r1
 8007682:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800768a:	78fb      	ldrb	r3, [r7, #3]
 800768c:	b29b      	uxth	r3, r3
 800768e:	9300      	str	r3, [sp, #0]
 8007690:	4613      	mov	r3, r2
 8007692:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007696:	2100      	movs	r1, #0
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 f864 	bl	8007766 <USBH_GetDescriptor>
 800769e:	4603      	mov	r3, r0
 80076a0:	73fb      	strb	r3, [r7, #15]
 80076a2:	7bfb      	ldrb	r3, [r7, #15]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10a      	bne.n	80076be <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f203 3026 	addw	r0, r3, #806	; 0x326
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80076b4:	78fa      	ldrb	r2, [r7, #3]
 80076b6:	b292      	uxth	r2, r2
 80076b8:	4619      	mov	r1, r3
 80076ba:	f000 f918 	bl	80078ee <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80076be:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b086      	sub	sp, #24
 80076cc:	af02      	add	r7, sp, #8
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	460b      	mov	r3, r1
 80076d2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	331c      	adds	r3, #28
 80076d8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80076da:	887b      	ldrh	r3, [r7, #2]
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076e4:	2100      	movs	r1, #0
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f83d 	bl	8007766 <USBH_GetDescriptor>
 80076ec:	4603      	mov	r3, r0
 80076ee:	72fb      	strb	r3, [r7, #11]
 80076f0:	7afb      	ldrb	r3, [r7, #11]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d107      	bne.n	8007706 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80076fc:	887a      	ldrh	r2, [r7, #2]
 80076fe:	68f9      	ldr	r1, [r7, #12]
 8007700:	4618      	mov	r0, r3
 8007702:	f000 f964 	bl	80079ce <USBH_ParseCfgDesc>
  }

  return status;
 8007706:	7afb      	ldrb	r3, [r7, #11]
}
 8007708:	4618      	mov	r0, r3
 800770a:	3710      	adds	r7, #16
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b088      	sub	sp, #32
 8007714:	af02      	add	r7, sp, #8
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	607a      	str	r2, [r7, #4]
 800771a:	461a      	mov	r2, r3
 800771c:	460b      	mov	r3, r1
 800771e:	72fb      	strb	r3, [r7, #11]
 8007720:	4613      	mov	r3, r2
 8007722:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007724:	7afb      	ldrb	r3, [r7, #11]
 8007726:	b29b      	uxth	r3, r3
 8007728:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800772c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007734:	893b      	ldrh	r3, [r7, #8]
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	460b      	mov	r3, r1
 800773a:	2100      	movs	r1, #0
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f000 f812 	bl	8007766 <USBH_GetDescriptor>
 8007742:	4603      	mov	r3, r0
 8007744:	75fb      	strb	r3, [r7, #23]
 8007746:	7dfb      	ldrb	r3, [r7, #23]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d107      	bne.n	800775c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007752:	893a      	ldrh	r2, [r7, #8]
 8007754:	6879      	ldr	r1, [r7, #4]
 8007756:	4618      	mov	r0, r3
 8007758:	f000 fa37 	bl	8007bca <USBH_ParseStringDesc>
  }

  return status;
 800775c:	7dfb      	ldrb	r3, [r7, #23]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3718      	adds	r7, #24
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b084      	sub	sp, #16
 800776a:	af00      	add	r7, sp, #0
 800776c:	60f8      	str	r0, [r7, #12]
 800776e:	607b      	str	r3, [r7, #4]
 8007770:	460b      	mov	r3, r1
 8007772:	72fb      	strb	r3, [r7, #11]
 8007774:	4613      	mov	r3, r2
 8007776:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	789b      	ldrb	r3, [r3, #2]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d11c      	bne.n	80077ba <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007780:	7afb      	ldrb	r3, [r7, #11]
 8007782:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007786:	b2da      	uxtb	r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2206      	movs	r2, #6
 8007790:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	893a      	ldrh	r2, [r7, #8]
 8007796:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007798:	893b      	ldrh	r3, [r7, #8]
 800779a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800779e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077a2:	d104      	bne.n	80077ae <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f240 4209 	movw	r2, #1033	; 0x409
 80077aa:	829a      	strh	r2, [r3, #20]
 80077ac:	e002      	b.n	80077b4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	8b3a      	ldrh	r2, [r7, #24]
 80077b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80077ba:	8b3b      	ldrh	r3, [r7, #24]
 80077bc:	461a      	mov	r2, r3
 80077be:	6879      	ldr	r1, [r7, #4]
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f000 fa50 	bl	8007c66 <USBH_CtlReq>
 80077c6:	4603      	mov	r3, r0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	460b      	mov	r3, r1
 80077da:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	789b      	ldrb	r3, [r3, #2]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d10f      	bne.n	8007804 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2205      	movs	r2, #5
 80077ee:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80077f0:	78fb      	ldrb	r3, [r7, #3]
 80077f2:	b29a      	uxth	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007804:	2200      	movs	r2, #0
 8007806:	2100      	movs	r1, #0
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fa2c 	bl	8007c66 <USBH_CtlReq>
 800780e:	4603      	mov	r3, r0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	460b      	mov	r3, r1
 8007822:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	789b      	ldrb	r3, [r3, #2]
 8007828:	2b01      	cmp	r3, #1
 800782a:	d10e      	bne.n	800784a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2209      	movs	r2, #9
 8007836:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	887a      	ldrh	r2, [r7, #2]
 800783c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800784a:	2200      	movs	r2, #0
 800784c:	2100      	movs	r1, #0
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 fa09 	bl	8007c66 <USBH_CtlReq>
 8007854:	4603      	mov	r3, r0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3708      	adds	r7, #8
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b082      	sub	sp, #8
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	460b      	mov	r3, r1
 8007868:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	789b      	ldrb	r3, [r3, #2]
 800786e:	2b01      	cmp	r3, #1
 8007870:	d10f      	bne.n	8007892 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2203      	movs	r2, #3
 800787c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800787e:	78fb      	ldrb	r3, [r7, #3]
 8007880:	b29a      	uxth	r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007892:	2200      	movs	r2, #0
 8007894:	2100      	movs	r1, #0
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f9e5 	bl	8007c66 <USBH_CtlReq>
 800789c:	4603      	mov	r3, r0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3708      	adds	r7, #8
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b082      	sub	sp, #8
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
 80078ae:	460b      	mov	r3, r1
 80078b0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	789b      	ldrb	r3, [r3, #2]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d10f      	bne.n	80078da <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2202      	movs	r2, #2
 80078be:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80078cc:	78fb      	ldrb	r3, [r7, #3]
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80078da:	2200      	movs	r2, #0
 80078dc:	2100      	movs	r1, #0
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f9c1 	bl	8007c66 <USBH_CtlReq>
 80078e4:	4603      	mov	r3, r0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3708      	adds	r7, #8
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80078ee:	b480      	push	{r7}
 80078f0:	b085      	sub	sp, #20
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	60f8      	str	r0, [r7, #12]
 80078f6:	60b9      	str	r1, [r7, #8]
 80078f8:	4613      	mov	r3, r2
 80078fa:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	781a      	ldrb	r2, [r3, #0]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	785a      	ldrb	r2, [r3, #1]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	3302      	adds	r3, #2
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	b29a      	uxth	r2, r3
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	3303      	adds	r3, #3
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	b29b      	uxth	r3, r3
 800791c:	021b      	lsls	r3, r3, #8
 800791e:	b29b      	uxth	r3, r3
 8007920:	4313      	orrs	r3, r2
 8007922:	b29a      	uxth	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	791a      	ldrb	r2, [r3, #4]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	795a      	ldrb	r2, [r3, #5]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	799a      	ldrb	r2, [r3, #6]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	79da      	ldrb	r2, [r3, #7]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007948:	88fb      	ldrh	r3, [r7, #6]
 800794a:	2b08      	cmp	r3, #8
 800794c:	d939      	bls.n	80079c2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	3308      	adds	r3, #8
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	b29a      	uxth	r2, r3
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	3309      	adds	r3, #9
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	b29b      	uxth	r3, r3
 800795e:	021b      	lsls	r3, r3, #8
 8007960:	b29b      	uxth	r3, r3
 8007962:	4313      	orrs	r3, r2
 8007964:	b29a      	uxth	r2, r3
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	330a      	adds	r3, #10
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	b29a      	uxth	r2, r3
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	330b      	adds	r3, #11
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	b29b      	uxth	r3, r3
 800797a:	021b      	lsls	r3, r3, #8
 800797c:	b29b      	uxth	r3, r3
 800797e:	4313      	orrs	r3, r2
 8007980:	b29a      	uxth	r2, r3
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	330c      	adds	r3, #12
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	b29a      	uxth	r2, r3
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	330d      	adds	r3, #13
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	b29b      	uxth	r3, r3
 8007996:	021b      	lsls	r3, r3, #8
 8007998:	b29b      	uxth	r3, r3
 800799a:	4313      	orrs	r3, r2
 800799c:	b29a      	uxth	r2, r3
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	7b9a      	ldrb	r2, [r3, #14]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	7bda      	ldrb	r2, [r3, #15]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	7c1a      	ldrb	r2, [r3, #16]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	7c5a      	ldrb	r2, [r3, #17]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	745a      	strb	r2, [r3, #17]
  }
}
 80079c2:	bf00      	nop
 80079c4:	3714      	adds	r7, #20
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr

080079ce <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b08a      	sub	sp, #40	; 0x28
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	60f8      	str	r0, [r7, #12]
 80079d6:	60b9      	str	r1, [r7, #8]
 80079d8:	4613      	mov	r3, r2
 80079da:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80079e0:	2300      	movs	r3, #0
 80079e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80079e6:	2300      	movs	r3, #0
 80079e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	781a      	ldrb	r2, [r3, #0]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	785a      	ldrb	r2, [r3, #1]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	3302      	adds	r3, #2
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	3303      	adds	r3, #3
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	021b      	lsls	r3, r3, #8
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	4313      	orrs	r3, r2
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	791a      	ldrb	r2, [r3, #4]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	795a      	ldrb	r2, [r3, #5]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	799a      	ldrb	r2, [r3, #6]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	79da      	ldrb	r2, [r3, #7]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	7a1a      	ldrb	r2, [r3, #8]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007a44:	88fb      	ldrh	r3, [r7, #6]
 8007a46:	2b09      	cmp	r3, #9
 8007a48:	d95f      	bls.n	8007b0a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007a4a:	2309      	movs	r3, #9
 8007a4c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007a52:	e051      	b.n	8007af8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007a54:	f107 0316 	add.w	r3, r7, #22
 8007a58:	4619      	mov	r1, r3
 8007a5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a5c:	f000 f8e8 	bl	8007c30 <USBH_GetNextDesc>
 8007a60:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a64:	785b      	ldrb	r3, [r3, #1]
 8007a66:	2b04      	cmp	r3, #4
 8007a68:	d146      	bne.n	8007af8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007a6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a6e:	221a      	movs	r2, #26
 8007a70:	fb02 f303 	mul.w	r3, r2, r3
 8007a74:	3308      	adds	r3, #8
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	4413      	add	r3, r2
 8007a7a:	3302      	adds	r3, #2
 8007a7c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007a7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a80:	69f8      	ldr	r0, [r7, #28]
 8007a82:	f000 f846 	bl	8007b12 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007a86:	2300      	movs	r3, #0
 8007a88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007a90:	e022      	b.n	8007ad8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007a92:	f107 0316 	add.w	r3, r7, #22
 8007a96:	4619      	mov	r1, r3
 8007a98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a9a:	f000 f8c9 	bl	8007c30 <USBH_GetNextDesc>
 8007a9e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa2:	785b      	ldrb	r3, [r3, #1]
 8007aa4:	2b05      	cmp	r3, #5
 8007aa6:	d117      	bne.n	8007ad8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007aa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007aac:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007ab0:	3201      	adds	r2, #1
 8007ab2:	00d2      	lsls	r2, r2, #3
 8007ab4:	211a      	movs	r1, #26
 8007ab6:	fb01 f303 	mul.w	r3, r1, r3
 8007aba:	4413      	add	r3, r2
 8007abc:	3308      	adds	r3, #8
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	3304      	adds	r3, #4
 8007ac4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007ac6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ac8:	69b8      	ldr	r0, [r7, #24]
 8007aca:	f000 f851 	bl	8007b70 <USBH_ParseEPDesc>
            ep_ix++;
 8007ace:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	791b      	ldrb	r3, [r3, #4]
 8007adc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d204      	bcs.n	8007aee <USBH_ParseCfgDesc+0x120>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	885a      	ldrh	r2, [r3, #2]
 8007ae8:	8afb      	ldrh	r3, [r7, #22]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d8d1      	bhi.n	8007a92 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007aee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007af2:	3301      	adds	r3, #1
 8007af4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007af8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d804      	bhi.n	8007b0a <USBH_ParseCfgDesc+0x13c>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	885a      	ldrh	r2, [r3, #2]
 8007b04:	8afb      	ldrh	r3, [r7, #22]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d8a4      	bhi.n	8007a54 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007b0a:	bf00      	nop
 8007b0c:	3728      	adds	r7, #40	; 0x28
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007b12:	b480      	push	{r7}
 8007b14:	b083      	sub	sp, #12
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
 8007b1a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	781a      	ldrb	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	785a      	ldrb	r2, [r3, #1]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	789a      	ldrb	r2, [r3, #2]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	78da      	ldrb	r2, [r3, #3]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	791a      	ldrb	r2, [r3, #4]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	795a      	ldrb	r2, [r3, #5]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	799a      	ldrb	r2, [r3, #6]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	79da      	ldrb	r2, [r3, #7]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	7a1a      	ldrb	r2, [r3, #8]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	721a      	strb	r2, [r3, #8]
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	781a      	ldrb	r2, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	785a      	ldrb	r2, [r3, #1]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	789a      	ldrb	r2, [r3, #2]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	78da      	ldrb	r2, [r3, #3]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	3304      	adds	r3, #4
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	3305      	adds	r3, #5
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	021b      	lsls	r3, r3, #8
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	799a      	ldrb	r2, [r3, #6]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	719a      	strb	r2, [r3, #6]
}
 8007bbe:	bf00      	nop
 8007bc0:	370c      	adds	r7, #12
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr

08007bca <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007bca:	b480      	push	{r7}
 8007bcc:	b087      	sub	sp, #28
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	60f8      	str	r0, [r7, #12]
 8007bd2:	60b9      	str	r1, [r7, #8]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	2b03      	cmp	r3, #3
 8007be0:	d120      	bne.n	8007c24 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	1e9a      	subs	r2, r3, #2
 8007be8:	88fb      	ldrh	r3, [r7, #6]
 8007bea:	4293      	cmp	r3, r2
 8007bec:	bf28      	it	cs
 8007bee:	4613      	movcs	r3, r2
 8007bf0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	3302      	adds	r3, #2
 8007bf6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	82fb      	strh	r3, [r7, #22]
 8007bfc:	e00b      	b.n	8007c16 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007bfe:	8afb      	ldrh	r3, [r7, #22]
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	4413      	add	r3, r2
 8007c04:	781a      	ldrb	r2, [r3, #0]
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007c10:	8afb      	ldrh	r3, [r7, #22]
 8007c12:	3302      	adds	r3, #2
 8007c14:	82fb      	strh	r3, [r7, #22]
 8007c16:	8afa      	ldrh	r2, [r7, #22]
 8007c18:	8abb      	ldrh	r3, [r7, #20]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d3ef      	bcc.n	8007bfe <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	2200      	movs	r2, #0
 8007c22:	701a      	strb	r2, [r3, #0]
  }
}
 8007c24:	bf00      	nop
 8007c26:	371c      	adds	r7, #28
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	881a      	ldrh	r2, [r3, #0]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	4413      	add	r3, r2
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4413      	add	r3, r2
 8007c56:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c58:	68fb      	ldr	r3, [r7, #12]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3714      	adds	r7, #20
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b086      	sub	sp, #24
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	60f8      	str	r0, [r7, #12]
 8007c6e:	60b9      	str	r1, [r7, #8]
 8007c70:	4613      	mov	r3, r2
 8007c72:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007c74:	2301      	movs	r3, #1
 8007c76:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	789b      	ldrb	r3, [r3, #2]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d002      	beq.n	8007c86 <USBH_CtlReq+0x20>
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d00f      	beq.n	8007ca4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007c84:	e027      	b.n	8007cd6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	68ba      	ldr	r2, [r7, #8]
 8007c8a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	88fa      	ldrh	r2, [r7, #6]
 8007c90:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2201      	movs	r2, #1
 8007c96:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	75fb      	strb	r3, [r7, #23]
      break;
 8007ca2:	e018      	b.n	8007cd6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f000 f81b 	bl	8007ce0 <USBH_HandleControl>
 8007caa:	4603      	mov	r3, r0
 8007cac:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007cae:	7dfb      	ldrb	r3, [r7, #23]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d002      	beq.n	8007cba <USBH_CtlReq+0x54>
 8007cb4:	7dfb      	ldrb	r3, [r7, #23]
 8007cb6:	2b03      	cmp	r3, #3
 8007cb8:	d106      	bne.n	8007cc8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	761a      	strb	r2, [r3, #24]
      break;
 8007cc6:	e005      	b.n	8007cd4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007cc8:	7dfb      	ldrb	r3, [r7, #23]
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d102      	bne.n	8007cd4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	709a      	strb	r2, [r3, #2]
      break;
 8007cd4:	bf00      	nop
  }
  return status;
 8007cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3718      	adds	r7, #24
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af02      	add	r7, sp, #8
 8007ce6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007cec:	2300      	movs	r3, #0
 8007cee:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	7e1b      	ldrb	r3, [r3, #24]
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	2b0a      	cmp	r3, #10
 8007cf8:	f200 8156 	bhi.w	8007fa8 <USBH_HandleControl+0x2c8>
 8007cfc:	a201      	add	r2, pc, #4	; (adr r2, 8007d04 <USBH_HandleControl+0x24>)
 8007cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d02:	bf00      	nop
 8007d04:	08007d31 	.word	0x08007d31
 8007d08:	08007d4b 	.word	0x08007d4b
 8007d0c:	08007db5 	.word	0x08007db5
 8007d10:	08007ddb 	.word	0x08007ddb
 8007d14:	08007e13 	.word	0x08007e13
 8007d18:	08007e3d 	.word	0x08007e3d
 8007d1c:	08007e8f 	.word	0x08007e8f
 8007d20:	08007eb1 	.word	0x08007eb1
 8007d24:	08007eed 	.word	0x08007eed
 8007d28:	08007f13 	.word	0x08007f13
 8007d2c:	08007f51 	.word	0x08007f51
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f103 0110 	add.w	r1, r3, #16
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	795b      	ldrb	r3, [r3, #5]
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f943 	bl	8007fc8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2202      	movs	r2, #2
 8007d46:	761a      	strb	r2, [r3, #24]
      break;
 8007d48:	e139      	b.n	8007fbe <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	795b      	ldrb	r3, [r3, #5]
 8007d4e:	4619      	mov	r1, r3
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 fcc5 	bl	80086e0 <USBH_LL_GetURBState>
 8007d56:	4603      	mov	r3, r0
 8007d58:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007d5a:	7bbb      	ldrb	r3, [r7, #14]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d11e      	bne.n	8007d9e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	7c1b      	ldrb	r3, [r3, #16]
 8007d64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d68:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	8adb      	ldrh	r3, [r3, #22]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00a      	beq.n	8007d88 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007d72:	7b7b      	ldrb	r3, [r7, #13]
 8007d74:	2b80      	cmp	r3, #128	; 0x80
 8007d76:	d103      	bne.n	8007d80 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2203      	movs	r2, #3
 8007d7c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007d7e:	e115      	b.n	8007fac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2205      	movs	r2, #5
 8007d84:	761a      	strb	r2, [r3, #24]
      break;
 8007d86:	e111      	b.n	8007fac <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007d88:	7b7b      	ldrb	r3, [r7, #13]
 8007d8a:	2b80      	cmp	r3, #128	; 0x80
 8007d8c:	d103      	bne.n	8007d96 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2209      	movs	r2, #9
 8007d92:	761a      	strb	r2, [r3, #24]
      break;
 8007d94:	e10a      	b.n	8007fac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2207      	movs	r2, #7
 8007d9a:	761a      	strb	r2, [r3, #24]
      break;
 8007d9c:	e106      	b.n	8007fac <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007d9e:	7bbb      	ldrb	r3, [r7, #14]
 8007da0:	2b04      	cmp	r3, #4
 8007da2:	d003      	beq.n	8007dac <USBH_HandleControl+0xcc>
 8007da4:	7bbb      	ldrb	r3, [r7, #14]
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	f040 8100 	bne.w	8007fac <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	220b      	movs	r2, #11
 8007db0:	761a      	strb	r2, [r3, #24]
      break;
 8007db2:	e0fb      	b.n	8007fac <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6899      	ldr	r1, [r3, #8]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	899a      	ldrh	r2, [r3, #12]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	791b      	ldrb	r3, [r3, #4]
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 f93a 	bl	8008046 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2204      	movs	r2, #4
 8007dd6:	761a      	strb	r2, [r3, #24]
      break;
 8007dd8:	e0f1      	b.n	8007fbe <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	791b      	ldrb	r3, [r3, #4]
 8007dde:	4619      	mov	r1, r3
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 fc7d 	bl	80086e0 <USBH_LL_GetURBState>
 8007de6:	4603      	mov	r3, r0
 8007de8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007dea:	7bbb      	ldrb	r3, [r7, #14]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d102      	bne.n	8007df6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2209      	movs	r2, #9
 8007df4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007df6:	7bbb      	ldrb	r3, [r7, #14]
 8007df8:	2b05      	cmp	r3, #5
 8007dfa:	d102      	bne.n	8007e02 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007e00:	e0d6      	b.n	8007fb0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007e02:	7bbb      	ldrb	r3, [r7, #14]
 8007e04:	2b04      	cmp	r3, #4
 8007e06:	f040 80d3 	bne.w	8007fb0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	220b      	movs	r2, #11
 8007e0e:	761a      	strb	r2, [r3, #24]
      break;
 8007e10:	e0ce      	b.n	8007fb0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6899      	ldr	r1, [r3, #8]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	899a      	ldrh	r2, [r3, #12]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	795b      	ldrb	r3, [r3, #5]
 8007e1e:	2001      	movs	r0, #1
 8007e20:	9000      	str	r0, [sp, #0]
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 f8ea 	bl	8007ffc <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2206      	movs	r2, #6
 8007e38:	761a      	strb	r2, [r3, #24]
      break;
 8007e3a:	e0c0      	b.n	8007fbe <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	795b      	ldrb	r3, [r3, #5]
 8007e40:	4619      	mov	r1, r3
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fc4c 	bl	80086e0 <USBH_LL_GetURBState>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007e4c:	7bbb      	ldrb	r3, [r7, #14]
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d103      	bne.n	8007e5a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2207      	movs	r2, #7
 8007e56:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007e58:	e0ac      	b.n	8007fb4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007e5a:	7bbb      	ldrb	r3, [r7, #14]
 8007e5c:	2b05      	cmp	r3, #5
 8007e5e:	d105      	bne.n	8007e6c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	220c      	movs	r2, #12
 8007e64:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007e66:	2303      	movs	r3, #3
 8007e68:	73fb      	strb	r3, [r7, #15]
      break;
 8007e6a:	e0a3      	b.n	8007fb4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007e6c:	7bbb      	ldrb	r3, [r7, #14]
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d103      	bne.n	8007e7a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2205      	movs	r2, #5
 8007e76:	761a      	strb	r2, [r3, #24]
      break;
 8007e78:	e09c      	b.n	8007fb4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007e7a:	7bbb      	ldrb	r3, [r7, #14]
 8007e7c:	2b04      	cmp	r3, #4
 8007e7e:	f040 8099 	bne.w	8007fb4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	220b      	movs	r2, #11
 8007e86:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007e88:	2302      	movs	r3, #2
 8007e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e8c:	e092      	b.n	8007fb4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	791b      	ldrb	r3, [r3, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	2100      	movs	r1, #0
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f8d5 	bl	8008046 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2208      	movs	r2, #8
 8007eac:	761a      	strb	r2, [r3, #24]

      break;
 8007eae:	e086      	b.n	8007fbe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	791b      	ldrb	r3, [r3, #4]
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 fc12 	bl	80086e0 <USBH_LL_GetURBState>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ec0:	7bbb      	ldrb	r3, [r7, #14]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d105      	bne.n	8007ed2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	220d      	movs	r2, #13
 8007eca:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007ed0:	e072      	b.n	8007fb8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007ed2:	7bbb      	ldrb	r3, [r7, #14]
 8007ed4:	2b04      	cmp	r3, #4
 8007ed6:	d103      	bne.n	8007ee0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	220b      	movs	r2, #11
 8007edc:	761a      	strb	r2, [r3, #24]
      break;
 8007ede:	e06b      	b.n	8007fb8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007ee0:	7bbb      	ldrb	r3, [r7, #14]
 8007ee2:	2b05      	cmp	r3, #5
 8007ee4:	d168      	bne.n	8007fb8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	73fb      	strb	r3, [r7, #15]
      break;
 8007eea:	e065      	b.n	8007fb8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	795b      	ldrb	r3, [r3, #5]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	9200      	str	r2, [sp, #0]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 f87f 	bl	8007ffc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	220a      	movs	r2, #10
 8007f0e:	761a      	strb	r2, [r3, #24]
      break;
 8007f10:	e055      	b.n	8007fbe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	795b      	ldrb	r3, [r3, #5]
 8007f16:	4619      	mov	r1, r3
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fbe1 	bl	80086e0 <USBH_LL_GetURBState>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007f22:	7bbb      	ldrb	r3, [r7, #14]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d105      	bne.n	8007f34 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	220d      	movs	r2, #13
 8007f30:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007f32:	e043      	b.n	8007fbc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007f34:	7bbb      	ldrb	r3, [r7, #14]
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d103      	bne.n	8007f42 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2209      	movs	r2, #9
 8007f3e:	761a      	strb	r2, [r3, #24]
      break;
 8007f40:	e03c      	b.n	8007fbc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007f42:	7bbb      	ldrb	r3, [r7, #14]
 8007f44:	2b04      	cmp	r3, #4
 8007f46:	d139      	bne.n	8007fbc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	220b      	movs	r2, #11
 8007f4c:	761a      	strb	r2, [r3, #24]
      break;
 8007f4e:	e035      	b.n	8007fbc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	7e5b      	ldrb	r3, [r3, #25]
 8007f54:	3301      	adds	r3, #1
 8007f56:	b2da      	uxtb	r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	765a      	strb	r2, [r3, #25]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	7e5b      	ldrb	r3, [r3, #25]
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d806      	bhi.n	8007f72 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007f70:	e025      	b.n	8007fbe <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f78:	2106      	movs	r1, #6
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	795b      	ldrb	r3, [r3, #5]
 8007f88:	4619      	mov	r1, r3
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 f90c 	bl	80081a8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	791b      	ldrb	r3, [r3, #4]
 8007f94:	4619      	mov	r1, r3
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 f906 	bl	80081a8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	73fb      	strb	r3, [r7, #15]
      break;
 8007fa6:	e00a      	b.n	8007fbe <USBH_HandleControl+0x2de>

    default:
      break;
 8007fa8:	bf00      	nop
 8007faa:	e008      	b.n	8007fbe <USBH_HandleControl+0x2de>
      break;
 8007fac:	bf00      	nop
 8007fae:	e006      	b.n	8007fbe <USBH_HandleControl+0x2de>
      break;
 8007fb0:	bf00      	nop
 8007fb2:	e004      	b.n	8007fbe <USBH_HandleControl+0x2de>
      break;
 8007fb4:	bf00      	nop
 8007fb6:	e002      	b.n	8007fbe <USBH_HandleControl+0x2de>
      break;
 8007fb8:	bf00      	nop
 8007fba:	e000      	b.n	8007fbe <USBH_HandleControl+0x2de>
      break;
 8007fbc:	bf00      	nop
  }

  return status;
 8007fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3710      	adds	r7, #16
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b088      	sub	sp, #32
 8007fcc:	af04      	add	r7, sp, #16
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007fd6:	79f9      	ldrb	r1, [r7, #7]
 8007fd8:	2300      	movs	r3, #0
 8007fda:	9303      	str	r3, [sp, #12]
 8007fdc:	2308      	movs	r3, #8
 8007fde:	9302      	str	r3, [sp, #8]
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	9301      	str	r3, [sp, #4]
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	2300      	movs	r3, #0
 8007fea:	2200      	movs	r2, #0
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f000 fb46 	bl	800867e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b088      	sub	sp, #32
 8008000:	af04      	add	r7, sp, #16
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	4611      	mov	r1, r2
 8008008:	461a      	mov	r2, r3
 800800a:	460b      	mov	r3, r1
 800800c:	80fb      	strh	r3, [r7, #6]
 800800e:	4613      	mov	r3, r2
 8008010:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008018:	2b00      	cmp	r3, #0
 800801a:	d001      	beq.n	8008020 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800801c:	2300      	movs	r3, #0
 800801e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008020:	7979      	ldrb	r1, [r7, #5]
 8008022:	7e3b      	ldrb	r3, [r7, #24]
 8008024:	9303      	str	r3, [sp, #12]
 8008026:	88fb      	ldrh	r3, [r7, #6]
 8008028:	9302      	str	r3, [sp, #8]
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	9301      	str	r3, [sp, #4]
 800802e:	2301      	movs	r3, #1
 8008030:	9300      	str	r3, [sp, #0]
 8008032:	2300      	movs	r3, #0
 8008034:	2200      	movs	r2, #0
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f000 fb21 	bl	800867e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b088      	sub	sp, #32
 800804a:	af04      	add	r7, sp, #16
 800804c:	60f8      	str	r0, [r7, #12]
 800804e:	60b9      	str	r1, [r7, #8]
 8008050:	4611      	mov	r1, r2
 8008052:	461a      	mov	r2, r3
 8008054:	460b      	mov	r3, r1
 8008056:	80fb      	strh	r3, [r7, #6]
 8008058:	4613      	mov	r3, r2
 800805a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800805c:	7979      	ldrb	r1, [r7, #5]
 800805e:	2300      	movs	r3, #0
 8008060:	9303      	str	r3, [sp, #12]
 8008062:	88fb      	ldrh	r3, [r7, #6]
 8008064:	9302      	str	r3, [sp, #8]
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	9301      	str	r3, [sp, #4]
 800806a:	2301      	movs	r3, #1
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	2300      	movs	r3, #0
 8008070:	2201      	movs	r2, #1
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f000 fb03 	bl	800867e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008078:	2300      	movs	r3, #0

}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b088      	sub	sp, #32
 8008086:	af04      	add	r7, sp, #16
 8008088:	60f8      	str	r0, [r7, #12]
 800808a:	60b9      	str	r1, [r7, #8]
 800808c:	4611      	mov	r1, r2
 800808e:	461a      	mov	r2, r3
 8008090:	460b      	mov	r3, r1
 8008092:	80fb      	strh	r3, [r7, #6]
 8008094:	4613      	mov	r3, r2
 8008096:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d001      	beq.n	80080a6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80080a2:	2300      	movs	r3, #0
 80080a4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80080a6:	7979      	ldrb	r1, [r7, #5]
 80080a8:	7e3b      	ldrb	r3, [r7, #24]
 80080aa:	9303      	str	r3, [sp, #12]
 80080ac:	88fb      	ldrh	r3, [r7, #6]
 80080ae:	9302      	str	r3, [sp, #8]
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	9301      	str	r3, [sp, #4]
 80080b4:	2301      	movs	r3, #1
 80080b6:	9300      	str	r3, [sp, #0]
 80080b8:	2302      	movs	r3, #2
 80080ba:	2200      	movs	r2, #0
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f000 fade 	bl	800867e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b088      	sub	sp, #32
 80080d0:	af04      	add	r7, sp, #16
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	4611      	mov	r1, r2
 80080d8:	461a      	mov	r2, r3
 80080da:	460b      	mov	r3, r1
 80080dc:	80fb      	strh	r3, [r7, #6]
 80080de:	4613      	mov	r3, r2
 80080e0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80080e2:	7979      	ldrb	r1, [r7, #5]
 80080e4:	2300      	movs	r3, #0
 80080e6:	9303      	str	r3, [sp, #12]
 80080e8:	88fb      	ldrh	r3, [r7, #6]
 80080ea:	9302      	str	r3, [sp, #8]
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	9301      	str	r3, [sp, #4]
 80080f0:	2301      	movs	r3, #1
 80080f2:	9300      	str	r3, [sp, #0]
 80080f4:	2302      	movs	r3, #2
 80080f6:	2201      	movs	r2, #1
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f000 fac0 	bl	800867e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	af04      	add	r7, sp, #16
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	4608      	mov	r0, r1
 8008112:	4611      	mov	r1, r2
 8008114:	461a      	mov	r2, r3
 8008116:	4603      	mov	r3, r0
 8008118:	70fb      	strb	r3, [r7, #3]
 800811a:	460b      	mov	r3, r1
 800811c:	70bb      	strb	r3, [r7, #2]
 800811e:	4613      	mov	r3, r2
 8008120:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008122:	7878      	ldrb	r0, [r7, #1]
 8008124:	78ba      	ldrb	r2, [r7, #2]
 8008126:	78f9      	ldrb	r1, [r7, #3]
 8008128:	8b3b      	ldrh	r3, [r7, #24]
 800812a:	9302      	str	r3, [sp, #8]
 800812c:	7d3b      	ldrb	r3, [r7, #20]
 800812e:	9301      	str	r3, [sp, #4]
 8008130:	7c3b      	ldrb	r3, [r7, #16]
 8008132:	9300      	str	r3, [sp, #0]
 8008134:	4603      	mov	r3, r0
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 fa53 	bl	80085e2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3708      	adds	r7, #8
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b082      	sub	sp, #8
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
 800814e:	460b      	mov	r3, r1
 8008150:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008152:	78fb      	ldrb	r3, [r7, #3]
 8008154:	4619      	mov	r1, r3
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 fa72 	bl	8008640 <USBH_LL_ClosePipe>

  return USBH_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b084      	sub	sp, #16
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	460b      	mov	r3, r1
 8008170:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f836 	bl	80081e4 <USBH_GetFreePipe>
 8008178:	4603      	mov	r3, r0
 800817a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800817c:	89fb      	ldrh	r3, [r7, #14]
 800817e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008182:	4293      	cmp	r3, r2
 8008184:	d00a      	beq.n	800819c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008186:	78fa      	ldrb	r2, [r7, #3]
 8008188:	89fb      	ldrh	r3, [r7, #14]
 800818a:	f003 030f 	and.w	r3, r3, #15
 800818e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008192:	6879      	ldr	r1, [r7, #4]
 8008194:	33e0      	adds	r3, #224	; 0xe0
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	440b      	add	r3, r1
 800819a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800819c:	89fb      	ldrh	r3, [r7, #14]
 800819e:	b2db      	uxtb	r3, r3
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	460b      	mov	r3, r1
 80081b2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80081b4:	78fb      	ldrb	r3, [r7, #3]
 80081b6:	2b0a      	cmp	r3, #10
 80081b8:	d80d      	bhi.n	80081d6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80081ba:	78fb      	ldrb	r3, [r7, #3]
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	33e0      	adds	r3, #224	; 0xe0
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	4413      	add	r3, r2
 80081c4:	685a      	ldr	r2, [r3, #4]
 80081c6:	78fb      	ldrb	r3, [r7, #3]
 80081c8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80081cc:	6879      	ldr	r1, [r7, #4]
 80081ce:	33e0      	adds	r3, #224	; 0xe0
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	440b      	add	r3, r1
 80081d4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80081ec:	2300      	movs	r3, #0
 80081ee:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80081f0:	2300      	movs	r3, #0
 80081f2:	73fb      	strb	r3, [r7, #15]
 80081f4:	e00f      	b.n	8008216 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80081f6:	7bfb      	ldrb	r3, [r7, #15]
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	33e0      	adds	r3, #224	; 0xe0
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4413      	add	r3, r2
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008206:	2b00      	cmp	r3, #0
 8008208:	d102      	bne.n	8008210 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800820a:	7bfb      	ldrb	r3, [r7, #15]
 800820c:	b29b      	uxth	r3, r3
 800820e:	e007      	b.n	8008220 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008210:	7bfb      	ldrb	r3, [r7, #15]
 8008212:	3301      	adds	r3, #1
 8008214:	73fb      	strb	r3, [r7, #15]
 8008216:	7bfb      	ldrb	r3, [r7, #15]
 8008218:	2b0a      	cmp	r3, #10
 800821a:	d9ec      	bls.n	80081f6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800821c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008220:	4618      	mov	r0, r3
 8008222:	3714      	adds	r7, #20
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008230:	2201      	movs	r2, #1
 8008232:	490e      	ldr	r1, [pc, #56]	; (800826c <MX_USB_HOST_Init+0x40>)
 8008234:	480e      	ldr	r0, [pc, #56]	; (8008270 <MX_USB_HOST_Init+0x44>)
 8008236:	f7fe fca1 	bl	8006b7c <USBH_Init>
 800823a:	4603      	mov	r3, r0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d001      	beq.n	8008244 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008240:	f7f8 fcda 	bl	8000bf8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008244:	490b      	ldr	r1, [pc, #44]	; (8008274 <MX_USB_HOST_Init+0x48>)
 8008246:	480a      	ldr	r0, [pc, #40]	; (8008270 <MX_USB_HOST_Init+0x44>)
 8008248:	f7fe fd26 	bl	8006c98 <USBH_RegisterClass>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d001      	beq.n	8008256 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008252:	f7f8 fcd1 	bl	8000bf8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008256:	4806      	ldr	r0, [pc, #24]	; (8008270 <MX_USB_HOST_Init+0x44>)
 8008258:	f7fe fdaa 	bl	8006db0 <USBH_Start>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d001      	beq.n	8008266 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008262:	f7f8 fcc9 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008266:	bf00      	nop
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	0800828d 	.word	0x0800828d
 8008270:	200001fc 	.word	0x200001fc
 8008274:	2000000c 	.word	0x2000000c

08008278 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800827c:	4802      	ldr	r0, [pc, #8]	; (8008288 <MX_USB_HOST_Process+0x10>)
 800827e:	f7fe fda7 	bl	8006dd0 <USBH_Process>
}
 8008282:	bf00      	nop
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	200001fc 	.word	0x200001fc

0800828c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	460b      	mov	r3, r1
 8008296:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008298:	78fb      	ldrb	r3, [r7, #3]
 800829a:	3b01      	subs	r3, #1
 800829c:	2b04      	cmp	r3, #4
 800829e:	d819      	bhi.n	80082d4 <USBH_UserProcess+0x48>
 80082a0:	a201      	add	r2, pc, #4	; (adr r2, 80082a8 <USBH_UserProcess+0x1c>)
 80082a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a6:	bf00      	nop
 80082a8:	080082d5 	.word	0x080082d5
 80082ac:	080082c5 	.word	0x080082c5
 80082b0:	080082d5 	.word	0x080082d5
 80082b4:	080082cd 	.word	0x080082cd
 80082b8:	080082bd 	.word	0x080082bd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80082bc:	4b09      	ldr	r3, [pc, #36]	; (80082e4 <USBH_UserProcess+0x58>)
 80082be:	2203      	movs	r2, #3
 80082c0:	701a      	strb	r2, [r3, #0]
  break;
 80082c2:	e008      	b.n	80082d6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80082c4:	4b07      	ldr	r3, [pc, #28]	; (80082e4 <USBH_UserProcess+0x58>)
 80082c6:	2202      	movs	r2, #2
 80082c8:	701a      	strb	r2, [r3, #0]
  break;
 80082ca:	e004      	b.n	80082d6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80082cc:	4b05      	ldr	r3, [pc, #20]	; (80082e4 <USBH_UserProcess+0x58>)
 80082ce:	2201      	movs	r2, #1
 80082d0:	701a      	strb	r2, [r3, #0]
  break;
 80082d2:	e000      	b.n	80082d6 <USBH_UserProcess+0x4a>

  default:
  break;
 80082d4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80082d6:	bf00      	nop
 80082d8:	370c      	adds	r7, #12
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	200000b0 	.word	0x200000b0

080082e8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b08a      	sub	sp, #40	; 0x28
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082f0:	f107 0314 	add.w	r3, r7, #20
 80082f4:	2200      	movs	r2, #0
 80082f6:	601a      	str	r2, [r3, #0]
 80082f8:	605a      	str	r2, [r3, #4]
 80082fa:	609a      	str	r2, [r3, #8]
 80082fc:	60da      	str	r2, [r3, #12]
 80082fe:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008308:	d147      	bne.n	800839a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800830a:	2300      	movs	r3, #0
 800830c:	613b      	str	r3, [r7, #16]
 800830e:	4b25      	ldr	r3, [pc, #148]	; (80083a4 <HAL_HCD_MspInit+0xbc>)
 8008310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008312:	4a24      	ldr	r2, [pc, #144]	; (80083a4 <HAL_HCD_MspInit+0xbc>)
 8008314:	f043 0301 	orr.w	r3, r3, #1
 8008318:	6313      	str	r3, [r2, #48]	; 0x30
 800831a:	4b22      	ldr	r3, [pc, #136]	; (80083a4 <HAL_HCD_MspInit+0xbc>)
 800831c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800831e:	f003 0301 	and.w	r3, r3, #1
 8008322:	613b      	str	r3, [r7, #16]
 8008324:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008326:	f44f 7300 	mov.w	r3, #512	; 0x200
 800832a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800832c:	2300      	movs	r3, #0
 800832e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008330:	2300      	movs	r3, #0
 8008332:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008334:	f107 0314 	add.w	r3, r7, #20
 8008338:	4619      	mov	r1, r3
 800833a:	481b      	ldr	r0, [pc, #108]	; (80083a8 <HAL_HCD_MspInit+0xc0>)
 800833c:	f7f8 ff8e 	bl	800125c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008340:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008346:	2302      	movs	r3, #2
 8008348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800834a:	2300      	movs	r3, #0
 800834c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800834e:	2303      	movs	r3, #3
 8008350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008352:	230a      	movs	r3, #10
 8008354:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008356:	f107 0314 	add.w	r3, r7, #20
 800835a:	4619      	mov	r1, r3
 800835c:	4812      	ldr	r0, [pc, #72]	; (80083a8 <HAL_HCD_MspInit+0xc0>)
 800835e:	f7f8 ff7d 	bl	800125c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008362:	4b10      	ldr	r3, [pc, #64]	; (80083a4 <HAL_HCD_MspInit+0xbc>)
 8008364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008366:	4a0f      	ldr	r2, [pc, #60]	; (80083a4 <HAL_HCD_MspInit+0xbc>)
 8008368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800836c:	6353      	str	r3, [r2, #52]	; 0x34
 800836e:	2300      	movs	r3, #0
 8008370:	60fb      	str	r3, [r7, #12]
 8008372:	4b0c      	ldr	r3, [pc, #48]	; (80083a4 <HAL_HCD_MspInit+0xbc>)
 8008374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008376:	4a0b      	ldr	r2, [pc, #44]	; (80083a4 <HAL_HCD_MspInit+0xbc>)
 8008378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800837c:	6453      	str	r3, [r2, #68]	; 0x44
 800837e:	4b09      	ldr	r3, [pc, #36]	; (80083a4 <HAL_HCD_MspInit+0xbc>)
 8008380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008386:	60fb      	str	r3, [r7, #12]
 8008388:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800838a:	2200      	movs	r2, #0
 800838c:	2100      	movs	r1, #0
 800838e:	2043      	movs	r0, #67	; 0x43
 8008390:	f7f8 ff14 	bl	80011bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008394:	2043      	movs	r0, #67	; 0x43
 8008396:	f7f8 ff3d 	bl	8001214 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800839a:	bf00      	nop
 800839c:	3728      	adds	r7, #40	; 0x28
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	40023800 	.word	0x40023800
 80083a8:	40020000 	.word	0x40020000

080083ac <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7ff f8db 	bl	8007576 <USBH_LL_IncTimer>
}
 80083c0:	bf00      	nop
 80083c2:	3708      	adds	r7, #8
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7ff f913 	bl	8007602 <USBH_LL_Connect>
}
 80083dc:	bf00      	nop
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7ff f91c 	bl	8007630 <USBH_LL_Disconnect>
}
 80083f8:	bf00      	nop
 80083fa:	3708      	adds	r7, #8
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	460b      	mov	r3, r1
 800840a:	70fb      	strb	r3, [r7, #3]
 800840c:	4613      	mov	r3, r2
 800840e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008410:	bf00      	nop
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800842a:	4618      	mov	r0, r3
 800842c:	f7ff f8cd 	bl	80075ca <USBH_LL_PortEnabled>
}
 8008430:	bf00      	nop
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008446:	4618      	mov	r0, r3
 8008448:	f7ff f8cd 	bl	80075e6 <USBH_LL_PortDisabled>
}
 800844c:	bf00      	nop
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008462:	2b01      	cmp	r3, #1
 8008464:	d12a      	bne.n	80084bc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008466:	4a18      	ldr	r2, [pc, #96]	; (80084c8 <USBH_LL_Init+0x74>)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a15      	ldr	r2, [pc, #84]	; (80084c8 <USBH_LL_Init+0x74>)
 8008472:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008476:	4b14      	ldr	r3, [pc, #80]	; (80084c8 <USBH_LL_Init+0x74>)
 8008478:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800847c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800847e:	4b12      	ldr	r3, [pc, #72]	; (80084c8 <USBH_LL_Init+0x74>)
 8008480:	2208      	movs	r2, #8
 8008482:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008484:	4b10      	ldr	r3, [pc, #64]	; (80084c8 <USBH_LL_Init+0x74>)
 8008486:	2201      	movs	r2, #1
 8008488:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800848a:	4b0f      	ldr	r3, [pc, #60]	; (80084c8 <USBH_LL_Init+0x74>)
 800848c:	2200      	movs	r2, #0
 800848e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008490:	4b0d      	ldr	r3, [pc, #52]	; (80084c8 <USBH_LL_Init+0x74>)
 8008492:	2202      	movs	r2, #2
 8008494:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008496:	4b0c      	ldr	r3, [pc, #48]	; (80084c8 <USBH_LL_Init+0x74>)
 8008498:	2200      	movs	r2, #0
 800849a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800849c:	480a      	ldr	r0, [pc, #40]	; (80084c8 <USBH_LL_Init+0x74>)
 800849e:	f7f9 f9ab 	bl	80017f8 <HAL_HCD_Init>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d001      	beq.n	80084ac <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80084a8:	f7f8 fba6 	bl	8000bf8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80084ac:	4806      	ldr	r0, [pc, #24]	; (80084c8 <USBH_LL_Init+0x74>)
 80084ae:	f7f9 fd9a 	bl	8001fe6 <HAL_HCD_GetCurrentFrame>
 80084b2:	4603      	mov	r3, r0
 80084b4:	4619      	mov	r1, r3
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7ff f84e 	bl	8007558 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	200005d4 	.word	0x200005d4

080084cc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084d4:	2300      	movs	r3, #0
 80084d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084d8:	2300      	movs	r3, #0
 80084da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7f9 fd09 	bl	8001efa <HAL_HCD_Start>
 80084e8:	4603      	mov	r3, r0
 80084ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80084ec:	7bfb      	ldrb	r3, [r7, #15]
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 f95c 	bl	80087ac <USBH_Get_USB_Status>
 80084f4:	4603      	mov	r3, r0
 80084f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b084      	sub	sp, #16
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800850a:	2300      	movs	r3, #0
 800850c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800850e:	2300      	movs	r3, #0
 8008510:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008518:	4618      	mov	r0, r3
 800851a:	f7f9 fd11 	bl	8001f40 <HAL_HCD_Stop>
 800851e:	4603      	mov	r3, r0
 8008520:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008522:	7bfb      	ldrb	r3, [r7, #15]
 8008524:	4618      	mov	r0, r3
 8008526:	f000 f941 	bl	80087ac <USBH_Get_USB_Status>
 800852a:	4603      	mov	r3, r0
 800852c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800852e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008530:	4618      	mov	r0, r3
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008540:	2301      	movs	r3, #1
 8008542:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800854a:	4618      	mov	r0, r3
 800854c:	f7f9 fd59 	bl	8002002 <HAL_HCD_GetCurrentSpeed>
 8008550:	4603      	mov	r3, r0
 8008552:	2b02      	cmp	r3, #2
 8008554:	d00c      	beq.n	8008570 <USBH_LL_GetSpeed+0x38>
 8008556:	2b02      	cmp	r3, #2
 8008558:	d80d      	bhi.n	8008576 <USBH_LL_GetSpeed+0x3e>
 800855a:	2b00      	cmp	r3, #0
 800855c:	d002      	beq.n	8008564 <USBH_LL_GetSpeed+0x2c>
 800855e:	2b01      	cmp	r3, #1
 8008560:	d003      	beq.n	800856a <USBH_LL_GetSpeed+0x32>
 8008562:	e008      	b.n	8008576 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008564:	2300      	movs	r3, #0
 8008566:	73fb      	strb	r3, [r7, #15]
    break;
 8008568:	e008      	b.n	800857c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800856a:	2301      	movs	r3, #1
 800856c:	73fb      	strb	r3, [r7, #15]
    break;
 800856e:	e005      	b.n	800857c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008570:	2302      	movs	r3, #2
 8008572:	73fb      	strb	r3, [r7, #15]
    break;
 8008574:	e002      	b.n	800857c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008576:	2301      	movs	r3, #1
 8008578:	73fb      	strb	r3, [r7, #15]
    break;
 800857a:	bf00      	nop
  }
  return  speed;
 800857c:	7bfb      	ldrb	r3, [r7, #15]
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b084      	sub	sp, #16
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800858e:	2300      	movs	r3, #0
 8008590:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008592:	2300      	movs	r3, #0
 8008594:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800859c:	4618      	mov	r0, r3
 800859e:	f7f9 fcec 	bl	8001f7a <HAL_HCD_ResetPort>
 80085a2:	4603      	mov	r3, r0
 80085a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80085a6:	7bfb      	ldrb	r3, [r7, #15]
 80085a8:	4618      	mov	r0, r3
 80085aa:	f000 f8ff 	bl	80087ac <USBH_Get_USB_Status>
 80085ae:	4603      	mov	r3, r0
 80085b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	460b      	mov	r3, r1
 80085c6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80085ce:	78fa      	ldrb	r2, [r7, #3]
 80085d0:	4611      	mov	r1, r2
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7f9 fcf3 	bl	8001fbe <HAL_HCD_HC_GetXferCount>
 80085d8:	4603      	mov	r3, r0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3708      	adds	r7, #8
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}

080085e2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80085e2:	b590      	push	{r4, r7, lr}
 80085e4:	b089      	sub	sp, #36	; 0x24
 80085e6:	af04      	add	r7, sp, #16
 80085e8:	6078      	str	r0, [r7, #4]
 80085ea:	4608      	mov	r0, r1
 80085ec:	4611      	mov	r1, r2
 80085ee:	461a      	mov	r2, r3
 80085f0:	4603      	mov	r3, r0
 80085f2:	70fb      	strb	r3, [r7, #3]
 80085f4:	460b      	mov	r3, r1
 80085f6:	70bb      	strb	r3, [r7, #2]
 80085f8:	4613      	mov	r3, r2
 80085fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085fc:	2300      	movs	r3, #0
 80085fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008600:	2300      	movs	r3, #0
 8008602:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800860a:	787c      	ldrb	r4, [r7, #1]
 800860c:	78ba      	ldrb	r2, [r7, #2]
 800860e:	78f9      	ldrb	r1, [r7, #3]
 8008610:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008612:	9302      	str	r3, [sp, #8]
 8008614:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008618:	9301      	str	r3, [sp, #4]
 800861a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800861e:	9300      	str	r3, [sp, #0]
 8008620:	4623      	mov	r3, r4
 8008622:	f7f9 f957 	bl	80018d4 <HAL_HCD_HC_Init>
 8008626:	4603      	mov	r3, r0
 8008628:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800862a:	7bfb      	ldrb	r3, [r7, #15]
 800862c:	4618      	mov	r0, r3
 800862e:	f000 f8bd 	bl	80087ac <USBH_Get_USB_Status>
 8008632:	4603      	mov	r3, r0
 8008634:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008636:	7bbb      	ldrb	r3, [r7, #14]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3714      	adds	r7, #20
 800863c:	46bd      	mov	sp, r7
 800863e:	bd90      	pop	{r4, r7, pc}

08008640 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	460b      	mov	r3, r1
 800864a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800864c:	2300      	movs	r3, #0
 800864e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008650:	2300      	movs	r3, #0
 8008652:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800865a:	78fa      	ldrb	r2, [r7, #3]
 800865c:	4611      	mov	r1, r2
 800865e:	4618      	mov	r0, r3
 8008660:	f7f9 f9c7 	bl	80019f2 <HAL_HCD_HC_Halt>
 8008664:	4603      	mov	r3, r0
 8008666:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008668:	7bfb      	ldrb	r3, [r7, #15]
 800866a:	4618      	mov	r0, r3
 800866c:	f000 f89e 	bl	80087ac <USBH_Get_USB_Status>
 8008670:	4603      	mov	r3, r0
 8008672:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008674:	7bbb      	ldrb	r3, [r7, #14]
}
 8008676:	4618      	mov	r0, r3
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800867e:	b590      	push	{r4, r7, lr}
 8008680:	b089      	sub	sp, #36	; 0x24
 8008682:	af04      	add	r7, sp, #16
 8008684:	6078      	str	r0, [r7, #4]
 8008686:	4608      	mov	r0, r1
 8008688:	4611      	mov	r1, r2
 800868a:	461a      	mov	r2, r3
 800868c:	4603      	mov	r3, r0
 800868e:	70fb      	strb	r3, [r7, #3]
 8008690:	460b      	mov	r3, r1
 8008692:	70bb      	strb	r3, [r7, #2]
 8008694:	4613      	mov	r3, r2
 8008696:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008698:	2300      	movs	r3, #0
 800869a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800869c:	2300      	movs	r3, #0
 800869e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80086a6:	787c      	ldrb	r4, [r7, #1]
 80086a8:	78ba      	ldrb	r2, [r7, #2]
 80086aa:	78f9      	ldrb	r1, [r7, #3]
 80086ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80086b0:	9303      	str	r3, [sp, #12]
 80086b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80086b4:	9302      	str	r3, [sp, #8]
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	9301      	str	r3, [sp, #4]
 80086ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80086be:	9300      	str	r3, [sp, #0]
 80086c0:	4623      	mov	r3, r4
 80086c2:	f7f9 f9b9 	bl	8001a38 <HAL_HCD_HC_SubmitRequest>
 80086c6:	4603      	mov	r3, r0
 80086c8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80086ca:	7bfb      	ldrb	r3, [r7, #15]
 80086cc:	4618      	mov	r0, r3
 80086ce:	f000 f86d 	bl	80087ac <USBH_Get_USB_Status>
 80086d2:	4603      	mov	r3, r0
 80086d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3714      	adds	r7, #20
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd90      	pop	{r4, r7, pc}

080086e0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	460b      	mov	r3, r1
 80086ea:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80086f2:	78fa      	ldrb	r2, [r7, #3]
 80086f4:	4611      	mov	r1, r2
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7f9 fc4d 	bl	8001f96 <HAL_HCD_HC_GetURBState>
 80086fc:	4603      	mov	r3, r0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b082      	sub	sp, #8
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	460b      	mov	r3, r1
 8008710:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008718:	2b01      	cmp	r3, #1
 800871a:	d103      	bne.n	8008724 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800871c:	78fb      	ldrb	r3, [r7, #3]
 800871e:	4618      	mov	r0, r3
 8008720:	f000 f870 	bl	8008804 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008724:	20c8      	movs	r0, #200	; 0xc8
 8008726:	f7f8 fc35 	bl	8000f94 <HAL_Delay>
  return USBH_OK;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3708      	adds	r7, #8
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	460b      	mov	r3, r1
 800873e:	70fb      	strb	r3, [r7, #3]
 8008740:	4613      	mov	r3, r2
 8008742:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800874a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800874c:	78fb      	ldrb	r3, [r7, #3]
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	212c      	movs	r1, #44	; 0x2c
 8008752:	fb01 f303 	mul.w	r3, r1, r3
 8008756:	4413      	add	r3, r2
 8008758:	333b      	adds	r3, #59	; 0x3b
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d009      	beq.n	8008774 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008760:	78fb      	ldrb	r3, [r7, #3]
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	212c      	movs	r1, #44	; 0x2c
 8008766:	fb01 f303 	mul.w	r3, r1, r3
 800876a:	4413      	add	r3, r2
 800876c:	3354      	adds	r3, #84	; 0x54
 800876e:	78ba      	ldrb	r2, [r7, #2]
 8008770:	701a      	strb	r2, [r3, #0]
 8008772:	e008      	b.n	8008786 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008774:	78fb      	ldrb	r3, [r7, #3]
 8008776:	68fa      	ldr	r2, [r7, #12]
 8008778:	212c      	movs	r1, #44	; 0x2c
 800877a:	fb01 f303 	mul.w	r3, r1, r3
 800877e:	4413      	add	r3, r2
 8008780:	3355      	adds	r3, #85	; 0x55
 8008782:	78ba      	ldrb	r2, [r7, #2]
 8008784:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3714      	adds	r7, #20
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f7f8 fbf9 	bl	8000f94 <HAL_Delay>
}
 80087a2:	bf00      	nop
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
	...

080087ac <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	4603      	mov	r3, r0
 80087b4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087b6:	2300      	movs	r3, #0
 80087b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80087ba:	79fb      	ldrb	r3, [r7, #7]
 80087bc:	2b03      	cmp	r3, #3
 80087be:	d817      	bhi.n	80087f0 <USBH_Get_USB_Status+0x44>
 80087c0:	a201      	add	r2, pc, #4	; (adr r2, 80087c8 <USBH_Get_USB_Status+0x1c>)
 80087c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c6:	bf00      	nop
 80087c8:	080087d9 	.word	0x080087d9
 80087cc:	080087df 	.word	0x080087df
 80087d0:	080087e5 	.word	0x080087e5
 80087d4:	080087eb 	.word	0x080087eb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80087d8:	2300      	movs	r3, #0
 80087da:	73fb      	strb	r3, [r7, #15]
    break;
 80087dc:	e00b      	b.n	80087f6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80087de:	2302      	movs	r3, #2
 80087e0:	73fb      	strb	r3, [r7, #15]
    break;
 80087e2:	e008      	b.n	80087f6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80087e4:	2301      	movs	r3, #1
 80087e6:	73fb      	strb	r3, [r7, #15]
    break;
 80087e8:	e005      	b.n	80087f6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80087ea:	2302      	movs	r3, #2
 80087ec:	73fb      	strb	r3, [r7, #15]
    break;
 80087ee:	e002      	b.n	80087f6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80087f0:	2302      	movs	r3, #2
 80087f2:	73fb      	strb	r3, [r7, #15]
    break;
 80087f4:	bf00      	nop
  }
  return usb_status;
 80087f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3714      	adds	r7, #20
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	4603      	mov	r3, r0
 800880c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800880e:	79fb      	ldrb	r3, [r7, #7]
 8008810:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008812:	79fb      	ldrb	r3, [r7, #7]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d102      	bne.n	800881e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008818:	2301      	movs	r3, #1
 800881a:	73fb      	strb	r3, [r7, #15]
 800881c:	e001      	b.n	8008822 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800881e:	2300      	movs	r3, #0
 8008820:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008822:	7bfb      	ldrb	r3, [r7, #15]
 8008824:	461a      	mov	r2, r3
 8008826:	2101      	movs	r1, #1
 8008828:	4803      	ldr	r0, [pc, #12]	; (8008838 <MX_DriverVbusFS+0x34>)
 800882a:	f7f8 ffb3 	bl	8001794 <HAL_GPIO_WritePin>
}
 800882e:	bf00      	nop
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	40020800 	.word	0x40020800

0800883c <__errno>:
 800883c:	4b01      	ldr	r3, [pc, #4]	; (8008844 <__errno+0x8>)
 800883e:	6818      	ldr	r0, [r3, #0]
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	2000002c 	.word	0x2000002c

08008848 <__libc_init_array>:
 8008848:	b570      	push	{r4, r5, r6, lr}
 800884a:	4d0d      	ldr	r5, [pc, #52]	; (8008880 <__libc_init_array+0x38>)
 800884c:	4c0d      	ldr	r4, [pc, #52]	; (8008884 <__libc_init_array+0x3c>)
 800884e:	1b64      	subs	r4, r4, r5
 8008850:	10a4      	asrs	r4, r4, #2
 8008852:	2600      	movs	r6, #0
 8008854:	42a6      	cmp	r6, r4
 8008856:	d109      	bne.n	800886c <__libc_init_array+0x24>
 8008858:	4d0b      	ldr	r5, [pc, #44]	; (8008888 <__libc_init_array+0x40>)
 800885a:	4c0c      	ldr	r4, [pc, #48]	; (800888c <__libc_init_array+0x44>)
 800885c:	f000 f906 	bl	8008a6c <_init>
 8008860:	1b64      	subs	r4, r4, r5
 8008862:	10a4      	asrs	r4, r4, #2
 8008864:	2600      	movs	r6, #0
 8008866:	42a6      	cmp	r6, r4
 8008868:	d105      	bne.n	8008876 <__libc_init_array+0x2e>
 800886a:	bd70      	pop	{r4, r5, r6, pc}
 800886c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008870:	4798      	blx	r3
 8008872:	3601      	adds	r6, #1
 8008874:	e7ee      	b.n	8008854 <__libc_init_array+0xc>
 8008876:	f855 3b04 	ldr.w	r3, [r5], #4
 800887a:	4798      	blx	r3
 800887c:	3601      	adds	r6, #1
 800887e:	e7f2      	b.n	8008866 <__libc_init_array+0x1e>
 8008880:	08008cd4 	.word	0x08008cd4
 8008884:	08008cd4 	.word	0x08008cd4
 8008888:	08008cd4 	.word	0x08008cd4
 800888c:	08008cd8 	.word	0x08008cd8

08008890 <malloc>:
 8008890:	4b02      	ldr	r3, [pc, #8]	; (800889c <malloc+0xc>)
 8008892:	4601      	mov	r1, r0
 8008894:	6818      	ldr	r0, [r3, #0]
 8008896:	f000 b871 	b.w	800897c <_malloc_r>
 800889a:	bf00      	nop
 800889c:	2000002c 	.word	0x2000002c

080088a0 <free>:
 80088a0:	4b02      	ldr	r3, [pc, #8]	; (80088ac <free+0xc>)
 80088a2:	4601      	mov	r1, r0
 80088a4:	6818      	ldr	r0, [r3, #0]
 80088a6:	f000 b819 	b.w	80088dc <_free_r>
 80088aa:	bf00      	nop
 80088ac:	2000002c 	.word	0x2000002c

080088b0 <memcpy>:
 80088b0:	440a      	add	r2, r1
 80088b2:	4291      	cmp	r1, r2
 80088b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80088b8:	d100      	bne.n	80088bc <memcpy+0xc>
 80088ba:	4770      	bx	lr
 80088bc:	b510      	push	{r4, lr}
 80088be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088c6:	4291      	cmp	r1, r2
 80088c8:	d1f9      	bne.n	80088be <memcpy+0xe>
 80088ca:	bd10      	pop	{r4, pc}

080088cc <memset>:
 80088cc:	4402      	add	r2, r0
 80088ce:	4603      	mov	r3, r0
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d100      	bne.n	80088d6 <memset+0xa>
 80088d4:	4770      	bx	lr
 80088d6:	f803 1b01 	strb.w	r1, [r3], #1
 80088da:	e7f9      	b.n	80088d0 <memset+0x4>

080088dc <_free_r>:
 80088dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088de:	2900      	cmp	r1, #0
 80088e0:	d048      	beq.n	8008974 <_free_r+0x98>
 80088e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088e6:	9001      	str	r0, [sp, #4]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f1a1 0404 	sub.w	r4, r1, #4
 80088ee:	bfb8      	it	lt
 80088f0:	18e4      	addlt	r4, r4, r3
 80088f2:	f000 f8ad 	bl	8008a50 <__malloc_lock>
 80088f6:	4a20      	ldr	r2, [pc, #128]	; (8008978 <_free_r+0x9c>)
 80088f8:	9801      	ldr	r0, [sp, #4]
 80088fa:	6813      	ldr	r3, [r2, #0]
 80088fc:	4615      	mov	r5, r2
 80088fe:	b933      	cbnz	r3, 800890e <_free_r+0x32>
 8008900:	6063      	str	r3, [r4, #4]
 8008902:	6014      	str	r4, [r2, #0]
 8008904:	b003      	add	sp, #12
 8008906:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800890a:	f000 b8a7 	b.w	8008a5c <__malloc_unlock>
 800890e:	42a3      	cmp	r3, r4
 8008910:	d90b      	bls.n	800892a <_free_r+0x4e>
 8008912:	6821      	ldr	r1, [r4, #0]
 8008914:	1862      	adds	r2, r4, r1
 8008916:	4293      	cmp	r3, r2
 8008918:	bf04      	itt	eq
 800891a:	681a      	ldreq	r2, [r3, #0]
 800891c:	685b      	ldreq	r3, [r3, #4]
 800891e:	6063      	str	r3, [r4, #4]
 8008920:	bf04      	itt	eq
 8008922:	1852      	addeq	r2, r2, r1
 8008924:	6022      	streq	r2, [r4, #0]
 8008926:	602c      	str	r4, [r5, #0]
 8008928:	e7ec      	b.n	8008904 <_free_r+0x28>
 800892a:	461a      	mov	r2, r3
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	b10b      	cbz	r3, 8008934 <_free_r+0x58>
 8008930:	42a3      	cmp	r3, r4
 8008932:	d9fa      	bls.n	800892a <_free_r+0x4e>
 8008934:	6811      	ldr	r1, [r2, #0]
 8008936:	1855      	adds	r5, r2, r1
 8008938:	42a5      	cmp	r5, r4
 800893a:	d10b      	bne.n	8008954 <_free_r+0x78>
 800893c:	6824      	ldr	r4, [r4, #0]
 800893e:	4421      	add	r1, r4
 8008940:	1854      	adds	r4, r2, r1
 8008942:	42a3      	cmp	r3, r4
 8008944:	6011      	str	r1, [r2, #0]
 8008946:	d1dd      	bne.n	8008904 <_free_r+0x28>
 8008948:	681c      	ldr	r4, [r3, #0]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	6053      	str	r3, [r2, #4]
 800894e:	4421      	add	r1, r4
 8008950:	6011      	str	r1, [r2, #0]
 8008952:	e7d7      	b.n	8008904 <_free_r+0x28>
 8008954:	d902      	bls.n	800895c <_free_r+0x80>
 8008956:	230c      	movs	r3, #12
 8008958:	6003      	str	r3, [r0, #0]
 800895a:	e7d3      	b.n	8008904 <_free_r+0x28>
 800895c:	6825      	ldr	r5, [r4, #0]
 800895e:	1961      	adds	r1, r4, r5
 8008960:	428b      	cmp	r3, r1
 8008962:	bf04      	itt	eq
 8008964:	6819      	ldreq	r1, [r3, #0]
 8008966:	685b      	ldreq	r3, [r3, #4]
 8008968:	6063      	str	r3, [r4, #4]
 800896a:	bf04      	itt	eq
 800896c:	1949      	addeq	r1, r1, r5
 800896e:	6021      	streq	r1, [r4, #0]
 8008970:	6054      	str	r4, [r2, #4]
 8008972:	e7c7      	b.n	8008904 <_free_r+0x28>
 8008974:	b003      	add	sp, #12
 8008976:	bd30      	pop	{r4, r5, pc}
 8008978:	200000b4 	.word	0x200000b4

0800897c <_malloc_r>:
 800897c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800897e:	1ccd      	adds	r5, r1, #3
 8008980:	f025 0503 	bic.w	r5, r5, #3
 8008984:	3508      	adds	r5, #8
 8008986:	2d0c      	cmp	r5, #12
 8008988:	bf38      	it	cc
 800898a:	250c      	movcc	r5, #12
 800898c:	2d00      	cmp	r5, #0
 800898e:	4606      	mov	r6, r0
 8008990:	db01      	blt.n	8008996 <_malloc_r+0x1a>
 8008992:	42a9      	cmp	r1, r5
 8008994:	d903      	bls.n	800899e <_malloc_r+0x22>
 8008996:	230c      	movs	r3, #12
 8008998:	6033      	str	r3, [r6, #0]
 800899a:	2000      	movs	r0, #0
 800899c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800899e:	f000 f857 	bl	8008a50 <__malloc_lock>
 80089a2:	4921      	ldr	r1, [pc, #132]	; (8008a28 <_malloc_r+0xac>)
 80089a4:	680a      	ldr	r2, [r1, #0]
 80089a6:	4614      	mov	r4, r2
 80089a8:	b99c      	cbnz	r4, 80089d2 <_malloc_r+0x56>
 80089aa:	4f20      	ldr	r7, [pc, #128]	; (8008a2c <_malloc_r+0xb0>)
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	b923      	cbnz	r3, 80089ba <_malloc_r+0x3e>
 80089b0:	4621      	mov	r1, r4
 80089b2:	4630      	mov	r0, r6
 80089b4:	f000 f83c 	bl	8008a30 <_sbrk_r>
 80089b8:	6038      	str	r0, [r7, #0]
 80089ba:	4629      	mov	r1, r5
 80089bc:	4630      	mov	r0, r6
 80089be:	f000 f837 	bl	8008a30 <_sbrk_r>
 80089c2:	1c43      	adds	r3, r0, #1
 80089c4:	d123      	bne.n	8008a0e <_malloc_r+0x92>
 80089c6:	230c      	movs	r3, #12
 80089c8:	6033      	str	r3, [r6, #0]
 80089ca:	4630      	mov	r0, r6
 80089cc:	f000 f846 	bl	8008a5c <__malloc_unlock>
 80089d0:	e7e3      	b.n	800899a <_malloc_r+0x1e>
 80089d2:	6823      	ldr	r3, [r4, #0]
 80089d4:	1b5b      	subs	r3, r3, r5
 80089d6:	d417      	bmi.n	8008a08 <_malloc_r+0x8c>
 80089d8:	2b0b      	cmp	r3, #11
 80089da:	d903      	bls.n	80089e4 <_malloc_r+0x68>
 80089dc:	6023      	str	r3, [r4, #0]
 80089de:	441c      	add	r4, r3
 80089e0:	6025      	str	r5, [r4, #0]
 80089e2:	e004      	b.n	80089ee <_malloc_r+0x72>
 80089e4:	6863      	ldr	r3, [r4, #4]
 80089e6:	42a2      	cmp	r2, r4
 80089e8:	bf0c      	ite	eq
 80089ea:	600b      	streq	r3, [r1, #0]
 80089ec:	6053      	strne	r3, [r2, #4]
 80089ee:	4630      	mov	r0, r6
 80089f0:	f000 f834 	bl	8008a5c <__malloc_unlock>
 80089f4:	f104 000b 	add.w	r0, r4, #11
 80089f8:	1d23      	adds	r3, r4, #4
 80089fa:	f020 0007 	bic.w	r0, r0, #7
 80089fe:	1ac2      	subs	r2, r0, r3
 8008a00:	d0cc      	beq.n	800899c <_malloc_r+0x20>
 8008a02:	1a1b      	subs	r3, r3, r0
 8008a04:	50a3      	str	r3, [r4, r2]
 8008a06:	e7c9      	b.n	800899c <_malloc_r+0x20>
 8008a08:	4622      	mov	r2, r4
 8008a0a:	6864      	ldr	r4, [r4, #4]
 8008a0c:	e7cc      	b.n	80089a8 <_malloc_r+0x2c>
 8008a0e:	1cc4      	adds	r4, r0, #3
 8008a10:	f024 0403 	bic.w	r4, r4, #3
 8008a14:	42a0      	cmp	r0, r4
 8008a16:	d0e3      	beq.n	80089e0 <_malloc_r+0x64>
 8008a18:	1a21      	subs	r1, r4, r0
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	f000 f808 	bl	8008a30 <_sbrk_r>
 8008a20:	3001      	adds	r0, #1
 8008a22:	d1dd      	bne.n	80089e0 <_malloc_r+0x64>
 8008a24:	e7cf      	b.n	80089c6 <_malloc_r+0x4a>
 8008a26:	bf00      	nop
 8008a28:	200000b4 	.word	0x200000b4
 8008a2c:	200000b8 	.word	0x200000b8

08008a30 <_sbrk_r>:
 8008a30:	b538      	push	{r3, r4, r5, lr}
 8008a32:	4d06      	ldr	r5, [pc, #24]	; (8008a4c <_sbrk_r+0x1c>)
 8008a34:	2300      	movs	r3, #0
 8008a36:	4604      	mov	r4, r0
 8008a38:	4608      	mov	r0, r1
 8008a3a:	602b      	str	r3, [r5, #0]
 8008a3c:	f7f8 f9c6 	bl	8000dcc <_sbrk>
 8008a40:	1c43      	adds	r3, r0, #1
 8008a42:	d102      	bne.n	8008a4a <_sbrk_r+0x1a>
 8008a44:	682b      	ldr	r3, [r5, #0]
 8008a46:	b103      	cbz	r3, 8008a4a <_sbrk_r+0x1a>
 8008a48:	6023      	str	r3, [r4, #0]
 8008a4a:	bd38      	pop	{r3, r4, r5, pc}
 8008a4c:	200008d8 	.word	0x200008d8

08008a50 <__malloc_lock>:
 8008a50:	4801      	ldr	r0, [pc, #4]	; (8008a58 <__malloc_lock+0x8>)
 8008a52:	f000 b809 	b.w	8008a68 <__retarget_lock_acquire_recursive>
 8008a56:	bf00      	nop
 8008a58:	200008e0 	.word	0x200008e0

08008a5c <__malloc_unlock>:
 8008a5c:	4801      	ldr	r0, [pc, #4]	; (8008a64 <__malloc_unlock+0x8>)
 8008a5e:	f000 b804 	b.w	8008a6a <__retarget_lock_release_recursive>
 8008a62:	bf00      	nop
 8008a64:	200008e0 	.word	0x200008e0

08008a68 <__retarget_lock_acquire_recursive>:
 8008a68:	4770      	bx	lr

08008a6a <__retarget_lock_release_recursive>:
 8008a6a:	4770      	bx	lr

08008a6c <_init>:
 8008a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a6e:	bf00      	nop
 8008a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a72:	bc08      	pop	{r3}
 8008a74:	469e      	mov	lr, r3
 8008a76:	4770      	bx	lr

08008a78 <_fini>:
 8008a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a7a:	bf00      	nop
 8008a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a7e:	bc08      	pop	{r3}
 8008a80:	469e      	mov	lr, r3
 8008a82:	4770      	bx	lr
